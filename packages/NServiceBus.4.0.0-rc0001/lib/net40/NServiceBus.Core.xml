<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NServiceBus.Core</name>
  </assembly>
  <members>
    <member name="T:NServiceBus.IExcludesBuilder">
      <summary>
            Supporting the fluent interface in <seealso cref="T:NServiceBus.AllAssemblies" /></summary>
    </member>
    <member name="M:NServiceBus.IExcludesBuilder.And(System.String)">
      <summary>
            Indicate that the given assembly expression should also be excluded.
            You can call this method multiple times.
            </summary>
      <param name="assemblyExpression">
        <see cref="M:NServiceBus.Configure.IsMatch(System.String,System.String)" />
      </param>
      <seealso cref="M:NServiceBus.Configure.IsMatch(System.String,System.String)" />
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.IIncludesBuilder">
      <summary>
            Supporting the fluent interface in <seealso cref="T:NServiceBus.AllAssemblies" /></summary>
    </member>
    <member name="M:NServiceBus.IIncludesBuilder.And(System.String)">
      <summary>
            Indicate that assemblies matching the given expression should also be included.
            You can call this method multiple times.
            </summary>
      <param name="assemblyExpression">
        <see cref="M:NServiceBus.Configure.IsMatch(System.String,System.String)" />
      </param>
      <seealso cref="M:NServiceBus.Configure.IsMatch(System.String,System.String)" />
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.IIncludesBuilder.Except(System.String)">
      <summary>
            Indicate that assemblies matching the given expression should be excluded.
            Use the 'And' method to indicate other assemblies to be skipped.
            </summary>
      <param name="assemblyExpression">
        <see cref="M:NServiceBus.Configure.IsMatch(System.String,System.String)" />
      </param>
      <seealso cref="M:NServiceBus.Configure.IsMatch(System.String,System.String)" />
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.AllAssemblies">
      <summary>
            Class for specifying which assemblies not to load.
            </summary>
    </member>
    <member name="M:NServiceBus.AllAssemblies.Except(System.String)">
      <summary>
            Indicate that assemblies matching the given expression are not to be used.
            Use the 'And' method to indicate other assemblies to be skipped.
            </summary>
      <param name="assemblyExpression">
        <see cref="M:NServiceBus.Configure.IsMatch(System.String,System.String)" />
      </param>
      <seealso cref="M:NServiceBus.Configure.IsMatch(System.String,System.String)" />
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.AllAssemblies.Matching(System.String)">
      <summary>
            Indicate that assemblies matching the given expression are to be used.
            Use the 'And' method to indicate other assemblies to be included.
            </summary>
      <param name="assemblyExpression">
        <see cref="M:NServiceBus.Configure.IsMatch(System.String,System.String)" />
      </param>
      <seealso cref="M:NServiceBus.Configure.IsMatch(System.String,System.String)" />
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.AllAssemblies.GetEnumerator">
      <summary>
            Returns an enumerator for looping over the assemblies to be loaded.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Features.Feature">
      <summary>
            Used to control the various features supported by the framework.
            </summary>
    </member>
    <member name="M:NServiceBus.Features.Feature.Initialize">
      <summary>
            Called when the feature should perform its initialization. This call will only happen if the feature is enabled.
            </summary>
    </member>
    <member name="M:NServiceBus.Features.Feature.ShouldBeEnabled">
      <summary>
            Returns true if the feature should be enable. This method wont be called if the feature is explicitly disabled
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Features.Feature.Enable``1">
      <summary>
            Enables the give feature
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Features.Feature.Disable``1">
      <summary>
            Turns the given feature off
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Features.Feature.Disable(System.Type)">
      <summary>
            Turns the given feature off
            </summary>
    </member>
    <member name="M:NServiceBus.Features.Feature.IsEnabled``1">
      <summary>
            Returns true if the given feature is enabled
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Features.Feature.IsEnabled(System.Type)">
      <summary>
            Returns true if the given feature is enabled
            </summary>
      <param name="feature">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Features.Feature.ByCategory(NServiceBus.Features.FeatureCategory)">
      <summary>
            Gets all features for the given category
            </summary>
      <param name="category">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Features.Feature.IsEnabledByDefault">
      <summary>
            Return <c>true</c> if this is a default <see cref="T:NServiceBus.Features.Feature" /> that needs to be turned on automatically.
            </summary>
    </member>
    <member name="P:NServiceBus.Features.Feature.Name">
      <summary>
            Feature name.
            </summary>
    </member>
    <member name="P:NServiceBus.Features.Feature.Enabled">
      <summary>
            True if this specific feature is enabled
            </summary>
    </member>
    <member name="P:NServiceBus.Features.Feature.Category">
      <summary>
            Returns the category for this feature if any
            </summary>
    </member>
    <member name="T:NServiceBus.Settings.ISetDefaultSettings">
      <summary>
            Implement this interface to register default settings.
            </summary>
    </member>
    <member name="M:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings.DoNotRequireExplicitRouting">
      <summary>
            Allows to endpoint to subscribe to messages owned by the local endpoint
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings.CustomAutoSubscriptionStrategy``1">
      <summary>
            Registers a custom autosubscription strategy
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Configure">
      <summary>
            Central configuration entry point for NServiceBus.
            </summary>
    </member>
    <member name="F:NServiceBus.Configure.GetEndpointNameAction">
      <summary>
            The function used to get the name of this endpoint
            </summary>
    </member>
    <member name="F:NServiceBus.Configure.DefineEndpointVersionRetriever">
      <summary>
            The function used to get the version of this endpoint
            </summary>
    </member>
    <member name="F:NServiceBus.Configure.LoadAssembly">
      <summary>
            The function used to get the name of this endpoint
            </summary>
    </member>
    <member name="M:NServiceBus.Configure.WithHasBeenCalled">
      <summary>
            True if any of the Configure.With() has been called
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.BuilderIsConfigured">
      <summary>
            True if a builder has been defined
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.CustomConfigurationSource(NServiceBus.Config.ConfigurationSource.IConfigurationSource)">
      <summary>
            Sets the current configuration source
            </summary>
      <param name="configurationSource">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.#ctor">
      <summary>
            Protected constructor to enable creation only via the With method.
            </summary>
    </member>
    <member name="M:NServiceBus.Configure.ScaleOut(System.Action{NServiceBus.Settings.ScaleOutSettings})">
      <summary>
            Allows the user to control how the current endpoint behaves when scaled out
            </summary>
      <param name="customScaleOutSettings">
      </param>
    </member>
    <member name="M:NServiceBus.Configure.With">
      <summary>
            Creates a new configuration object scanning assemblies
            in the regular runtime directory.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.WithWeb">
      <summary>
            Configures NServiceBus to scan for assemblies 
            in the relevant web directory instead of regular
            runtime directory.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.With(System.String)">
      <summary>
            Configures NServiceBus to scan for assemblies
            in the given directory rather than the regular
            runtime directory.
            </summary>
      <param name="probeDirectory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.With(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Configures NServiceBus to use the types found in the given assemblies.
            </summary>
      <param name="assemblies">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.With(System.Reflection.Assembly[])">
      <summary>
            Configures nServiceBus to scan the given assemblies only.
            </summary>
      <param name="assemblies">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.With(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Configures nServiceBus to scan the given types.
            </summary>
      <param name="typesToScan">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.RunCustomAction(System.Action)">
      <summary>
            Run a custom action at configuration time - useful for performing additional configuration not exposed by the fluent interface.
            </summary>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.CreateBus">
      <summary>
            Provides an instance to a startable bus.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.Initialize">
      <summary>
            Finalizes the configuration by invoking all initialisers.
            </summary>
    </member>
    <member name="M:NServiceBus.Configure.ForAllTypes``1(System.Action{System.Type})">
      <summary>
            Applies the given action to all the scanned types that can be assigned to T 
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="action">
      </param>
    </member>
    <member name="M:NServiceBus.Configure.GetConfigSection``1">
      <summary>
            Returns the requested config section using the current configuration source
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.GetAssembliesInDirectory(System.String,System.String[])">
      <summary>
            Load and return all assemblies in the given directory except the given ones to exclude
            </summary>
      <param name="path">
      </param>
      <param name="assembliesToSkip">The exclude must either be the full</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.FindAssemblies(System.String,System.Boolean,System.Predicate{System.String},System.Predicate{System.String})">
      <summary>
            Find and return all assemblies in the given directory and the current appdomain 
            filtered to <paramref name="includeAssemblyNames" />, if given, 
            but except <paramref name="excludeAssemblyNames" /></summary>
      <param name="path">Directory to search in.</param>
      <param name="includeAppDomainAssemblies">Shortcut Assembly.Load by instead using yet loaded assemblies.</param>
      <param name="includeAssemblyNames">All, if <c>null</c></param>
      <param name="excludeAssemblyNames">None, if <c>null</c></param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.Component``1(NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the given type with the given lifecycle
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="lifecycle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.Component(System.Type,NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the given type with the given lifecycle
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="lifecycle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.Component``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the given type with the given lifecycle
            </summary>
    </member>
    <member name="M:NServiceBus.Configure.HasComponent``1">
      <summary>
            Returns true if the given component exists in the container
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.HasComponent(System.Type)">
      <summary>
            Returns true if the given component exists in the container
            </summary>
      <param name="componentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.IsMatch(System.String,System.String)">
      <summary>
            Check, if an assembly name matches the given expression.
            </summary>
      <param name="expression">
        <c>Wildcard.</c> matches 'Wildcard' and Assemblies starting with 'Wildcard.';
             <c>Exact</c> matches only "Exact". Casing is generally ignored.
            </param>
      <param name="scopedNameOrFileName">The name or file name of the assembly, a full type name or namespace.</param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Configure.Instance">
      <summary>
            Provides static access to the configuration object.
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.Builder">
      <summary>
            Gets/sets the builder.
            Setting the builder should only be done by NServiceBus framework code.
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.ConfigurationSource">
      <summary>
            Gets/sets the configuration source to be used by NServiceBus.
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.Configurer">
      <summary>
            Gets/sets the object used to configure components.
            This object should eventually reference the same container as the Builder.
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.SendOnlyMode">
      <summary>
            True if this endpoint is operating in send only mode
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.TypesToScan">
      <summary>
            Returns types in assemblies found in the current directory.
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.EndpointName">
      <summary>
            The name of this endpoint
            </summary>
    </member>
    <member name="E:NServiceBus.Configure.ConfigurationComplete">
      <summary>
            Event raised when configuration is complete
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureBinarySerializer">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureBinarySerializer.BinarySerializer(NServiceBus.Configure)">
      <summary>
            Use binary serialization.
            Note that this does not support interface-based messages.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureCriticalErrorAction">
      <summary>
                Allow override critical error action
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureCriticalErrorAction.DefineCriticalErrorAction(NServiceBus.Configure,System.Action{System.String,System.Exception})">
      <summary>
                Sets the function to be used when critical error occurs.
            </summary>
      <param name="config">The configuration object.</param>
      <param name="onCriticalError">Assigns the action to perform on critical error.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureCriticalErrorAction.RaiseCriticalError(NServiceBus.Configure,System.String,System.Exception)">
      <summary>
                Execute the configured Critical error action.
            </summary>
      <param name="config">The configuration object.</param>
      <param name="errorMessage">The error message.</param>
      <param name="exception">The critical exception thrown.</param>
    </member>
    <member name="M:NServiceBus.ConfigureCriticalErrorAction.DefineCriticalErrorAction(NServiceBus.Configure,System.Action)">
      <summary>
            Sets the function to be used when critical error occurs
            </summary>
      <param name="config">The configuration object.</param>
      <param name="onCriticalError">Assigns the action to perform on critical error.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureCriticalErrorAction.OnCriticalError(NServiceBus.Configure)">
      <summary>
            Execute the configured Critical error action
            </summary>
      <param name="config">The configuration object.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="T:NServiceBus.ConfigureDefaultBuilder">
      <summary>
            Configuration extension for the default builder
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureDefaultBuilder.DefaultBuilder(NServiceBus.Configure)">
      <summary>
            Uses the default container merged into NServiceBus.Core.dll.
            In this version, the container is the Spring Framework.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureDistributor.WorkerRunsOnThisEndpoint(NServiceBus.Configure)">
      <summary>
            Return whether this endpoint contains a worker
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureDistributor.RunDistributor(NServiceBus.Configure,System.Boolean)">
      <summary>
            Configure the distributor to run on this endpoint
            </summary>
      <param name="config">
      </param>
      <param name="withWorker">True if this endpoint should enlist as a worker</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureDistributor.RunDistributorWithNoWorkerOnItsEndpoint(NServiceBus.Configure)">
      <summary>
            Starting the Distributor without a worker running on its endpoint
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureDistributor.EnlistWithDistributor(NServiceBus.Configure)">
      <summary>
            Enlist Worker with Master node defined in the config.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureFaultsForwarder">
      <summary>
            Contains extension methods to NServiceBus.Configure
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureFaultsForwarder.MessageForwardingInCaseOfFault(NServiceBus.Configure)">
      <summary>
            Forward messages that have repeatedly failed to another endpoint.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.ConfigureFaultsForwarder.ErrorQueue">
      <summary>
            The queue to which to forward errors.
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureFileShareDataBus">
      <summary>
            Contains extension methods to NServiceBus.Configure for the file share data bus
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureFileShareDataBus.FileShareDataBus(NServiceBus.Configure,System.String)">
      <summary>
            Use the file-based databus implementation with the default binary serializer.
            </summary>
      <param name="config">The configuration.</param>
      <param name="basePath">The location to which to write serialized properties for the databus.</param>
      <returns>The configuration.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureGateway.DisableGateway(NServiceBus.Configure)">
      <summary>
            The Gateway is turned on by default for the Master role. Call DisableGateway method to turn the Gateway off.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureGateway.RunGateway(NServiceBus.Configure)">
      <summary>
            Configuring to run the Gateway. By default Gateway will use RavenPersistence (see GatewayDefaults class).
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureGateway.UseInMemoryGatewayPersister(NServiceBus.Configure)">
      <summary>
            Use the in memory messages persistence by the gateway.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureGateway.UseRavenGatewayPersister(NServiceBus.Configure)">
      <summary>
            Use RavenDB messages persistence by the gateway.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureImpersonation">
      <summary>
            Contains extension methods for the purpose of configuring impersonation.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureImpersonation.ImpersonateSender(NServiceBus.Unicast.Config.ConfigUnicastBus,System.Boolean)">
      <summary>
            Instructs the bus to run the processing of messages being handled
            under the permissions of the sender of the message.
            </summary>
      <param name="config">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureImpersonation.RunHandlersUnderIncomingPrincipal(NServiceBus.Unicast.Config.ConfigUnicastBus,System.Boolean)">
      <summary>
            Instructs the bus to run the processing of messages being handled under the incoming user principal, by default this is a <see cref="T:System.Security.Principal.GenericPrincipal" /> created from the <see cref="F:NServiceBus.Headers.WindowsIdentityName" />.
            </summary>
      <param name="config">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureInMemoryFaultManagement">
      <summary>
            Contains extension methods to NServiceBus.Configure
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureInMemoryFaultManagement.InMemoryFaultManagement(NServiceBus.Configure)">
      <summary>
            Use in-memory fault management.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.DataBus.IDataBus">
      <summary>
            The main interface for interactions with the databus.
            </summary>
    </member>
    <member name="M:NServiceBus.DataBus.IDataBus.Get(System.String)">
      <summary>
            Gets a data item from the bus.
            </summary>
      <param name="key">The key to look for.</param>
      <returns>The data <see cref="T:System.IO.Stream" />.</returns>
    </member>
    <member name="M:NServiceBus.DataBus.IDataBus.Put(System.IO.Stream,System.TimeSpan)">
      <summary>
            Adds a data item to the bus and returns the assigned key.
            </summary>
      <param name="stream">A create containing the data to be sent on the databus.</param>
      <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default.</param>
    </member>
    <member name="M:NServiceBus.DataBus.IDataBus.Start">
      <summary>
            Called when the bus starts up to allow the data bus to active background tasks.
            </summary>
    </member>
    <member name="T:NServiceBus.DataBus.InMemory.InMemoryDataBus">
      <summary>
            In memory implementation of <see cref="T:NServiceBus.DataBus.IDataBus" />.
            </summary>
    </member>
    <member name="M:NServiceBus.DataBus.InMemory.InMemoryDataBus.Get(System.String)">
      <summary>
            Gets a data item from the bus.
            </summary>
      <param name="key">The key to look for.</param>
      <returns>The data <see cref="T:System.IO.Stream" />.</returns>
    </member>
    <member name="M:NServiceBus.DataBus.InMemory.InMemoryDataBus.Put(System.IO.Stream,System.TimeSpan)">
      <summary>
            Adds a data item to the bus and returns the assigned key.
            </summary>
      <param name="stream">A create containing the data to be sent on the databus.</param>
      <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default.</param>
    </member>
    <member name="M:NServiceBus.DataBus.InMemory.InMemoryDataBus.Start">
      <summary>
            Called when the bus starts up to allow the data bus to active background tasks.
            </summary>
    </member>
    <member name="T:NServiceBus.Features.FeatureSettings">
      <summary>
            Settings for the various features
            </summary>
    </member>
    <member name="M:NServiceBus.Features.FeatureSettings.Enable``1">
      <summary>
            Enables the given feature
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Features.FeatureSettings.Disable``1">
      <summary>
            Disables the given feature
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.IFinalizeConfiguration">
      <summary>
            Interface used to finalize configuration. This is the final point where the container can be altered.
            </summary>
    </member>
    <member name="M:NServiceBus.Config.IFinalizeConfiguration.FinalizeConfiguration">
      <summary>
            Invoked by the framework when the configuration is to be finalized
            </summary>
    </member>
    <member name="T:NServiceBus.IWantToRunBeforeConfigurationIsFinalized">
      <summary>
            Indicates that this class contains logic that needs to run just before
            configuration is finalized
            </summary>
    </member>
    <member name="M:NServiceBus.IWantToRunBeforeConfigurationIsFinalized.Run">
      <summary>
            Invoked before configuration is finalized and locked
            </summary>
    </member>
    <member name="M:NServiceBus.Features.FeatureInitializer.Run">
      <summary>
            Go trough all conditional features and figure out if the should be enabled or not
            </summary>
    </member>
    <member name="T:NServiceBus.IWantToRunBeforeConfiguration">
      <summary>
            Indicates that this class contains logic that need to be executed before other configuration
            </summary>
    </member>
    <member name="M:NServiceBus.IWantToRunBeforeConfiguration.Init">
      <summary>
            Invoked before configuration starts
            </summary>
    </member>
    <member name="M:NServiceBus.BinarySerializerConfigurationExtensions.Binary(NServiceBus.Settings.SerializationSettings)">
      <summary>
            Enables the binary message serializer
            </summary>
      <param name="settings">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.JsonSerializerConfigurationExtensions.Json(NServiceBus.Settings.SerializationSettings)">
      <summary>
            Enables the json message serializer
            </summary>
      <param name="settings">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.JsonSerializerConfigurationExtensions.Bson(NServiceBus.Settings.SerializationSettings)">
      <summary>
            Enables the bson message serializer
            </summary>
      <param name="settings">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Features.FeatureCategory.GetFeaturesToInitialize">
      <summary>
            Returns the list of features in the category that should be used
            </summary>
    </member>
    <member name="P:NServiceBus.Features.FeatureCategory.Name">
      <summary>
            Feature name.
            </summary>
    </member>
    <member name="T:NServiceBus.Features.Categories.Serializers">
      <summary>
            Category for all serializers
            </summary>
    </member>
    <member name="T:NServiceBus.Serializers.XML.Config.XmlSerializationSettings">
      <summary>
            Settings for the xml message serializer
            </summary>
    </member>
    <member name="M:NServiceBus.Serializers.XML.Config.XmlSerializationSettings.Namespace(System.String)">
      <summary>
            Configures the serializer to use a custom namespace. (http://tempuri.net) is the default
            </summary>
      <param name="namespaceToUse">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Serializers.XML.Config.XmlSerializationSettings.SanitizeInput">
      <summary>
            Tells the serializer to sanatize the input data from illegal characters
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.XmlSerializerConfigurationExtensions.Xml(NServiceBus.Settings.SerializationSettings,System.Action{NServiceBus.Serializers.XML.Config.XmlSerializationSettings})">
      <summary>
            Enables the xml message serializer with the geiven settings
            </summary>
      <param name="settings">
      </param>
      <param name="customSettings">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Settings.SerializationSettings">
      <summary>
            Settings related to message serialization
            </summary>
    </member>
    <member name="M:NServiceBus.Settings.SerializationSettings.WrapSingleMessages">
      <summary>
            Tells the framework to always wrap out going messages as if there was multiple messages beeing sent
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Settings.SerializationSettings.DontWrapSingleMessages">
      <summary>
            Tells the framework to not wrap out going messages as if there was multiple messages beeing sent
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.MessageMutator.IMutateOutgoingTransportMessages">
      <summary>
            Mutates transport messages before they are sent.
            Implementors are invoked after the logical messages have been serialized.
            </summary>
    </member>
    <member name="M:NServiceBus.MessageMutator.IMutateOutgoingTransportMessages.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
      <summary>
            Modifies various properties of the transport message.
            </summary>
      <param name="messages">
      </param>
      <param name="transportMessage">
      </param>
    </member>
    <member name="T:NServiceBus.Settings.ScaleOutSettings">
      <summary>
            Placeholder for the various settings related to how a endpoint is scaled out
            </summary>
    </member>
    <member name="M:NServiceBus.Settings.ScaleOutSettings.UseSingleBrokerQueue">
      <summary>
            Instructs the broker based transports to use a single queue for the endpoint regardless of which machine its running on. 
            This is suitable for backend processing endpoints and is the default for the As_aServer role.
            Clients that needs to make use of callbacks needs to make sure that this setting is off since they need to have a unique 
            inout queue per machine in order to not miss any of the callbacks.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Settings.ScaleOutSettings.UseUniqueBrokerQueuePerMachine">
      <summary>
            Instructs the broker based transports to use a separate queue per endpoint when running on multiple machines. 
            This allows clients to make use of callbacks. This setting is the default.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Transports.IConfigureTransport">
      <summary>
            Configures the given transport using the default settings
            </summary>
    </member>
    <member name="T:NServiceBus.Transports.IConfigureTransport`1">
      <summary>
            The generic counterpart to IConfigureTransports
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.Gateway.DefaultInputAddress">
      <summary>
            Sets the default input address for the gateway
            </summary>
    </member>
    <member name="T:NServiceBus.Hosting.Profiles.IHandleProfile">
      <summary>
            Abstraction for code which will be called when the given profile is active.
            Implementors should implement IHandleProfile{T} rather than IHandleProfile.
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Profiles.IHandleProfile.ProfileActivated">
      <summary>
            Called when a given profile is activated.
            </summary>
    </member>
    <member name="T:NServiceBus.Hosting.Profiles.IHandleProfile`1">
      <summary>
            Generic abstraction for code which will be called when the given profile is active.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.IWantTheListOfActiveProfiles">
      <summary>
            Implementors will recieve the list of active Profiles from the <see cref="T:NServiceBus.Hosting.Profiles.ProfileManager" />. 
            Implementors must implement <see cref="T:NServiceBus.Hosting.Profiles.IHandleProfile" />.
            </summary>
    </member>
    <member name="P:NServiceBus.IWantTheListOfActiveProfiles.ActiveProfiles">
      <summary>
            ActiveProfiles list will be set by the infrastructure.
            </summary>
    </member>
    <member name="T:NServiceBus.Hosting.Profiles.IHandleAnyProfile">
      <summary>
            Abstraction for code that will be called that will take dependent action based upon
            the Profile(s) that are active. Useful for implementing special functionality if
            a specific profile is activated, and implementing default functionality otherwise.
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureInMemorySagaPersister">
      <summary>
            Contains extension methods to NServiceBus.Configure for the in memory saga persister.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureInMemorySagaPersister.InMemorySagaPersister(NServiceBus.Configure)">
      <summary>
            Use the in memory saga persister implementation.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureInMemorySubscriptionStorage">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureInMemorySubscriptionStorage.InMemorySubscriptionStorage(NServiceBus.Configure)">
      <summary>
            Stores subscription data in memory.
            This storage are for development scenarios only
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureLicenseExtensions">
      <summary>
            Contains extension methods to configure license.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureLicenseExtensions.License(NServiceBus.Configure,System.String)">
      <summary>
            Allows user to specify the license string.
            </summary>
      <param name="config">The current <see cref="T:NServiceBus.Configure" />.</param>
      <param name="licenseText">The license text.</param>
      <returns>The current <see cref="T:NServiceBus.Configure" />.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureLicenseExtensions.LicensePath(NServiceBus.Configure,System.String)">
      <summary>
            Allows user to specify the path for the license file.
            </summary>
      <param name="config">The current <see cref="T:NServiceBus.Configure" />.</param>
      <param name="licenseFile">A relative or absolute path to the license file.</param>
      <returns>The current <see cref="T:NServiceBus.Configure" />.</returns>
    </member>
    <member name="T:NServiceBus.Settings.TransportSettings">
      <summary>
            Placeholder for the various extensions. Transports will add extension methods to this class.
            </summary>
    </member>
    <member name="T:NServiceBus.Features.TimeoutManager">
      <summary>
            This feature provides message deferral based on a external timeout manager.
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureMsmqMessageQueue">
      <summary>
            Configuration class for MSMQ transport.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureMsmqMessageQueue.MsmqTransport(NServiceBus.Configure)">
      <summary>
            Use MSMQ for your queuing infrastructure.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureMsmqSubscriptionStorage">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureMsmqSubscriptionStorage.MsmqSubscriptionStorage(NServiceBus.Configure)">
      <summary>
            Stores subscription data using MSMQ.
            If multiple machines need to share the same list of subscribers,
            you should not choose this option - prefer the DbSubscriptionStorage
            in that case.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureMsmqSubscriptionStorage.MsmqSubscriptionStorage(NServiceBus.Configure,System.String)">
      <summary>
            Stores subscription data using MSMQ.
            If multiple machines need to share the same list of subscribers,
            you should not choose this option - prefer the DbSubscriptionStorage
            in that case.
            </summary>
      <param name="config">
      </param>
      <param name="endpointName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.ConfigureMsmqSubscriptionStorage.Queue">
      <summary>
            Queue used to store subscriptions.
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureQueueCreation">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureQueueCreation.DoNotCreateQueues(NServiceBus.Configure)">
      <summary>
            If queues configured do not exist, will cause them not to be created on startup.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigurePurging">
      <summary>
            Configures purging
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigurePurging.PurgeOnStartup(NServiceBus.Configure,System.Boolean)">
      <summary>
            Requests that the incoming queue be purged of all messages when the bus is started.
            All messages in this queue will be deleted if this is true.
            Setting this to true may make sense for certain smart-client applications, 
            but rarely for server applications.
            </summary>
      <param name="config">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.ConfigurePurging.PurgeRequested">
      <summary>
            True if the users wants the input queue to be purged when we starts up
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureRavenPersistence">
      <summary>
            Extension methods to configure RavenDB persister.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistence(NServiceBus.Configure)">
      <summary>
            Configures RavenDB as the default persistence.
            </summary>
      <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
      <example>
            An example that shows the configuration:
            <code lang="XML" escaped="true"><connectionStrings><!-- Default connection string name --><add name="NServiceBus/Persistence" connectionString="Url=http://localhost:8080" /></connectionStrings></code></example>
      <param name="config">The configuration object.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistence(NServiceBus.Configure,System.String)">
      <summary>
            Configures RavenDB as the default persistence.
            </summary>
      <param name="config">The configuration object.</param>
      <param name="connectionStringName">The connectionstring name to use to retrieve the connectionstring from.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistence(NServiceBus.Configure,System.String,System.String)">
      <summary>
            Configures RavenDB as the default persistence.
            </summary>
      <param name="config">The configuration object.</param>
      <param name="connectionStringName">The connectionstring name to use to retrieve the connectionstring from.</param>
      <param name="database">The database name to use.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistence(NServiceBus.Configure,System.Func{System.String})">
      <summary>
            Configures RavenDB as the default persistence.
            </summary>
      <param name="config">The configuration object.</param>
      <param name="getConnectionString">Specifies a callback to call to retrieve the connectionstring to use.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistence(NServiceBus.Configure,System.Func{System.String},System.String)">
      <summary>
            Configures RavenDB as the default persistence.
            </summary>
      <param name="config">The configuration object.</param>
      <param name="getConnectionString">Specifies a callback to call to retrieve the connectionstring to use.</param>
      <param name="database">The database name to use.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistenceWithStore(NServiceBus.Configure,Raven.Client.IDocumentStore)">
      <summary>
            Configures RavenDB as the default persistence.
            </summary>
      <remarks>This method does not use any of the NServiceBus conventions either specified or out of the box.</remarks>
      <param name="config">The configuration object.</param>
      <param name="documentStore">An <see cref="T:Raven.Client.IDocumentStore" />.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureRavenPersistence.CustomiseRavenPersistence(NServiceBus.Configure,System.Action{Raven.Client.IDocumentStore})">
      <summary>
            The <paramref name="callback" /> is called for further customising the <see cref="T:Raven.Client.IDocumentStore" />.
            </summary>
      <param name="config">The configuration object.</param>
      <param name="callback">This callback allows to further customise/override default settings.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureRavenPersistence.MessageToDatabaseMappingConvention(NServiceBus.Configure,System.Func{NServiceBus.IMessageContext,System.String})">
      <summary>
            Specifies the mapping to use for when resolving the database name to use for each message.
            </summary>
      <param name="config">The configuration object.</param>
      <param name="convention">The method referenced by a Func delegate for finding the database name for the specified message.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="T:NServiceBus.ConfigureRijndaelEncryptionService">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureRijndaelEncryptionService.RijndaelEncryptionService(NServiceBus.Configure)">
      <summary>
            Use 256 bit AES encryption based on the Rijndael cipher. 
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureSagas">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureSagas.Sagas(NServiceBus.Configure)">
      <summary>
            Configure this endpoint to support sagas.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureTimeoutManager.UseInMemoryTimeoutPersister(NServiceBus.Configure)">
      <summary>
            Use the in memory timeout persister implementation.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureTimeoutManager.UseRavenTimeoutPersister(NServiceBus.Configure)">
      <summary>
            Use the Raven timeout persister implementation.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureTimeoutManager.DisableTimeoutManager(NServiceBus.Configure)">
      <summary>
            As Timeout manager is turned on by default for server roles, use DisableTimeoutManager method to turn off Timeout manager
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureTimeoutManager.RunTimeoutManagerWithInMemoryPersistence(NServiceBus.Configure)">
      <summary>
            Sets the default persistence to InMemory.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureTimeoutManager.DefaultToInMemoryTimeoutPersistence(NServiceBus.Configure)">
      <summary>
            Sets the default persistence to InMemory.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureUnicastBus">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureUnicastBus.UnicastBus(NServiceBus.Configure)">
      <summary>
            Use unicast messaging (your best option on nServiceBus right now).
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureUnicastBus.GetTimeoutManagerAddress(NServiceBus.Configure)">
      <summary>
            Return Timeout Manager Address. Uses "TimeoutManagerAddress" parameter form config file if defined, if not, uses "EndpointName.Timeouts".
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureXmlSerializer">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureXmlSerializer.XmlSerializer(NServiceBus.Configure,System.String,System.Boolean)">
      <summary>
            Use XML serialization that supports interface-based messages.
            Optionally set the namespace to be used in the XML.
            </summary>
      <param name="config">
      </param>
      <param name="nameSpace">The namespace to use</param>
      <param name="sanitizeInput">Sanatizes the xml input if set to true</param>
      <param name="dontWrapSingleMessages">Tells the serializer to not wrap single messages with a "messages" element. This will break compatibility with endpoints older thatn 3.4.0 </param>
      <param name="dontWrapRawXml">Tells the serializer to not wrap properties which have either XDocument or XElement with a "PropertyName" element.
            By default the xml serializer serializes the following message
            <code>
            interface MyMessage { XDocument Property { get; set; } }
            </code>
            into the following structure
            <code><MyMessage><Property>
                  ... Content of the XDocument
                </Property></MyMessage></code>
            This flag allows to omit the property tag wrapping. Which results to
            <code><MyMessage>
                  ... Content of the XDocument
            </MyMessage></code>
            When this feature is enable the root element of the XDocument must match the name of the property. The following would not work and lead to deserialization error:
            <code><MyMessage><Root>
                    ...
                  </Root></MyMessage></code></param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.AddressInitializer">
      <summary>
            Initializes the local address
            </summary>
    </member>
    <member name="M:NServiceBus.Config.AddressInitializer.Init">
      <summary>
            Initialize the local address
            </summary>
    </member>
    <member name="T:NServiceBus.Config.Advanced.ConfigureSettingLocalAddressNameAction">
      <summary>
            Allow overriding local address name.
            </summary>
    </member>
    <member name="M:NServiceBus.Config.Advanced.ConfigureSettingLocalAddressNameAction.DefineLocalAddressNameFunc(NServiceBus.Configure,System.Func{System.String})">
      <summary>
            Set a function that overrides the default naming of NServiceBus local addresses.
            See: <a href="http://particular.net/articles/how-to-specify-your-input-queue-name">Here</a> for more details.
            </summary>
      <param name="config">
      </param>
      <param name="setLocalAddressNameFunc">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureSettingLocalAddressNameAction">
      <summary>
            Allow overriding local address name.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureSettingLocalAddressNameAction.DefineLocalAddressNameFunc(NServiceBus.Configure,System.Func{System.String})">
      <summary>
            Set a function that overrides the default naming of NServiceBus local addresses.
            See: <a href="http://particular.net/articles/how-to-specify-your-input-queue-name">Here</a> for more details.
            </summary>
      <param name="config">
      </param>
      <param name="setLocalAddressNameFunc">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureSettingLocalAddressNameAction.GetLocalAddressName">
      <summary>
            Execute function that returns the NServiceBus local addresses name. If not override by the user, NServiceBus defaults will be used.
            See: <a href="http://particular.net/articles/how-to-specify-your-input-queue-name">Here</a> for more details.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.ConfigurationSource.IConfigurationSource">
      <summary>
            Abstraction of a source of configuration data.
            Implement this interface if you want to change the source of all configuration data.
            If you want to change the source of only a specific set of configuration data,
            implement <see cref="T:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1" /> instead.
            </summary>
    </member>
    <member name="M:NServiceBus.Config.ConfigurationSource.IConfigurationSource.GetConfiguration``1">
      <summary>
            Returns configuration data based on the given type.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.ConfigurationSource.DefaultConfigurationSource">
      <summary>
            A configuration source implementation on top of ConfigurationManager.
            </summary>
    </member>
    <member name="T:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1">
      <summary>
            Abstraction of a configuration source for a given piece of configuration data. 
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1.GetConfiguration">
      <summary>
            Returns configuration data for the given type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.Conventions.EndpointHelper">
      <summary>
            The default name for a endpoint
            </summary>
    </member>
    <member name="M:NServiceBus.Config.Conventions.EndpointHelper.GetDefaultEndpointName">
      <summary>
            Gets the name of this endpoint
            </summary>
      <returns>The name of the endpoint.</returns>
    </member>
    <member name="M:NServiceBus.Config.Conventions.EndpointHelper.GetEndpointVersion">
      <summary>
            Gets the version of the endpoint.
            </summary>
      <returns>The <see cref="T:System.Version" /> the endpoint.</returns>
    </member>
    <member name="P:NServiceBus.Config.Conventions.EndpointHelper.StackTraceToExamine">
      <summary>
            If set this will be used to figure out what to name the endpoint and select the version.
            </summary>
    </member>
    <member name="T:NServiceBus.Config.Conventions.SystemMessageConventions">
      <summary>
            Define system message convention
            </summary>
    </member>
    <member name="M:NServiceBus.Config.Conventions.SystemMessageConventions.AddSystemMessagesAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
      <summary>
            Add system messages convention
            </summary>
      <param name="config">
      </param>
      <param name="definesMessageType">
      </param>
    </member>
    <member name="T:NServiceBus.SystemMessageConventions">
      <summary>
            Define system message convention
            </summary>
    </member>
    <member name="M:NServiceBus.SystemMessageConventions.AddSystemMessagesAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
      <summary>
            Add system messages convention
            </summary>
      <param name="config">
      </param>
      <param name="definesMessageType">
      </param>
    </member>
    <member name="T:NServiceBus.ConfigureExtensions">
      <summary>
                Configure Extensions.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureExtensions.SendOnly(NServiceBus.Configure)">
      <summary>
                Configures this endpoint as a send only endpoint.
            </summary>
      <remarks>
                Use this in endpoints whose only purpose is sending messages, websites are often a good example of send only endpoints.
            </remarks>
    </member>
    <member name="P:NServiceBus.Config.FtpQueueConfig.SendDirectory">
      <summary>
            The temp directory where files will be place before sending
            </summary>
    </member>
    <member name="P:NServiceBus.Config.FtpQueueConfig.ReceiveDirectory">
      <summary>
            The temp directory where files will be watched for when they 
            come through FTP
            </summary>
    </member>
    <member name="P:NServiceBus.Config.FtpQueueConfig.UserName">
      <summary>
            The user name to use when making FTP connections
            </summary>
    </member>
    <member name="P:NServiceBus.Config.FtpQueueConfig.Password">
      <summary>
            The password to use when making FTP connections
            </summary>
    </member>
    <member name="T:NServiceBus.Config.GatewayConfig">
      <summary>
            Config section for the gateway
            </summary>
    </member>
    <member name="P:NServiceBus.Config.GatewayConfig.Sites">
      <summary>
            Collection of sites
            </summary>
    </member>
    <member name="P:NServiceBus.Config.GatewayConfig.Channels">
      <summary>
            Collection of channels
            </summary>
    </member>
    <member name="M:NServiceBus.Config.ChannelCollection.CreateNewElement">
      <summary>
            Creates a new empty property
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.ChannelCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>
            Returns the key for the given element
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.ChannelCollection.Add(NServiceBus.Config.ChannelConfig)">
      <summary>
            Calls BaseAdd.
            </summary>
      <param name="channel">
      </param>
    </member>
    <member name="M:NServiceBus.Config.ChannelCollection.BaseAdd(System.Configuration.ConfigurationElement)">
      <summary>
            Calls BaseAdd with true as the additional parameter.
            </summary>
      <param name="element">
      </param>
    </member>
    <member name="P:NServiceBus.Config.ChannelConfig.Default">
      <summary>
            True if this channel is the default channel
            </summary>
    </member>
    <member name="P:NServiceBus.Config.ChannelConfig.Address">
      <summary>
            The Address that the channel is listening on
            </summary>
    </member>
    <member name="P:NServiceBus.Config.ChannelConfig.NumberOfWorkerThreads">
      <summary>
            The number of worker threads that will be used for this channel
            </summary>
    </member>
    <member name="P:NServiceBus.Config.ChannelConfig.ChannelType">
      <summary>
            The ChannelType
            </summary>
    </member>
    <member name="T:NServiceBus.Config.SiteCollection">
      <summary>
            Collection of sites
            </summary>
    </member>
    <member name="M:NServiceBus.Config.SiteCollection.CreateNewElement">
      <summary>
            Creates a new empty property
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.SiteCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>
            Returns the key for the given element
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.SiteCollection.Add(NServiceBus.Config.SiteConfig)">
      <summary>
            Calls BaseAdd.
            </summary>
      <param name="mapping">
      </param>
    </member>
    <member name="M:NServiceBus.Config.SiteCollection.BaseAdd(System.Configuration.ConfigurationElement)">
      <summary>
            Calls BaseAdd with true as the additional parameter.
            </summary>
      <param name="element">
      </param>
    </member>
    <member name="T:NServiceBus.Config.SiteConfig">
      <summary>
            A site property
            </summary>
    </member>
    <member name="P:NServiceBus.Config.SiteConfig.Key">
      <summary>
            The key
            </summary>
    </member>
    <member name="P:NServiceBus.Config.SiteConfig.Address">
      <summary>
            The Address of this site
            </summary>
    </member>
    <member name="P:NServiceBus.Config.SiteConfig.ChannelType">
      <summary>
            The ChannelType of this site
            </summary>
    </member>
    <member name="T:NServiceBus.Config.INeedInitialization">
      <summary>
            Implementers will be called after NServiceBus.Configure.With completes and a container
            has been set. 
            </summary>
    </member>
    <member name="M:NServiceBus.Config.INeedInitialization.Init">
      <summary>
            Implementers will include custom initialization code here.
            </summary>
    </member>
    <member name="T:NServiceBus.Config.IWantToRunWhenConfigurationIsComplete">
      <summary>
            Implementors are invoked when configuration is complete.
            Implementors are resolved from the container so have access to full DI.
            </summary>
    </member>
    <member name="M:NServiceBus.Config.IWantToRunWhenConfigurationIsComplete.Run">
      <summary>
            Method invoked to run custom code.
            </summary>
    </member>
    <member name="T:NServiceBus.Config.Logging">
      <summary>
            Logging ConfigurationSection
            </summary>
    </member>
    <member name="P:NServiceBus.Config.Logging.Threshold">
      <summary>
            The minimal logging level above which all calls to the log will be written
            </summary>
    </member>
    <member name="T:NServiceBus.Config.MasterNodeConfig">
      <summary>
            Configuration section for holding the node which is the master.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MasterNodeConfig.Node">
      <summary>
            The node .
            </summary>
    </member>
    <member name="T:NServiceBus.Config.MessageEndpointMapping">
      <summary>
            A configuration element representing which message types map to which endpoint.
            </summary>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMapping.Configure(System.Action{System.Type,NServiceBus.Address})">
      <summary>
            Uses the configuration properties to configure the endpoint mapping
            </summary>
      <param name="mapTypeToEndpoint">
      </param>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMapping.Messages">
      <summary>
            A string defining the message assembly, or single message type.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMapping.Endpoint">
      <summary>
            The endpoint named according to "queue@machine".
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMapping.AssemblyName">
      <summary>
            The message assembly for the endpoint mapping.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMapping.TypeFullName">
      <summary>
            The fully qualified name of the message type. Define this if you want to map a single message type to the endpoint.
            </summary>
      <remarks>Type will take preference above namespace</remarks>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMapping.Namespace">
      <summary>
            The message type. Define this if you want to map all the types in the namespace to the endpoint.
            </summary>
      <remarks>Sub-namespaces will not be mapped.</remarks>
    </member>
    <member name="T:NServiceBus.Config.MessageEndpointMappingCollection">
      <summary>
            A configuration element collection of MessageEndpointMappings.
            </summary>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.CreateNewElement">
      <summary>
            Creates a new MessageEndpointMapping.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.CreateNewElement(System.String)">
      <summary>
            Creates a new MessageEndpointMapping, setting its Message property to the given name.
            </summary>
      <param name="elementName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>
            Returns the Messages property of the given MessageEndpointMapping element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.IndexOf(NServiceBus.Config.MessageEndpointMapping)">
      <summary>
            Calls BaseIndexOf on the given mapping.
            </summary>
      <param name="mapping">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Add(NServiceBus.Config.MessageEndpointMapping)">
      <summary>
            Calls BaseAdd.
            </summary>
      <param name="mapping">
      </param>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.BaseAdd(System.Configuration.ConfigurationElement)">
      <summary>
            Calls BaseAdd with true as the additional parameter.
            </summary>
      <param name="element">
      </param>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Remove(NServiceBus.Config.MessageEndpointMapping)">
      <summary>
            If the mapping exists, calls BaseRemove on it.
            </summary>
      <param name="mapping">
      </param>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.RemoveAt(System.Int32)">
      <summary>
            Calls BaseRemoveAt.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Remove(System.String)">
      <summary>
            Calls BaseRemove.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Clear">
      <summary>
            Calls BaseClear.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.CollectionType">
      <summary>
            Returns AddRemoveClearMap.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.AddElementName">
      <summary>
            Calls the base AddElementName.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.ClearElementName">
      <summary>
            Calls the base ClearElementName.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.RemoveElementName">
      <summary>
            Returns the base RemoveElementName.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Count">
      <summary>
            Returns the base Count.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Item(System.Int32)">
      <summary>
            Gets/sets the MessageEndpointMapping at the given index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Item(System.String)">
      <summary>
            Gets the MessageEndpointMapping for the given name.
            </summary>
      <param name="Name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.MessageForwardingInCaseOfFaultConfig">
      <summary>
            Message Forwarding In Case Of Fault Config
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageForwardingInCaseOfFaultConfig.ErrorQueue">
      <summary>
            The queue to which errors will be forwarded.
            </summary>
    </member>
    <member name="T:NServiceBus.Config.MsmqMessageQueueConfig">
      <summary>
            Contains the properties representing the MsmqMessageQueue configuration section.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqMessageQueueConfig.UseDeadLetterQueue">
      <summary>
             If true, then message-delivery failure should result in a copy of the message being sent to a dead-letter queue
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqMessageQueueConfig.UseJournalQueue">
      <summary>
             If true, require that a copy of a message be kept in the originating computer's machine journal after the message has been successfully transmitted (from the originating computer to the next server)
            </summary>
    </member>
    <member name="M:NServiceBus.Features.Sagas.FindAndConfigureSagasIn(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Scans for types relevant to the saga infrastructure.
            These include implementers of <see cref="T:NServiceBus.Saga.ISaga" /> and <see cref="T:NServiceBus.Saga.IFindSagas`1" />.
            </summary>
      <param name="types">
      </param>
    </member>
    <member name="M:NServiceBus.Features.Sagas.CreateAdditionalFindersAsNecessary">
      <summary>
            Creates an <see cref="T:NServiceBus.Sagas.Finders.NullSagaFinder`1" /> for each saga type that doesn't have a finder configured.
            </summary>
    </member>
    <member name="M:NServiceBus.Features.Sagas.GetSagaTypeToStartIfMessageNotFoundByFinder(System.Object,NServiceBus.Saga.IFinder)">
      <summary>
            Gets the saga type to instantiate and invoke if an existing saga couldn't be found by
            the given finder using the given message.
            </summary>
      <param name="message">
      </param>
      <param name="finder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Features.Sagas.GetSagaTypesForMessageType(System.Type)">
      <summary>
            Finds the types of sagas that can handle the given concrete message type.
            </summary>
      <param name="messageType">A concrete type for a message object</param>
      <returns>The list of saga types.</returns>
    </member>
    <member name="M:NServiceBus.Features.Sagas.GetSagaTypeForSagaEntityType(System.Type)">
      <summary>
            Returns the saga type configured for the given entity type.
            </summary>
      <param name="sagaEntityType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Features.Sagas.GetSagaEntityTypeForSagaType(System.Type)">
      <summary>
            Returns the entity type configured for the given saga type.
            </summary>
      <param name="sagaType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Features.Sagas.IsMessageTypeHandledBySaga(System.Type)">
      <summary>
            Indicates if a saga has been configured to handle the given message type.
            </summary>
      <param name="messageType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Features.Sagas.GetFindByMethodForFinder(NServiceBus.Saga.IFinder,System.Object)">
      <summary>
            Gets a reference to the generic "FindBy" method of the given finder
            for the given message type using a hashtable lookup rather than reflection.
            </summary>
      <param name="finder">
      </param>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Features.Sagas.GetFindersFor(System.Object)">
      <summary>
            Returns a list of finder object capable of using the given message.
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Features.Sagas.GetSagaDataTypes">
      <summary>
            Returns the list of saga types configured.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Satellites.ISatellite">
      <summary>
            Implement this interface to create a Satellite.
            </summary>
    </member>
    <member name="M:NServiceBus.Satellites.ISatellite.Handle(NServiceBus.TransportMessage)">
      <summary>
            This method is called when a message is available to be processed.
            </summary>
      <param name="message">The <see cref="T:NServiceBus.TransportMessage" /> received.</param>
    </member>
    <member name="M:NServiceBus.Satellites.ISatellite.Start">
      <summary>
            Starts the <see cref="T:NServiceBus.Satellites.ISatellite" />.
            </summary>
    </member>
    <member name="M:NServiceBus.Satellites.ISatellite.Stop">
      <summary>
            Stops the <see cref="T:NServiceBus.Satellites.ISatellite" />.
            </summary>
    </member>
    <member name="P:NServiceBus.Satellites.ISatellite.InputAddress">
      <summary>
            The <see cref="T:NServiceBus.Address" /> for this <see cref="T:NServiceBus.Satellites.ISatellite" /> to use when receiving messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Satellites.ISatellite.Disabled">
      <summary>
            Set to <code>true</code> to disable this <see cref="T:NServiceBus.Satellites.ISatellite" />.
            </summary>
    </member>
    <member name="T:NServiceBus.Satellites.IAdvancedSatellite">
      <summary>
            Interface for satellites that needs more control over how the receiver is beeing setup
            </summary>
    </member>
    <member name="M:NServiceBus.Satellites.IAdvancedSatellite.GetReceiverCustomization">
      <summary>
            Gets the customizations to apply to the receiver
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Settings.SettingsHolder">
      <summary>
            Setting container.
            </summary>
    </member>
    <member name="M:NServiceBus.Settings.SettingsHolder.Get``1(System.String)">
      <summary>
            Gets the setting value.
            </summary>
      <typeparam name="T">The value of the setting.</typeparam>
      <param name="key">The key of the setting to get.</param>
      <returns>The setting value.</returns>
    </member>
    <member name="M:NServiceBus.Settings.SettingsHolder.Get(System.String)">
      <summary>
            Gets the setting value.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Settings.SettingsHolder.Set(System.String,System.Object)">
      <summary>
            Sets the setting value.
            </summary>
      <param name="key">The key to use to store the setting.</param>
      <param name="value">The setting value.</param>
    </member>
    <member name="M:NServiceBus.Settings.SettingsHolder.Set``1(System.Object)">
      <summary>
            Sets the value
            </summary>
      <param name="key">The key to use to store the setting.</param>
      <param name="value">The setting value.</param>
    </member>
    <member name="M:NServiceBus.Settings.SettingsHolder.SetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
      <summary>
            Sets the value of the given property
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="property">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NServiceBus.Settings.SettingsHolder.SetPropertyDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
      <summary>
            Sets the default value of the given property
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="property">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NServiceBus.Settings.SettingsHolder.SetDefault``1(System.Object)">
      <summary>
            Sets the default setting value.
            </summary>
      <param name="key">The key to use to store the setting.</param>
      <param name="value">The setting value.</param>
    </member>
    <member name="M:NServiceBus.Settings.SettingsHolder.PreventChanges">
      <summary>
            Locks the settings to prevent further modifications
            </summary>
    </member>
    <member name="T:NServiceBus.Config.InfrastructureServices">
      <summary>
            Class used to control the various infrastructure services required by NServiceBus
            </summary>
    </member>
    <member name="M:NServiceBus.Config.InfrastructureServices.Enable``1">
      <summary>
            Enables the given infrastructure service by registering it in the container
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Config.InfrastructureServices.SetDefaultFor``1(System.Action)">
      <summary>
            Set the default for the infastructure service to the action passed in.
            If the service is enabled and no explict override is found this action will be used to configure the service.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="configAction">
      </param>
    </member>
    <member name="M:NServiceBus.Config.InfrastructureServices.SetDefaultFor``1(System.Type,NServiceBus.DependencyLifecycle)">
      <summary>
            Sets the default provider for the service to the give type. If the service is enabled the type will be registered
            in the container with the specified lifecycle
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="providerType">
      </param>
      <param name="dependencyLifecycle">
      </param>
    </member>
    <member name="M:NServiceBus.Config.InfrastructureServices.RegisterServiceFor``1(System.Action)">
      <summary>
             Register a explict service provider
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="configAction">
      </param>
    </member>
    <member name="M:NServiceBus.Config.InfrastructureServices.RegisterServiceFor``1(System.Type,NServiceBus.DependencyLifecycle)">
      <summary>
            Register a explict service provider
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="providerType">
      </param>
      <param name="dependencyLifecycle">
      </param>
    </member>
    <member name="M:NServiceBus.Config.InfrastructureServices.IsAvailable``1">
      <summary>
            Returns true if the requested service is available and can be enabled on demand
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.DisplayInfrastructureServicesStatus">
      <summary>
            Displays the current status for the infrastructure services
            </summary>
    </member>
    <member name="T:NServiceBus.Transports.ICreateQueues">
      <summary>
            Abstraction of the capability to create queues
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.ICreateQueues.CreateQueueIfNecessary(NServiceBus.Address,System.String)">
      <summary>
            Create a messages queue where its name is the address parameter, for the given account.
            </summary>
      <param name="address">
      </param>
      <param name="account">
      </param>
    </member>
    <member name="T:NServiceBus.Transports.IDeferMessages">
      <summary>
            Called when the bus wants to defer a message
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.IDeferMessages.Defer(NServiceBus.TransportMessage,System.DateTime,NServiceBus.Address)">
      <summary>
            Defers the given message that will be processed at the given time
            </summary>
      <param name="message">
      </param>
      <param name="processAt">
      </param>
      <param name="address">The endpoint of the endpoint who should get the message</param>
    </member>
    <member name="M:NServiceBus.Transports.IDeferMessages.ClearDeferredMessages(System.String,System.String)">
      <summary>
            Clears all timeouts for the given header
            </summary>
      <param name="headerKey">
      </param>
      <param name="headerValue">
      </param>
    </member>
    <member name="T:NServiceBus.Transports.IDequeueMessages">
      <summary>
            Interface to implement when developing custom dequeuing strategies.
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.IDequeueMessages.Init(NServiceBus.Address,NServiceBus.Unicast.Transport.TransactionSettings,System.Func{NServiceBus.TransportMessage,System.Boolean},System.Action{NServiceBus.TransportMessage,System.Exception})">
      <summary>
            Initializes the <see cref="T:NServiceBus.Transports.IDequeueMessages" />.
            </summary>
      <param name="address">The address to listen on.</param>
      <param name="transactionSettings">The <see cref="T:NServiceBus.Unicast.Transport.TransactionSettings" /> to be used by <see cref="T:NServiceBus.Transports.IDequeueMessages" />.</param>
      <param name="tryProcessMessage">Called when a message has been dequeued and is ready for processing.</param>
      <param name="endProcessMessage">Needs to be called by <see cref="T:NServiceBus.Transports.IDequeueMessages" /> after the message has been processed regardless if the outcome was successful or not.</param>
    </member>
    <member name="M:NServiceBus.Transports.IDequeueMessages.Start(System.Int32)">
      <summary>
            Starts the dequeuing of message using the specified <paramref name="maximumConcurrencyLevel" />.
            </summary>
      <param name="maximumConcurrencyLevel">Indicates the maximum concurrency level this <see cref="T:NServiceBus.Transports.IDequeueMessages" /> is able to support.</param>
    </member>
    <member name="M:NServiceBus.Transports.IDequeueMessages.Stop">
      <summary>
            Stops the dequeuing of messages.
            </summary>
    </member>
    <member name="T:NServiceBus.Transports.IPublishMessages">
      <summary>
            Requests a message to be published
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.IPublishMessages.Publish(NServiceBus.TransportMessage,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Publishes the given messages to all known subscribers
            </summary>
      <param name="message">
      </param>
      <param name="eventTypes">
      </param>
    </member>
    <member name="T:NServiceBus.Transports.ISendMessages">
      <summary>
            Abstraction of the capability to send messages.
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.ISendMessages.Send(NServiceBus.TransportMessage,NServiceBus.Address)">
      <summary>
            Sends the given <paramref name="message" /> to the <paramref name="address" />.
            </summary>
      <param name="message">
        <see cref="T:NServiceBus.TransportMessage" /> to send.</param>
      <param name="address">Destination <see cref="T:NServiceBus.Address" />.</param>
    </member>
    <member name="T:NServiceBus.Transports.TransportDefinition">
      <summary>
            Defines a transport that can be used by NServiceBus
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.TransportDefinition.HasNativePubSubSupport">
      <summary>
            Indicates that the transport is capable of supporting the publish and subscribe pattern natively
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.TransportDefinition.HasSupportForCentralizedPubSub">
      <summary>
            Indicates that the transport has a central store for subscriptions
            </summary>
    </member>
    <member name="T:NServiceBus.Msmq">
      <summary>
            Transport definition for MSMQ
            </summary>
    </member>
    <member name="T:NServiceBus.Transports.Msmq.Config.MsmqSettings">
      <summary>
            Runtime settings for the Msmq transport
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.Config.MsmqSettings.#ctor">
      <summary>
            Constructs the settings class with defaults
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseDeadLetterQueue">
      <summary>
            Determines if the dead letter queue should be used
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseJournalQueue">
      <summary>
            Determines if journaling should be activated
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseConnectionCache">
      <summary>
            Gets or sets a value that indicates whether a cache of connections will be maintained by the application.
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseTransactionalQueues">
      <summary>
            Detmines if the system uses transactional queues
            </summary>
    </member>
    <member name="T:NServiceBus.Transports.Msmq.HeaderInfo">
      <summary>
            Represents the structure of header information passed in a TransportMessage.
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.HeaderInfo.Key">
      <summary>
            The key used to lookup the value in the header collection.
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.HeaderInfo.Value">
      <summary>
            The value stored under the key in the header collection.
            </summary>
    </member>
    <member name="T:NServiceBus.Transports.Msmq.MsmqDequeueStrategy">
      <summary>
                Default implementation of <see cref="T:NServiceBus.Transports.IDequeueMessages" /> for MSMQ.
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Init(NServiceBus.Address,NServiceBus.Unicast.Transport.TransactionSettings,System.Func{NServiceBus.TransportMessage,System.Boolean},System.Action{NServiceBus.TransportMessage,System.Exception})">
      <summary>
            Initializes the <see cref="T:NServiceBus.Transports.IDequeueMessages" />.
            </summary>
      <param name="address">The address to listen on.</param>
      <param name="settings">The <see cref="T:NServiceBus.Unicast.Transport.TransactionSettings" /> to be used by <see cref="T:NServiceBus.Transports.IDequeueMessages" />.</param>
      <param name="tryProcessMessage">Called when a message has been dequeued and is ready for processing.</param>
      <param name="endProcessMessage">Needs to be called by <see cref="T:NServiceBus.Transports.IDequeueMessages" /> after the message has been processed regardless if the outcome was successful or not.</param>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Start(System.Int32)">
      <summary>
                Starts the dequeuing of message using the specified <paramref name="maximumConcurrencyLevel" />.
            </summary>
      <param name="maximumConcurrencyLevel">The maximum concurrency level supported.</param>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Stop">
      <summary>
                Stops the dequeuing of messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.PurgeOnStartup">
      <summary>
                Purges the queue on startup.
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.UnitOfWork">
      <summary>
            Msmq unit of work to be used in non DTC mode <see cref="T:NServiceBus.Transports.Msmq.MsmqUnitOfWork" />.
            </summary>
    </member>
    <member name="T:NServiceBus.Transports.Msmq.MsmqMessageSender">
      <summary>
                Msmq implementation of <see cref="T:NServiceBus.Transports.ISendMessages" />.
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqMessageSender.Send(NServiceBus.TransportMessage,NServiceBus.Address)">
      <summary>
                Sends the given <paramref name="message" /> to the <paramref name="address" />.
            </summary>
      <param name="message">
        <see cref="T:NServiceBus.TransportMessage" /> to send.
            </param>
      <param name="address">
                Destination <see cref="T:NServiceBus.Address" />.
            </param>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.MsmqMessageSender.Settings">
      <summary>
                The current runtime settings for the transport
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.MsmqMessageSender.UnitOfWork">
      <summary>
            Msmq unit of work to be used in non DTC mode <see cref="T:NServiceBus.Transports.Msmq.MsmqUnitOfWork" />.
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqQueueCreator.CreateQueueIfNecessary(NServiceBus.Address,System.String)">
      <summary>
             Utility method for creating a queue if it does not exist.
            </summary>
      <param name="address">Queue path to create</param>
      <param name="account">The account to be given permissions to the queue</param>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqQueueCreator.CreateQueue(System.String,System.String,System.Boolean)">
      <summary>
             Create named message queue
            </summary>
      <param name="queueName">Queue path</param>
      <param name="account">The account to be given permissions to the queue</param>
      <param name="transactional">If volatileQueues is true then create a non-transactional message queue</param>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqQueueCreator.SetPermissionsForQueue(System.String,System.String)">
      <summary>
            Sets default permissions for queue.
            </summary>
      <param name="queue">
      </param>
      <param name="account">
      </param>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqQueueCreator.GetFullPathWithoutPrefix(NServiceBus.Address)">
      <summary>
            Returns the full path without Format or direct os
            from an address.
            </summary>
      <param name="address">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.MsmqQueueCreator.Settings">
      <summary>
            The current runtime settings
            </summary>
    </member>
    <member name="T:NServiceBus.Transports.Msmq.MsmqUtilities">
      <summary>
             MSMQ-related utility functions
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.GetFullPath(NServiceBus.Address)">
      <summary>
            Turns a '@' separated value into a full path.
            Format is 'queue@machine', or 'queue@ipaddress'
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.GetReturnAddress(System.String,System.String)">
      <summary>
            Gets the name of the return address from the provided value.
            If the target includes a machine name, uses the local machine name in the returned value
            otherwise uses the local IP address in the returned value.
            </summary>
      <param name="value">
      </param>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.GetReturnAddress(NServiceBus.Address,NServiceBus.Address)">
      <summary>
            Gets the name of the return address from the provided value.
            If the target includes a machine name, uses the local machine name in the returned value
            otherwise uses the local IP address in the returned value.
            </summary>
      <param name="value">
      </param>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.GetIndependentAddressForQueue(System.Messaging.MessageQueue)">
      <summary>
            Gets an independent address for the queue in the form:
            queue@machine.
            </summary>
      <param name="q">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.Convert(System.Messaging.Message)">
      <summary>
            Converts an MSMQ message to a TransportMessage.
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.Convert(NServiceBus.TransportMessage)">
      <summary>
            Converts a TransportMessage to an Msmq message.
            Doesn't set the ResponseQueue of the result.
            </summary>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.MsmqSubscriptionStorageConfig">
      <summary>
            Contains the properties representing the MsmqSubscriptionStorage configuration section.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqSubscriptionStorageConfig.Queue">
      <summary>
            The queue where subscription data will be stored.
            Use the "queue@machine" convention.
            </summary>
    </member>
    <member name="T:NServiceBus.Config.MsmqTransportConfig">
      <summary>
            Contains the properties representing the MsmqTransport configuration section.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqTransportConfig.InputQueue">
      <summary>
            The queue to receive messages from in the format
            "queue@machine".
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqTransportConfig.ErrorQueue">
      <summary>
            The queue to which to forward messages that could not be processed
            in the format "queue@machine".
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqTransportConfig.NumberOfWorkerThreads">
      <summary>
            The number of worker threads that can process messages in parallel.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqTransportConfig.MaxRetries">
      <summary>
            The maximum number of times to retry processing a message
            when it fails before moving it to the error queue.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.RijndaelEncryptionServiceConfig.Key">
      <summary>
            The encryption key.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.TransportConfig.MaximumConcurrencyLevel">
      <summary>
            Specifies the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport" /> is able to support.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.TransportConfig.MaxRetries">
      <summary>
            The maximum number of times to retry processing a message
            when it fails before moving it to the error queue.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.TransportConfig.MaximumMessageThroughputPerSecond">
      <summary>
            The max throughput for the transport. This allows the user to throttle their endpoint if needed
            </summary>
    </member>
    <member name="T:NServiceBus.Config.UnicastBusConfig">
      <summary>
            A configuration section for UnicastBus specific settings.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.DistributorControlAddress">
      <summary>
            Gets/sets the address for sending control messages to the distributor.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.DistributorDataAddress">
      <summary>
            Gets/sets the distributor's data address - used as the return address of messages sent by this endpoint.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.ForwardReceivedMessagesTo">
      <summary>
            Gets/sets the address to which messages received will be forwarded.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.TimeToBeReceivedOnForwardedMessages">
      <summary>
            Gets/sets the time to be received set on forwarded messages
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.TimeoutManagerAddress">
      <summary>
            Gets/sets the address that the timeout manager will use to send and receive messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.MessageEndpointMappings">
      <summary>
            Contains the mappings from message types (or groups of them) to endpoints.
            </summary>
    </member>
    <member name="T:NServiceBus.DataBus.IDataBusSerializer">
      <summary>
            Interface used for serializing and deserializing of databus properties.
            </summary>
    </member>
    <member name="M:NServiceBus.DataBus.IDataBusSerializer.Serialize(System.Object,System.IO.Stream)">
      <summary>
            Serializes the property into the given stream.
            </summary>
      <param name="databusProperty">The property to serialize.</param>
      <param name="stream">The stream to which to write the property.</param>&gt;
        </member>
    <member name="M:NServiceBus.DataBus.IDataBusSerializer.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes a property from the given stream.
            </summary>
      <param name="stream">The stream from which to read the property.</param>
      <returns>The deserialized object.</returns>
    </member>
    <member name="T:NServiceBus.DataBus.FileShare.FileShareDataBus">
      <summary>
            File share implementation of <see cref="T:NServiceBus.DataBus.IDataBus" />.
            </summary>
    </member>
    <member name="M:NServiceBus.DataBus.FileShare.FileShareDataBus.#ctor(System.String)">
      <summary>
            Create a <see cref="T:NServiceBus.DataBus.FileShare.FileShareDataBus" /> with the specified <paramref name="basePath" />.
            </summary>
      <param name="basePath">The path to save files on.</param>
    </member>
    <member name="M:NServiceBus.DataBus.FileShare.FileShareDataBus.Get(System.String)">
      <summary>
            Gets a data item from the bus.
            </summary>
      <param name="key">The key to look for.</param>
      <returns>The data <see cref="T:System.IO.Stream" />.</returns>
    </member>
    <member name="M:NServiceBus.DataBus.FileShare.FileShareDataBus.Put(System.IO.Stream,System.TimeSpan)">
      <summary>
            Adds a data item to the bus and returns the assigned key.
            </summary>
      <param name="stream">A create containing the data to be sent on the databus.</param>
      <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default.</param>
    </member>
    <member name="M:NServiceBus.DataBus.FileShare.FileShareDataBus.Start">
      <summary>
            Called when the bus starts up to allow the data bus to active background tasks.
            </summary>
    </member>
    <member name="P:NServiceBus.DataBus.FileShare.FileShareDataBus.MaxMessageTimeToLive">
      <summary>
            Gets/Sets the maximum message TTL.
            </summary>
    </member>
    <member name="T:NServiceBus.DateTimeExtensions">
      <summary>
            Common date time extensions
            </summary>
    </member>
    <member name="M:NServiceBus.DateTimeExtensions.ToWireFormattedString(System.DateTime)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" /> suitable for transport over the wire
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.DateTimeExtensions.ToUtcDateTime(System.String)">
      <summary>
            Converts a wire formatted <see cref="T:System.String" /> from <see cref="M:NServiceBus.DateTimeExtensions.ToWireFormattedString(System.DateTime)" /> to a UTC <see cref="T:System.DateTime" /></summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.DependencyLifecycle">
      <summary>
            Represent the various lifecycles available for coponents configured in the container
            </summary>
    </member>
    <member name="F:NServiceBus.DependencyLifecycle.SingleInstance">
      <summary>
            The same instance will be returned each time
            </summary>
    </member>
    <member name="F:NServiceBus.DependencyLifecycle.InstancePerUnitOfWork">
      <summary>
            The instance will be singleton for the duration of the unit of work. In practice this means 
            the processing of a single transport message
            </summary>
    </member>
    <member name="F:NServiceBus.DependencyLifecycle.InstancePerCall">
      <summary>
            A new instance will be returned fro each call
            </summary>
    </member>
    <member name="T:NServiceBus.Distributor.DistributorReadyMessageProcessor">
      <summary>
                Part of the Distributor infrastructure.
            </summary>
    </member>
    <member name="M:NServiceBus.Distributor.DistributorReadyMessageProcessor.Handle(NServiceBus.TransportMessage)">
      <summary>
                This method is called when a message is available to be processed.
            </summary>
      <param name="message">
                The <see cref="T:NServiceBus.TransportMessage" /> received.
            </param>
    </member>
    <member name="M:NServiceBus.Distributor.DistributorReadyMessageProcessor.Start">
      <summary>
                Starts the <see cref="T:NServiceBus.Satellites.ISatellite" />.
            </summary>
    </member>
    <member name="M:NServiceBus.Distributor.DistributorReadyMessageProcessor.Stop">
      <summary>
                Stops the <see cref="T:NServiceBus.Satellites.ISatellite" />.
            </summary>
    </member>
    <member name="P:NServiceBus.Distributor.DistributorReadyMessageProcessor.WorkerAvailabilityManager">
      <summary>
                Sets the <see cref="T:NServiceBus.Distributor.IWorkerAvailabilityManager" /> implementation that will be
                used to determine whether or not a worker is available.
            </summary>
    </member>
    <member name="P:NServiceBus.Distributor.DistributorReadyMessageProcessor.InputAddress">
      <summary>
                The <see cref="T:NServiceBus.Address" /> for this <see cref="T:NServiceBus.Satellites.ISatellite" /> to use when receiving messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Distributor.DistributorReadyMessageProcessor.Disabled">
      <summary>
                Set to <code>true</code> to disable this <see cref="T:NServiceBus.Satellites.ISatellite" />.
            </summary>
    </member>
    <member name="T:NServiceBus.Distributor.LicenseConfig">
      <summary>
            Limit number of workers in accordance with Licensing policy
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Queuing.IWantQueueCreated">
      <summary>
            Implementers signal their wish to create a queue, regardless of technology (e.g. MSMQ or SQL Server).
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Queuing.IWantQueueCreated.Address">
      <summary>
            Address of queue the implementer requires.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Queuing.IWantQueueCreated.IsDisabled">
      <summary>
            True if no need to create queue
            </summary>
    </member>
    <member name="T:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.DistributorStorageQueueCreator">
      <summary>
             Signal to create the queue to store worker availability information.
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.DistributorStorageQueueCreator.MsmqWorkerAvailabilityManager">
      <summary>
            Holds storage queue address.
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.DistributorStorageQueueCreator.Address">
      <summary>
            Address of Distributor storage queue.
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.DistributorStorageQueueCreator.IsDisabled">
      <summary>
            Disabling the creation of the distributor storage queue
            </summary>
    </member>
    <member name="T:NServiceBus.Distributor.IWorkerAvailabilityManager">
      <summary>
            Defines a manager class that determines the availability
            of a worker for the <see cref="T:NServiceBus.Distributor.DistributorSatellite" />.
            </summary>
    </member>
    <member name="M:NServiceBus.Distributor.IWorkerAvailabilityManager.Start">
      <summary>
             Start the worker availability manager
            </summary>
    </member>
    <member name="M:NServiceBus.Distributor.IWorkerAvailabilityManager.Stop">
      <summary>
             Stops the worker availability manager
            </summary>
    </member>
    <member name="M:NServiceBus.Distributor.IWorkerAvailabilityManager.WorkerAvailable(NServiceBus.Address,System.Int32)">
      <summary>
            Signal that a worker is available to receive a dispatched message.
            </summary>
      <param name="address">
            The address of the worker that will accept the dispatched message.
            </param>
      <param name="capacity">The number of messages that this worker is ready to process</param>
    </member>
    <member name="M:NServiceBus.Distributor.IWorkerAvailabilityManager.PopAvailableWorker">
      <summary>
            Pops the next available worker from the available worker list
            and returns its address.
            </summary>
      <returns>The address of the next available worker.</returns>
    </member>
    <member name="M:NServiceBus.Distributor.IWorkerAvailabilityManager.ClearAvailabilityForWorker(NServiceBus.Address)">
      <summary>
            Removes all entries from the worker availability list
            with the specified address.
            </summary>
      <param name="address">
            The address of the worker to remove from the availability list.
            </param>
    </member>
    <member name="T:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager">
      <summary>
            An implementation of <see cref="T:NServiceBus.Distributor.IWorkerAvailabilityManager" /> for MSMQ to be used
            with the <see cref="T:NServiceBus.Distributor.DistributorSatellite" /> class.
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.ClearAvailabilityForWorker(NServiceBus.Address)">
      <summary>
            Removes all entries from the worker availability queue
            with the specified address.
            </summary>
      <param name="address">
            The address of the worker to remove from the availability list.
            </param>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.PopAvailableWorker">
      <summary>
            Pops the next available worker from the available worker queue
            and returns its address.
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.Start">
      <summary>
            Initializes the object.
            </summary>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.WorkerAvailable(NServiceBus.Address,System.Int32)">
      <summary>
            Signal that a worker is available to receive a dispatched message.
            </summary>
      <param name="address">
            The address of the worker that will accept the dispatched message.
            </param>
      <param name="capacity">The number of messages that this worker is ready to process</param>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.UnitOfWork">
      <summary>
            Msmq unit of work to be used in non DTC mode <see cref="T:NServiceBus.Transports.Msmq.MsmqUnitOfWork" />.
            </summary>
    </member>
    <member name="P:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.StorageQueueAddress">
      <summary>
            Sets the path to the queue that will be used for storing
            worker availability.
            </summary>
      <remarks>The queue provided must be transactional.</remarks>
    </member>
    <member name="T:NServiceBus.Distributor.QueueCreators.WorkerQueueCreator">
      <summary>
            Signal to create the queue for a worker
            </summary>
    </member>
    <member name="P:NServiceBus.Distributor.QueueCreators.WorkerQueueCreator.Address">
      <summary>
            Address of worker queue
            </summary>
    </member>
    <member name="P:NServiceBus.Distributor.QueueCreators.WorkerQueueCreator.IsDisabled">
      <summary>
            Disabling the creation of the worker queue
            </summary>
    </member>
    <member name="M:NServiceBus.Encryption.Config.ConfigureEncryption.DisableCompatibilityWithNSB2(NServiceBus.Configure)">
      <summary>
            Causes the endpoint to no longer send extra data to make encryption compatible with NSB 2.X
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Encryption.EncryptionMessageMutator">
      <summary>
            Invokes the encryption service to encrypt/decrypt messages
            </summary>
    </member>
    <member name="T:NServiceBus.Encryption.IEncryptionService">
      <summary>
            Abstraction for encryption capabilities.
            </summary>
    </member>
    <member name="M:NServiceBus.Encryption.IEncryptionService.Encrypt(System.String)">
      <summary>
            Encrypts the given value returning an EncryptedValue.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Encryption.IEncryptionService.Decrypt(NServiceBus.EncryptedValue)">
      <summary>
            Decrypts the given EncryptedValue object returning the source string.
            </summary>
      <param name="encryptedValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Encryption.Rijndael.EncryptionService">
      <summary>
            Implementation of the encryption capability using Rijndael.
            Copied from https://rhino-tools.svn.sourceforge.net/svnroot/rhino-tools/trunk/esb/Rhino.ServiceBus/Impl/RijndaelEncryptionService.cs
            allowable under the Apache 2.0 license.
            </summary>
    </member>
    <member name="P:NServiceBus.Encryption.Rijndael.EncryptionService.Key">
      <summary>
            Symmetric key used for encryption.
            </summary>
    </member>
    <member name="T:NServiceBus.EndpointConventions">
      <summary>
            Static extension methods to Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.EndpointConventions.DefineEndpointName(NServiceBus.Configure,System.Func{System.String})">
      <summary>
            Sets the function that specified the name of this endpoint
            </summary>
      <param name="config">
      </param>
      <param name="definesEndpointName">
      </param>
    </member>
    <member name="M:NServiceBus.EndpointConventions.DefineEndpointName(NServiceBus.Configure,System.String)">
      <summary>
            Sets the function that specified the name of this endpoint
            </summary>
      <param name="config">
      </param>
      <param name="name">
      </param>
    </member>
    <member name="T:NServiceBus.Faults.FaultsHeaderKeys">
      <summary>
            Class holding keys to message headers for faults.
            </summary>
    </member>
    <member name="F:NServiceBus.Faults.FaultsHeaderKeys.FailedQ">
      <summary>
            Header key for setting/getting the queue at which the message processing failed.
            </summary>
    </member>
    <member name="T:NServiceBus.Faults.Forwarder.Config.FaultsQueueCreator">
      <summary>
            Signals to create faults queue
            </summary>
    </member>
    <member name="P:NServiceBus.Faults.Forwarder.Config.FaultsQueueCreator.Address">
      <summary>
            Signals to create the faults queue
            </summary>
    </member>
    <member name="P:NServiceBus.Faults.Forwarder.Config.FaultsQueueCreator.IsDisabled">
      <summary>
            Disabling the creation of faults queue
            </summary>
    </member>
    <member name="T:NServiceBus.Faults.IManageMessageFailures">
      <summary>
            Interface for defining how message failures will be handled.
            </summary>
    </member>
    <member name="M:NServiceBus.Faults.IManageMessageFailures.SerializationFailedForMessage(NServiceBus.TransportMessage,System.Exception)">
      <summary>
            Invoked when the deserialization of a message failed.
            </summary>
      <param name="message">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:NServiceBus.Faults.IManageMessageFailures.ProcessingAlwaysFailsForMessage(NServiceBus.TransportMessage,System.Exception)">
      <summary>
            Invoked when a message has failed its processing the maximum number of time configured.
            </summary>
      <param name="message">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:NServiceBus.Faults.IManageMessageFailures.Init(NServiceBus.Address)">
      <summary>
            Initializes the fault manager
            </summary>
      <param name="address">The address of the message source</param>
    </member>
    <member name="T:NServiceBus.Faults.Forwarder.FaultManager">
      <summary>
            Implementation of IManageMessageFailures by forwarding messages
            using ISendMessages.
            </summary>
    </member>
    <member name="P:NServiceBus.Faults.Forwarder.FaultManager.ErrorQueue">
      <summary>
            Endpoint to which message failures are forwarded
            </summary>
    </member>
    <member name="P:NServiceBus.Faults.Forwarder.FaultManager.RetriesErrorQueue">
      <summary>
            The address of the Second Level Retries input queue when SLR is enabled
            </summary>
    </member>
    <member name="M:NServiceBus.Faults.Forwarder.MessageHelpers.GetLabelWithoutFailedQueue(System.Messaging.Message)">
      <summary>
            For compatibility with V2.6:
            Gets the label of the message stripping out the failed queue.
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Faults.Forwarder.MessageHelpers.GetFailedQueueFromLabel(System.Messaging.Message)">
      <summary>
            For compatibility with V2.6:
            Returns the queue whose process failed processing the given message
            by accessing the label of the message.
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Faults.InMemory.FaultManager">
      <summary>
            Logging implementation of IManageMessageFailures.
            </summary>
    </member>
    <member name="M:NServiceBus.Faults.InMemory.FaultManager.Init(NServiceBus.Address)">
      <summary>
            Initializes the fault manager
            </summary>
      <param name="address">The address of the message source</param>
    </member>
    <member name="T:NServiceBus.MessageMutator.IMutateIncomingTransportMessages">
      <summary>
            Mutates transport messages when they are received.
            Implementors are invoked before the logical messages have been deserialized.
            </summary>
    </member>
    <member name="M:NServiceBus.MessageMutator.IMutateIncomingTransportMessages.MutateIncoming(NServiceBus.TransportMessage)">
      <summary>
            Modifies various properties of the transport message.
            </summary>
      <param name="transportMessage">
      </param>
    </member>
    <member name="T:NServiceBus.MessageMutator.IMutateTransportMessages">
      <summary>
            Use this interface to change transport messages before any other code sees them. 
            </summary>
    </member>
    <member name="T:NServiceBus.Gateway.Persistence.IPersistMessages">
      <summary>
            Provides the basic functionality to persist Gateway messages.
            </summary>
    </member>
    <member name="M:NServiceBus.Gateway.Persistence.IPersistMessages.InsertMessage(System.String,System.DateTime,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            When implemented in a class, stores a gateway message.
            </summary>
      <param name="clientId">Message identifier.</param>
      <param name="timeReceived">Message time received.</param>
      <param name="message">The Message.</param>
      <param name="headers">Ant associated message headers.</param>
      <returns>
        <c>true</c> if success, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NServiceBus.Gateway.Persistence.IPersistMessages.AckMessage(System.String,System.Byte[]@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
      <summary>
            When implemented in a class, updates the message with a status of acknowledged.
            </summary>
      <param name="clientId">Message identifier.</param>
      <param name="message">The Message.</param>
      <param name="headers">Ant associated message headers.</param>
      <returns>
        <c>true</c> if success, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:NServiceBus.Gateway.Persistence.IPersistMessages.UpdateHeader(System.String,System.String,System.String)">
      <summary>
            When implemented in a class, updates the message headers.
            </summary>
      <param name="clientId">Message identifier.</param>
      <param name="headerKey">Header key to update.</param>
      <param name="newValue">New value.</param>
    </member>
    <member name="T:NServiceBus.Hosting.Configuration.ConfigManager">
      <summary>
            Configures the host upon startup
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Configuration.ConfigManager.#ctor(System.Collections.Generic.List{System.Reflection.Assembly},NServiceBus.IConfigureThisEndpoint)">
      <summary>
            Contructs the manager with the given user configuration and the list of assemblies that should be scanned
            </summary>
      <param name="assembliesToScan">
      </param>
      <param name="specifier">
      </param>
    </member>
    <member name="M:NServiceBus.Hosting.Configuration.ConfigManager.ConfigureCustomInitAndStartup">
      <summary>
            Configures the user classes that need custom config and those that are marked to run at startup
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Configuration.ConfigManager.Startup">
      <summary>
            Executes the user classes that are marked as "run at startup"
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Configuration.ConfigManager.Shutdown">
      <summary>
            Shutsdown the user classes started earlier
            </summary>
    </member>
    <member name="T:NServiceBus.EndpointNameAttribute">
      <summary>
            Used to specify the name of the current endpoint.
            Will be used as the name of the input queue as well.
            </summary>
    </member>
    <member name="M:NServiceBus.EndpointNameAttribute.#ctor(System.String)">
      <summary>
            Used to specify the name of the current endpoint.
            Will be used as the name of the input queue as well.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="P:NServiceBus.EndpointNameAttribute.Name">
      <summary>
            The name of the endpoint.
            </summary>
    </member>
    <member name="T:NServiceBus.EndpointSLAAttribute">
      <summary>
            Defines the SLA for this endpoint. Needs to be set on the endpoint configuration class
            </summary>
    </member>
    <member name="M:NServiceBus.EndpointSLAAttribute.#ctor(System.String)">
      <summary>
            Used to define the SLA for this endpoint
            </summary>
      <param name="sla">A timespan</param>
    </member>
    <member name="P:NServiceBus.EndpointSLAAttribute.SLA">
      <summary>
            The SLA of the endpoint.
            </summary>
    </member>
    <member name="T:NServiceBus.IWantCustomInitialization">
      <summary>
            If you want to specify your own container or serializer,
            implement this interface on the class which implements <see cref="T:NServiceBus.IConfigureThisEndpoint" />.
            
            Implementors will be invoked before the endpoint starts up.
            Dependency injection is not provided for these types.
            </summary>
    </member>
    <member name="M:NServiceBus.IWantCustomInitialization.Init">
      <summary>
            Perform initialization logic.
            </summary>
    </member>
    <member name="T:NServiceBus.IWantTheEndpointConfig">
      <summary>
            Implementors will be provided with a reference to IConfigureThisEndpoint.
            Implementors must inherit either <see cref="T:NServiceBus.Hosting.Profiles.IHandleProfile" /> or <see cref="T:NServiceBus.IWantCustomInitialization" />.
            </summary>
    </member>
    <member name="P:NServiceBus.IWantTheEndpointConfig.Config">
      <summary>
            This property will be set by the infrastructure.
            </summary>
    </member>
    <member name="T:NServiceBus.IConfigureLogging">
      <summary>
            Called in order to configure logging.
            
            If you want logging configured regardless of profiles, do not use this interface,
            instead implement <see cref="T:NServiceBus.IWantCustomLogging" /> on the class which implements <see cref="T:NServiceBus.IConfigureThisEndpoint" />.
            
            Implementors should work against the generic version of this interface.
            </summary>
    </member>
    <member name="M:NServiceBus.IConfigureLogging.Configure(NServiceBus.IConfigureThisEndpoint)">
      <summary>
            Performs all logging configuration.
            </summary>
    </member>
    <member name="T:NServiceBus.IConfigureLoggingForProfile`1">
      <summary>
            Called in order to configure logging for the given profile type.
            If an implementation isn't found for a given profile, then the search continues
            recursively up that profile's inheritance hierarchy.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.IConfigureThisEndpoint">
      <summary>
            Indicate that the implementing class will specify configuration.
            </summary>
    </member>
    <member name="T:NServiceBus.IWantCustomLogging">
      <summary>
            If you want to specify your own logging,
            implement this interface on the class which implements <see cref="T:NServiceBus.IConfigureThisEndpoint" />. 
            </summary>
    </member>
    <member name="M:NServiceBus.IWantCustomLogging.Init">
      <summary>
            Initialize logging.
            </summary>
    </member>
    <member name="T:NServiceBus.IWantToRunAtStartup">
      <summary>
            Implementers will be invoked when the endpoint starts up.
            Dependency injection is provided for these types.
            </summary>
    </member>
    <member name="M:NServiceBus.IWantToRunAtStartup.Run">
      <summary>
            Method called at startup.
            </summary>
    </member>
    <member name="M:NServiceBus.IWantToRunAtStartup.Stop">
      <summary>
            Method called on shutdown.
            </summary>
    </member>
    <member name="T:NServiceBus.Hosting.IHost">
      <summary>
            Identifies a host
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.IHost.Start">
      <summary>
            Does startup work.
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.IHost.Stop">
      <summary>
            Does shutdown work.
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.IHost.Install``1(System.String)">
      <summary>
            Performs necessary installation
            </summary>
    </member>
    <member name="T:NServiceBus.Hosting.GenericHost">
      <summary>
            A generic host that can be used to provide hosting services in different environments
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.GenericHost.Start">
      <summary>
            Creates and starts the bus as per the configuration
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.GenericHost.Stop">
      <summary>
            Finalize
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.GenericHost.Install``1(System.String)">
      <summary>
            When installing as windows service (/install), run infrastructure installers
            </summary>
      <typeparam name="TEnvironment">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Hosting.GenericHost.#ctor(NServiceBus.IConfigureThisEndpoint,System.String[],System.Collections.Generic.List{System.Type},System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Accepts the type which will specify the users custom configuration.
            This type should implement <see cref="T:NServiceBus.IConfigureThisEndpoint" />.
            </summary>
      <param name="specifier">
      </param>
      <param name="args">
      </param>
      <param name="defaultProfiles">
      </param>
      <param name="endpointName">
      </param>
      <param name="scannableAssembliesFullName">Assemblies full name that were scanned.</param>
    </member>
    <member name="T:NServiceBus.Hosting.Helpers.AssemblyScanner">
      <summary>
            Helpers for assembly scanning operations
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Helpers.AssemblyScanner.GetScannableAssemblies">
      <summary>
            Gets a list of assemblies that can be scanned and a list of errors that occurred while scanning.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Hosting.Helpers.AssemblyScannerResults">
      <summary>
            Holds GetScannableAssemblies results.
            Contains list of errors and list of scan-able assemblies.
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Helpers.AssemblyScannerResults.#ctor">
      <summary>
            Constructor to initialize AssemblyScannerResults
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Helpers.AssemblyScannerResults.ToString">
      <summary>
            Dump error to console.
            </summary>
    </member>
    <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.Errors">
      <summary>
            List of errors that occurred during 
            </summary>
    </member>
    <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.Assemblies">
      <summary>
      </summary>
    </member>
    <member name="T:NServiceBus.Hosting.Helpers.ErrorWhileScanningAssemblies">
      <summary>
            Error information that occurred while scanning assemblies.
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Helpers.ErrorWhileScanningAssemblies.#ctor(System.Exception,System.String)">
      <summary>
            Adding an error
            </summary>
      <param name="ex">
      </param>
      <param name="errorMessage">
      </param>
    </member>
    <member name="M:NServiceBus.Hosting.Helpers.ErrorWhileScanningAssemblies.ToString">
      <summary>
            Convert to string errors while scanning assemblies
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Hosting.Helpers.ErrorWhileScanningAssemblies.ErrorMessage">
      <summary>
            Exception message.
            </summary>
    </member>
    <member name="P:NServiceBus.Hosting.Helpers.ErrorWhileScanningAssemblies.Exception">
      <summary>
            Exception that occurred.
            </summary>
    </member>
    <member name="T:NServiceBus.IProfile">
      <summary>
            Marker interface to indicate a run-time profile.
            Implementors must be concrete class - interfaces are not supported.
            </summary>
    </member>
    <member name="T:NServiceBus.Hosting.Profiles.ProfileActivator">
      <summary>
            Activates the profiles to be used
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Profiles.ProfileActivator.Run">
      <summary>
            Activate profile handlers
            </summary>
    </member>
    <member name="P:NServiceBus.Hosting.Profiles.ProfileActivator.ProfileManager">
      <summary>
            The profile manager
            </summary>
    </member>
    <member name="T:NServiceBus.Hosting.Profiles.ProfileManager">
      <summary>
            Scans and loads profile handlers from the given assemblies
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Profiles.ProfileManager.#ctor(System.Collections.Generic.List{System.Reflection.Assembly},NServiceBus.IConfigureThisEndpoint,System.String[],System.Collections.Generic.List{System.Type})">
      <summary>
            Initializes the manager with the assemblies to scan and the endpoint configuration to use
            </summary>
      <param name="assembliesToScan">
      </param>
      <param name="specifier">
      </param>
      <param name="args">
      </param>
      <param name="defaultProfiles">
      </param>
    </member>
    <member name="M:NServiceBus.Hosting.Profiles.ProfileManager.GetLoggingConfigurer">
      <summary>
            Returns an object to configure logging based on the specification and profiles passed in.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Hosting.Profiles.ProfileManager.ActivateProfileHandlers">
      <summary>
            Activates the profile handlers that handle the previously identified active profiles. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Hosting.Roles.IConfigureRole">
      <summary>
            Interface that enables configuration based on specified role
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Roles.IConfigureRole.ConfigureRole(NServiceBus.IConfigureThisEndpoint)">
      <summary>
            Applies the role configuration
            </summary>
      <param name="specifier">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Hosting.Roles.IConfigureRole`1">
      <summary>
            Generic helper interface for IConfigureRole
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.Hosting.Roles.IRole">
      <summary>
            Marker interface for roles
            </summary>
    </member>
    <member name="T:NServiceBus.Hosting.Roles.RoleManager">
      <summary>
            Handles the different roles that are registered
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Roles.RoleManager.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Creates the manager with the list of assemblies to scan for roles
            </summary>
      <param name="assembliesToScan">
      </param>
    </member>
    <member name="M:NServiceBus.Hosting.Roles.RoleManager.ConfigureBusForEndpoint(NServiceBus.IConfigureThisEndpoint)">
      <summary>
            Checks if the specifier contains a given role and uses it to configure the UnicastBus appropriately.
            </summary>
      <param name="specifier">
      </param>
    </member>
    <member name="T:NServiceBus.Hosting.Wcf.WcfManager">
      <summary>
            Enable users to expose messages as WCF services
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Wcf.WcfManager.Startup">
      <summary>
            Starts a servicehost for each found service. Defaults to BasicHttpBinding if
            no user specified binding is found
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Wcf.WcfManager.Shutdown">
      <summary>
            Shutsdown the service hosts
            </summary>
    </member>
    <member name="T:NServiceBus.Hosting.Wcf.WcfServiceHost">
      <summary>
            A specialized service host that adds a default endpoint if non is specified in config
            </summary>
    </member>
    <member name="M:NServiceBus.Hosting.Wcf.WcfServiceHost.#ctor(System.Type)">
      <summary>
            Constructs the host with the given service type
            </summary>
      <param name="t">
      </param>
    </member>
    <member name="M:NServiceBus.Hosting.Wcf.WcfServiceHost.AddDefaultEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)">
      <summary>
            Adds the given endpoint unless its already configured in app.config
            </summary>
      <param name="contractType">
      </param>
      <param name="binding">
      </param>
      <param name="address">
      </param>
    </member>
    <member name="T:NServiceBus.Impersonation.ExtractIncomingPrincipal">
      <summary>
            Allows different authentication techniques to be plugged in.
            </summary>
    </member>
    <member name="M:NServiceBus.Impersonation.ExtractIncomingPrincipal.GetPrincipal(NServiceBus.TransportMessage)">
      <summary>
            Gets the principal of the client to be used when handling the message
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Impersonation.Windows.ConfigureWindowsImpersonation">
      <summary>
            Configures windows impersonation
            </summary>
    </member>
    <member name="T:NServiceBus.Impersonation.Windows.WindowsIdentityEnricher">
      <summary>
            Stamps outgoing messages with the current windows identity
            </summary>
    </member>
    <member name="T:NServiceBus.Impersonation.Windows.WindowsImpersonator">
      <summary>
            Impersonates the client if needed
            </summary>
    </member>
    <member name="T:NServiceBus.Install">
      <summary>
            Contains extension methods to the Configure class.
            </summary>
    </member>
    <member name="M:NServiceBus.Install.ForInstallationOn``1(NServiceBus.Configure)">
      <summary>
            Indicates which environment is going to be installed, specifying that resources 
            to be created will be provided permissions for the currently logged on user.
            </summary>
      <typeparam name="T">The environment type.</typeparam>
      <param name="config">Extension method object.</param>
      <returns>An Installer object whose Install method should be invoked.</returns>
    </member>
    <member name="M:NServiceBus.Install.ForInstallationOn``1(NServiceBus.Configure,System.String)">
      <summary>
            Indicates which environment is going to be installed, specifying that resources 
            to be created will be provided permissions for the user represented by the userToken
            (where not the currently logged on user) or the currently logged on user.
            </summary>
      <typeparam name="T">The environment type.</typeparam>
      <param name="config">Extension method object.</param>
      <param name="username">The username.</param>
      <returns>An Installer object whose Install method should be invoked.</returns>
    </member>
    <member name="T:NServiceBus.Installer`1">
      <summary>
            Resolves objects who implement INeedToInstall and invokes them for the given environment.
            Assumes that implementors have already been registered in the container.
            </summary>
      <typeparam name="T">The environment for which the installers should be invoked.</typeparam>
    </member>
    <member name="M:NServiceBus.Installer`1.#ctor(System.Security.Principal.IIdentity)">
      <summary>
            Initializes a new instance of the Installer
            </summary>
      <param name="identity">Identity of the user to be used to setup installer.</param>
    </member>
    <member name="M:NServiceBus.Installer`1.Install">
      <summary>
            Invokes installers for the given environment
            </summary>
    </member>
    <member name="M:NServiceBus.Installer`1.InstallOtherInstallers">
      <summary>
            Invokes only 'Something' - other than infrastructure,  installers for the given environment.
            </summary>
    </member>
    <member name="P:NServiceBus.Installer`1.RunOtherInstallers">
      <summary>
            Gets or sets RunOtherInstallers 
            </summary>
    </member>
    <member name="T:NServiceBus.Installation.IEnvironment">
      <summary>
            Interface for Environment
            </summary>
    </member>
    <member name="T:NServiceBus.Installation.Environments.Windows">
      <summary>
            Windows installation environment
            </summary>
    </member>
    <member name="T:NServiceBus.Installation.INeedToInstallSomething">
      <summary>
            Interface invoked by the infrastructure when going to install an endpoint.
            Implementors are invoked after <see cref="T:NServiceBus.Installation.INeedToInstallInfrastructure" />.
            Implementors should not implement this type directly but rather the generic version of it.
            </summary>
    </member>
    <member name="M:NServiceBus.Installation.INeedToInstallSomething.Install(System.String)">
      <summary>
            Performs the installation providing permission for the given user.
            </summary>
      <param name="identity">The user for whom permissions will be given.</param>
    </member>
    <member name="T:NServiceBus.Installation.INeedToInstallInfrastructure">
      <summary>
            Interface invoked by the infrastructure when going to install an endpoint.
            Implementors should not implement this type directly but rather the generic version of it.
            </summary>
    </member>
    <member name="T:NServiceBus.Installation.INeedToInstallInfrastructure`1">
      <summary>
            Interface invoked by the infrastructure when going to install an endpoint for a specific environment.
            Implementors invoked before <see cref="T:NServiceBus.Installation.INeedToInstallSomething" />.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.Installation.INeedToInstallSomething`1">
      <summary>
            Interface invoked by the infrastructure when going to install an endpoint for a specific environment.
            </summary>
      <typeparam name="T">The environment type.</typeparam>
    </member>
    <member name="T:NServiceBus.IWcfService`2">
      <summary>
            Service interface for a generic WCF adapter to a messaging endpoint.
            </summary>
      <typeparam name="TRequest">
      </typeparam>
      <typeparam name="TResponse">
      </typeparam>
    </member>
    <member name="M:NServiceBus.IWcfService`2.BeginProcess(`0,System.AsyncCallback,System.Object)">
      <summary>
            Sends the message to the messaging endpoint.
            </summary>
      <param name="request">
      </param>
      <param name="callback">
      </param>
      <param name="state">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.IWcfService`2.EndProcess(System.IAsyncResult)">
      <summary>
            Returns the result received from the messaging endpoint.
            </summary>
      <param name="asyncResult">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Licensing.License">
      <summary>
            NServiceBus License information
            </summary>
    </member>
    <member name="M:NServiceBus.Licensing.LicenseManager.Parse(System.String)">
      <summary>
            Initializes the licensing system with the given license
            </summary>
      <param name="licenseText">
      </param>
    </member>
    <member name="M:NServiceBus.Licensing.LicenseManager.PromptUserForLicenseIfTrialHasExpired">
      <summary>
            Prompts the users if their trial license has expired
            </summary>
    </member>
    <member name="M:NServiceBus.Licensing.LicenseManager.ConfigureNServiceBusLicense">
      <summary>
                Set NSeriviceBus license information.
            </summary>
    </member>
    <member name="P:NServiceBus.Licensing.LicenseManager.CurrentLicense">
      <summary>
                Get current NServiceBus licensing information
            </summary>
    </member>
    <member name="T:NServiceBus.Licensing.LicenseType">
      <summary>
            License types.
            </summary>
    </member>
    <member name="T:Rhino.Licensing.AbstractLicenseValidator">
      <summary>
            Base license validator.
            </summary>
    </member>
    <member name="F:Rhino.Licensing.AbstractLicenseValidator.Log">
      <summary>
            License validator logger
            </summary>
    </member>
    <member name="M:Rhino.Licensing.AbstractLicenseValidator.#ctor(System.String)">
      <summary>
            Creates a license validator with specified public key.
            </summary>
      <param name="publicKey">public key</param>
    </member>
    <member name="M:Rhino.Licensing.AbstractLicenseValidator.AssertValidLicense">
      <summary>
            Validates loaded license
            </summary>
    </member>
    <member name="M:Rhino.Licensing.AbstractLicenseValidator.TryLoadingLicenseValuesFromValidatedXml">
      <summary>
            Loads license data from validated license file.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.ExpirationDate">
      <summary>
            Gets the expiration date of the license
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseType">
      <summary>
            Gets the Type of the license
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.UserId">
      <summary>
            Gets the Id of the license holder
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.Name">
      <summary>
            Gets the name of the license holder
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseAttributes">
      <summary>
            Gets extra license information
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.License">
      <summary>
            Gets or Sets the license content
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.LeaseTimeout">
      <summary>
            Lease timeout
            </summary>
    </member>
    <member name="E:Rhino.Licensing.AbstractLicenseValidator.LicenseInvalidated">
      <summary>
            Fired when license data is invalidated
            </summary>
    </member>
    <member name="T:NServiceBus.Licensing.StringLicenseValidator">
      <summary>
            Validates content of a license file
            </summary>
    </member>
    <member name="M:NServiceBus.Licensing.StringLicenseValidator.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:NServiceBus.Licensing.StringLicenseValidator" /></summary>
      <param name="publicKey">public key</param>
      <param name="license">license content</param>
    </member>
    <member name="P:NServiceBus.Licensing.StringLicenseValidator.License">
      <summary>
            License content
            </summary>
    </member>
    <member name="T:NServiceBus.Logging.ILog">
      <summary>
      </summary>
    </member>
    <member name="M:NServiceBus.Logging.ILog.Debug(System.String)">
      <summary>
      </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.Debug(System.String,System.Exception)">
      <summary>
      </summary>
      <param name="message">
      </param>
      <param name="exception">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.DebugFormat(System.String,System.Object[])">
      <summary>
      </summary>
      <param name="format">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.Info(System.String)">
      <summary>
      </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.Info(System.String,System.Exception)">
      <summary>
      </summary>
      <param name="message">
      </param>
      <param name="exception">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.InfoFormat(System.String,System.Object[])">
      <summary>
      </summary>
      <param name="format">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.Warn(System.String)">
      <summary>
      </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.Warn(System.String,System.Exception)">
      <summary>
      </summary>
      <param name="message">
      </param>
      <param name="exception">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.WarnFormat(System.String,System.Object[])">
      <summary>
      </summary>
      <param name="format">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.Error(System.String)">
      <summary>
      </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.Error(System.String,System.Exception)">
      <summary>
      </summary>
      <param name="message">
      </param>
      <param name="exception">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.ErrorFormat(System.String,System.Object[])">
      <summary>
      </summary>
      <param name="format">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.Fatal(System.String)">
      <summary>
      </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.Fatal(System.String,System.Exception)">
      <summary>
      </summary>
      <param name="message">
      </param>
      <param name="exception">
      </param>
    </member>
    <member name="M:NServiceBus.Logging.ILog.FatalFormat(System.String,System.Object[])">
      <summary>
      </summary>
      <param name="format">
      </param>
      <param name="args">
      </param>
    </member>
    <member name="P:NServiceBus.Logging.ILog.IsDebugEnabled">
      <summary>
      </summary>
    </member>
    <member name="P:NServiceBus.Logging.ILog.IsInfoEnabled">
      <summary>
      </summary>
    </member>
    <member name="P:NServiceBus.Logging.ILog.IsWarnEnabled">
      <summary>
      </summary>
    </member>
    <member name="P:NServiceBus.Logging.ILog.IsErrorEnabled">
      <summary>
      </summary>
    </member>
    <member name="P:NServiceBus.Logging.ILog.IsFatalEnabled">
      <summary>
      </summary>
    </member>
    <member name="T:NServiceBus.Logging.ILoggerFactory">
      <summary>
      </summary>
    </member>
    <member name="M:NServiceBus.Logging.ILoggerFactory.GetLogger(System.Type)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Logging.ILoggerFactory.GetLogger(System.String)">
      <summary>
      </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Logging.Loggers.ConsoleLogger">
      <summary>
      </summary>
    </member>
    <member name="P:NServiceBus.Logging.Loggers.ConsoleLogger.IsDebugEnabled">
      <summary>
      </summary>
    </member>
    <member name="P:NServiceBus.Logging.Loggers.ConsoleLogger.IsInfoEnabled">
      <summary>
      </summary>
    </member>
    <member name="T:NServiceBus.Logging.Loggers.ConsoleLoggerFactory">
      <summary>
      </summary>
    </member>
    <member name="T:NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetConfigurator">
      <summary>
      </summary>
    </member>
    <member name="M:NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetConfigurator.Configure">
      <summary>
            Configure NServiceBus to use Log4Net without setting a specific appender.
            </summary>
    </member>
    <member name="T:NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetLogger">
      <summary>
      </summary>
    </member>
    <member name="T:NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetLoggerFactory">
      <summary>
      </summary>
    </member>
    <member name="T:NServiceBus.Logging.Loggers.NLogAdapter.NLogConfigurator">
      <summary>
      </summary>
    </member>
    <member name="M:NServiceBus.Logging.Loggers.NLogAdapter.NLogConfigurator.Configure">
      <summary>
            Configure NServiceBus to use Log4Net without setting a specific appender.
            </summary>
    </member>
    <member name="T:NServiceBus.Logging.Loggers.NLogAdapter.NLogLogger">
      <summary>
      </summary>
    </member>
    <member name="T:NServiceBus.Logging.Loggers.NLogAdapter.NLogLoggerFactory">
      <summary>
      </summary>
    </member>
    <member name="T:NServiceBus.Logging.Loggers.NLogAdapter.NLogTargetFactory">
      <summary>
            Factory to create NLog targets
            </summary>
    </member>
    <member name="T:NServiceBus.Logging.Loggers.NullLogger">
      <summary>
      </summary>
    </member>
    <member name="T:NServiceBus.Logging.Loggers.NullLoggerFactory">
      <summary>
      </summary>
    </member>
    <member name="T:NServiceBus.Logging.LoggingLibraryException">
      <summary>
      </summary>
    </member>
    <member name="M:NServiceBus.Logging.LoggingLibraryException.#ctor(System.String)">
      <summary>
      </summary>
      <param name="message">
      </param>
    </member>
    <member name="T:NServiceBus.Logging.LogManager">
      <summary>
      </summary>
    </member>
    <member name="M:NServiceBus.Logging.LogManager.GetLogger(System.Type)">
      <summary>
      </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Logging.LogManager.GetLogger(System.String)">
      <summary>
      </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Logging.LogManager.LoggerFactory">
      <summary>
      </summary>
    </member>
    <member name="M:NServiceBus.SecondLevelRetries.Helpers.MessageHelpers.GetLabelWithoutFailedQueue(System.Messaging.Message)">
      <summary>
            For compatibility with V2.6:
            Gets the label of the message stripping out the failed queue.
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.SecondLevelRetries.Helpers.MessageHelpers.GetFailedQueueFromLabel(System.Messaging.Message)">
      <summary>
            For compatibility with V2.6:
            Returns the queue whose process failed processing the given message
            by accessing the label of the message.
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.MessageConventions">
      <summary>
            Static extension methods to Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningMessagesAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a type is a message.
            </summary>
      <param name="config">
      </param>
      <param name="definesMessageType">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningCommandsAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a type is a commands.
            </summary>
      <param name="config">
      </param>
      <param name="definesCommandType">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningEventsAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a type is a event.
            </summary>
      <param name="config">
      </param>
      <param name="definesEventType">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningEncryptedPropertiesAs(NServiceBus.Configure,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a property should be encrypted or not.
            </summary>
      <param name="config">
      </param>
      <param name="definesEncryptedProperty">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningDataBusPropertiesAs(NServiceBus.Configure,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a property should be sent via the DataBus or not.
            </summary>
      <param name="config">
      </param>
      <param name="definesDataBusProperty">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningTimeToBeReceivedAs(NServiceBus.Configure,System.Func{System.Type,System.TimeSpan})">
      <summary>
            Sets the function to be used to evaluate whether a message has a time to be received.
            </summary>
      <param name="config">
      </param>
      <param name="retrieveTimeToBeReceived">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningExpressMessagesAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a type is an express message or not.
            </summary>
      <param name="config">
      </param>
      <param name="definesExpressMessageType">
      </param>
    </member>
    <member name="T:NServiceBus.MessageHeaders.MessageHeaderManager">
      <summary>
            Message Header Manager
            </summary>
    </member>
    <member name="M:NServiceBus.MessageHeaders.MessageHeaderManager.GetHeader(System.Object,System.String)">
      <summary>
            Gets the Header for the Message
            </summary>
      <param name="message">message for which Headers to be find</param>
      <param name="key">Key</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageHeaders.MessageHeaderManager.SetHeader(System.Object,System.String,System.String)">
      <summary>
            Sets the Header for the Message
            </summary>
      <param name="message">
      </param>
      <param name="key">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NServiceBus.MessageHeaders.MessageHeaderManager.GetStaticOutgoingHeaders">
      <summary>
            Gets Static Outgoing Headers
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.MessageHeaders.MessageHeaderManager.Bus">
      <summary>
            Bus
            </summary>
    </member>
    <member name="T:NServiceBus.MessageInterfaces.IMessageMapper">
      <summary>
            Enables looking up interfaced mapped to generated concrete types
            and vice versa.
            </summary>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initializes the mapper with the given types to be scanned.
            </summary>
      <param name="types">
      </param>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.GetMappedTypeFor(System.Type)">
      <summary>
            If the given type is an interface, returns the generated concrete type.
            If the given type is concerete, returns the interface it was generated from.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.GetMappedTypeFor(System.String)">
      <summary>
            Looks up the type mapped for the given name.
            </summary>
      <param name="typeName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper">
      <summary>
            Uses reflection to map between interfaces and their generated concrete implementations.
            </summary>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Scans the given types generating concrete classes for interfaces.
            </summary>
      <param name="types">
      </param>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.InitType(System.Type,System.Reflection.Emit.ModuleBuilder)">
      <summary>
            Generates a concrete implementation of the given type if it is an interface.
            </summary>
      <param name="t">
      </param>
      <param name="moduleBuilder">
      </param>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetNewTypeName(System.Type)">
      <summary>
            Generates a new full name for a type to be generated for the given type.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateTypeFrom(System.Type,System.Reflection.Emit.ModuleBuilder)">
      <summary>
            Generates the concrete implementation of the given type.
            Only properties on the given type are generated in the concrete implementation.
            </summary>
      <param name="t">
      </param>
      <param name="moduleBuilder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.AddCustomAttributeToProperty(System.Object,System.Reflection.Emit.PropertyBuilder)">
      <summary>
            Given a custom attribute and property builder, adds an instance of custom attribute
            to the property builder
            </summary>
      <param name="customAttribute">
      </param>
      <param name="propBuilder">
      </param>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetAllProperties(System.Type)">
      <summary>
            Returns all properties on the given type, going up the inheritance
            hierarchy.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetMappedTypeFor(System.Type)">
      <summary>
            If the given type is concrete, returns the interface it was generated to support.
            If the given type is an interface, returns the concrete class generated to implement it.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetMappedTypeFor(System.String)">
      <summary>
            Returns the type mapped to the given name.
            </summary>
      <param name="typeName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance``1(System.Action{``0})">
      <summary>
            Calls the generic CreateInstance and performs the given
            action on the result.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance``1">
      <summary>
            Calls the non-generic CreateInstance and returns its result
            cast to T.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance(System.Type)">
      <summary>
            If the given type is an interface, finds its generated concrete
            implementation, instantiates it, and returns the result.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MonitoringConfig.SetEndpointSLA(NServiceBus.Configure,System.TimeSpan)">
      <summary>
            Sets the SLA for this endpoint
            </summary>
      <param name="config">
      </param>
      <param name="sla">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MonitoringConfig.EndpointSLA(NServiceBus.Configure)">
      <summary>
            Gets the current SLA for this endpoint
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MonitoringConfig.EnablePerformanceCounters(NServiceBus.Configure)">
      <summary>
            Enables the NServiceBus specific performance counters
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MonitoringConfig.PerformanceCountersEnabled(NServiceBus.Configure)">
      <summary>
            True id performance counters are enabled
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.Common.IContainer">
      <summary>
            Abstraction of a container.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Build(System.Type)">
      <summary>
            Returns an instantiation of the given type.
            </summary>
      <param name="typeToBuild">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.BuildChildContainer">
      <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.BuildAll(System.Type)">
      <summary>
            Returns a list of objects instantiated because their type is compatible
            with the given type.
            </summary>
      <param name="typeToBuild">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Configure(System.Type,NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the call model of the given component type.
            </summary>
      <param name="component">Type to be configured</param>
      <param name="dependencyLifecycle">The desired lifecycle for this type</param>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Configure``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the call model of the given component type using a <see cref="T:System.Func`1" />.
            </summary>
      <typeparam name="T">Type to be configured</typeparam>
      <param name="component">
        <see cref="T:System.Func`1" /> to use to configure.</param>
      <param name="dependencyLifecycle">The desired lifecycle for this type</param>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.ConfigureProperty(System.Type,System.String,System.Object)">
      <summary>
            Sets the value to be configured for the given property of the 
            given component type.
            </summary>
      <param name="component">
      </param>
      <param name="property">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.RegisterSingleton(System.Type,System.Object)">
      <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
      <param name="lookupType">
      </param>
      <param name="instance">
      </param>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.HasComponent(System.Type)">
      <summary>
            Indicates if a component of the given type has been configured.
            </summary>
      <param name="componentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder">
      <summary>
             Autofac implementation of IContainer.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.#ctor(Autofac.ILifetimeScope)">
      <summary>
             Instantiates the class utilizing the given container.
            </summary>
      <param name="container">
      </param>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.#ctor">
      <summary>
             Instantites the class with an empty Autofac container.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.Dispose">
      <summary>
            Disposes the container and all resources instantiated by the container.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.BuildChildContainer">
      <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.Build(System.Type)">
      <summary>
             Build an instance of a given type using Autofac.
            </summary>
      <param name="typeToBuild">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.BuildAll(System.Type)">
      <summary>
             Build all instances of a given type using Autofac.
            </summary>
      <param name="typeToBuild">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.ConfigureProperty(System.Type,System.String,System.Object)">
      <summary>
             Configure the value of a named component property.
            </summary>
      <param name="component">
      </param>
      <param name="property">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.RegisterSingleton(System.Type,System.Object)">
      <summary>
             Register a singleton instance of a dependency within Autofac.
            </summary>
      <param name="lookupType">
      </param>
      <param name="instance">
      </param>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.SetPropertyValue(System.Object,System.String,System.Object)">
      <summary>
             Set a property value on an instance using reflection
            </summary>
      <param name="instance">
      </param>
      <param name="propertyName">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.IBuilder">
      <summary>
            Used to instantiate types, so that all configured dependencies
            and property values are set.
            An abstraction on top of dependency injection frameworks.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.Build(System.Type)">
      <summary>
            Creates an instance of the given type, injecting it with all defined dependencies.
            </summary>
      <param name="typeToBuild">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.CreateChildBuilder">
      <summary>
            Creates an instance of a child builder which is used to facilitate deterministic
            disposal of all resources created by the child builder.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.Build``1">
      <summary>
            Creates an instance of the given type, injecting it with all defined dependencies.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAll``1">
      <summary>
            For each type that is compatible with T, an instance is created with all dependencies injected, and yeilded to the caller.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAll(System.Type)">
      <summary>
            For each type that is compatible with the given type, an instance is created with all dependencies injected.
            </summary>
      <param name="typeToBuild">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAndDispatch(System.Type,System.Action{System.Object})">
      <summary>
            Builds an instance of the defined type injecting it with all defined dependencies
            and invokes the given action on the instance.
            </summary>
      <param name="typeToBuild">
      </param>
      <param name="action">
      </param>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.IConfigureComponents">
      <summary>
            Used to configure components in the container.
            Should primarily be used at startup/initialization time.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent(System.Type,NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the given type. Can be used to configure all kinds of properties.
            </summary>
      <param name="concreteComponent">
      </param>
      <param name="dependencyLifecycle">Defines lifecyle sematnics for the given type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="dependencyLifecycle">Defines lifecyle sematnics for the given type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
      <typeparam name="T">Type to configure</typeparam>
      <param name="componentFactory">Factory method that returns the given type</param>
      <param name="dependencyLifecycle">Defines lifecyle sematnics for the given type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(System.Func{NServiceBus.ObjectBuilder.IBuilder,``0},NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="componentFactory">
      </param>
      <param name="dependencyLifecycle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent(System.Type,NServiceBus.ObjectBuilder.ComponentCallModelEnum)">
      <summary>
            Configures the given type. Can be used to configure all kinds of properties. This method is deprecated use the signature
            that contains the DependecyLifecyle enum instead
            </summary>
      <param name="concreteComponent">
      </param>
      <param name="callModel">Defines whether the type should have singleton or single call sematnics.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(NServiceBus.ObjectBuilder.ComponentCallModelEnum)">
      <summary>
            Configures the given type, allowing to fluently configure properties. This method is deprecated use the signature
            that contains the DependecyLifecyle enum instead
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="callModel">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
      <summary>
            Configures the given property of the given type to be injected with the given value.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="property">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureProperty``1(System.String,System.Object)">
      <summary>
            Configures the given property of the given type to be injected with the given value.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="property">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.RegisterSingleton(System.Type,System.Object)">
      <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
      <param name="lookupType">
      </param>
      <param name="instance">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.RegisterSingleton``1(System.Object)">
      <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="instance">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.HasComponent``1">
      <summary>
            Indicates if a component of the given type has been configured.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.HasComponent(System.Type)">
      <summary>
            Indicates if a component of the given type has been configured.
            </summary>
      <param name="componentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder">
      <summary>
            Implementation of IBuilder, serving as a facade that container specific implementations
            of IContainer should run behind.
            </summary>
    </member>
    <member name="P:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Container">
      <summary>
            The container that will be used to create objects and configure components.
            </summary>
    </member>
    <member name="P:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Synchronized">
      <summary>
            Used for multi-threaded rich clients to build and dispatch
            in a synchronization domain.
            </summary>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.IComponentConfig">
      <summary>
            Used to configure the values to be set for the various
            properties on a component.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IComponentConfig.ConfigureProperty(System.String,System.Object)">
      <summary>
            Configures the value of the named property of the component.
            </summary>
      <param name="name">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.IComponentConfig`1">
      <summary>
            Strongly typed version of IComponentConfig
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IComponentConfig`1.ConfigureProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
      <summary>
            Configures the value of the property like so:
            ConfigureProperty(o =&gt; o.Property, value);
            </summary>
      <param name="property">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.Common.Config.ConfigureCommon">
      <summary>
            Utility configuration class for implementers of IContainer.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.Config.ConfigureCommon.With(NServiceBus.Configure,NServiceBus.ObjectBuilder.Common.IContainer)">
      <summary>
            Sets the Builder property of the given Configure object to an instance of CommonObjectBuilder.
            Then, the given builder object is inserted in the relevant place of the builder chain.
            Finally, the given actions are performed on the instance of CommonObjectBuilder.
            </summary>
      <param name="config">
      </param>
      <param name="container">
      </param>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.Common.Config.ConfigureContainer">
      <summary>
             Extension methods to specify a custom container type and/or instance
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.Config.ConfigureContainer.UsingContainer``1(NServiceBus.Configure)">
      <summary>
             Provide a custom IContainer type for use by NServiceBus
            </summary>
      <param name="configure">Configuration instance</param>
      <typeparam name="T">IContainer type</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.Config.ConfigureContainer.UsingContainer``1(NServiceBus.Configure,``0)">
      <summary>
             Provide a custom IContainer instance for use by NServiceBus
            </summary>
      <param name="configure">Configuration instance</param>
      <param name="container">IContainer instance</param>
      <typeparam name="T">IContainer type</typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.Common.SynchronizedInvoker">
      <summary>
            Invokes methods and actions within a synchronization domain.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.SynchronizedInvoker.BuildAndDispatch(System.Type,System.Action{System.Object})">
      <summary>
            Uses the container to create the given type and then calls the given
            action on the object created.
            </summary>
      <param name="typeToBuild">
      </param>
      <param name="action">
      </param>
    </member>
    <member name="P:NServiceBus.ObjectBuilder.Common.SynchronizedInvoker.Container">
      <summary>
            The container used to instantiate components.
            </summary>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.ComponentCallModelEnum">
      <summary>
            Represent the various call models for a component.
            </summary>
    </member>
    <member name="F:NServiceBus.ObjectBuilder.ComponentCallModelEnum.None">
      <summary>
            Accept the default call model of the underlying technology. This roughly maps to the
            InstancePerUnitOfWork lifecycle in our new lifecycle definitions
            </summary>
    </member>
    <member name="F:NServiceBus.ObjectBuilder.ComponentCallModelEnum.Singleton">
      <summary>
            Only one instance of the component will ever be called. This maps to the
            SingleInstance lifecycle in our new lifecycle definitions
            </summary>
    </member>
    <member name="F:NServiceBus.ObjectBuilder.ComponentCallModelEnum.Singlecall">
      <summary>
            Each call on the component will be performed on a new instance.  This maps to the
            InstancePerCall lifecycle in our new lifecycle definitions
            </summary>
    </member>
    <member name="T:NServiceBus.Persistence.Raven.RavenConventions">
      <summary>
            NServiceBus default RavenDB conventions.
            </summary>
    </member>
    <member name="M:NServiceBus.Persistence.Raven.RavenConventions.FindTypeTagName(System.Type)">
      <summary>
            NServiceBus default RavenDB FindTypeTagName convention
            </summary>
      <param name="t">The type to apply convention.</param>
      <returns>The name of the find type tag.</returns>
    </member>
    <member name="T:NServiceBus.UnitOfWork.IManageUnitsOfWork">
      <summary>
            Interface used by NServiceBus to manage units of work as a part of the
            message processing pipeline.
            </summary>
    </member>
    <member name="M:NServiceBus.UnitOfWork.IManageUnitsOfWork.Begin">
      <summary>
            Called before all message handlers and modules
            </summary>
    </member>
    <member name="M:NServiceBus.UnitOfWork.IManageUnitsOfWork.End(System.Exception)">
      <summary>
            Called after all message handlers and modules, if an error has occured the excption will be passed
            </summary>
    </member>
    <member name="T:NServiceBus.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:NServiceBus.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:NServiceBus.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:NServiceBus.Properties.Resources.complete">
      <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
    </member>
    <member name="P:NServiceBus.Properties.Resources.error">
      <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
    </member>
    <member name="P:NServiceBus.Properties.Resources.form_icon">
      <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
    </member>
    <member name="P:NServiceBus.Properties.Resources.logo">
      <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
    </member>
    <member name="P:NServiceBus.Properties.Resources.String">
      <summary>
              Looks up a localized string similar to Import-Module .\tools\psake\psake.psm1.
            </summary>
    </member>
    <member name="P:NServiceBus.Properties.Resources.String1">
      <summary>
              Looks up a localized string similar to Invoke-psake .\default.ps1 -taskList @("ReleaseNServiceBus") -properties @{ProductVersion="3.3";PatchVersion="7";PreRelease="-beta";buildConfiguration="Release";}.
            </summary>
    </member>
    <member name="T:Rhino.Licensing.ILicensingService">
      <summary>
            Service contract of the licensing server.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.ILicensingService.LeaseLicense(System.String,System.String,System.Guid)">
      <summary>
            Issues a float license for the user.
            </summary>
      <param name="machine">machine name</param>
      <param name="user">user name</param>
      <param name="id">Id of the license holder</param>
      <returns>
      </returns>
    </member>
    <member name="T:Rhino.Licensing.InvalidationType">
      <summary>
            InvalidationType
            </summary>
    </member>
    <member name="F:Rhino.Licensing.InvalidationType.CannotGetNewLicense">
      <summary>
            Can not create a new license
            </summary>
    </member>
    <member name="F:Rhino.Licensing.InvalidationType.TimeExpired">
      <summary>
            License is expired
            </summary>
    </member>
    <member name="T:Rhino.Licensing.ISubscriptionLicensingService">
      <summary>
            Service contract of subscription server.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.ISubscriptionLicensingService.LeaseLicense(System.String)">
      <summary>
            Issues a leased license
            </summary>
      <param name="previousLicense">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Rhino.Licensing.RhinoLicensingException">
      <summary>
            Base class for all licensing exceptions.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="message">error message</param>
    </member>
    <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="message">error message</param>
      <param name="inner">inner exception</param>
    </member>
    <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="info">serialization information</param>
      <param name="context">streaming context</param>
    </member>
    <member name="T:Rhino.Licensing.LicenseExpiredException">
      <summary>
             Thrown when license is found but is past it's expiration date
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="message">error message</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="message">error message</param>
      <param name="inner">inner exception</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="info">serialization information</param>
      <param name="context">streaming context</param>
    </member>
    <member name="T:Rhino.Licensing.LicenseFileNotFoundException">
      <summary>
            Thrown when a valid license file can not be
            found on the client machine.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException" /></summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException" /></summary>
      <param name="message">error message</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException" /></summary>
      <param name="message">error message</param>
      <param name="inner">inner exception</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException" /></summary>
      <param name="info">serialization information</param>
      <param name="context">streaming context</param>
    </member>
    <member name="T:Rhino.Licensing.LicenseNotFoundException">
      <summary>
            Thrown when suitable license is not found.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException" />.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException" />.
            </summary>
      <param name="message">error message</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException" />.
            </summary>
      <param name="message">error message</param>
      <param name="inner">inner exception</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException" />.
            </summary>
      <param name="info">serialization information</param>
      <param name="context">steaming context</param>
    </member>
    <member name="T:Rhino.Licensing.LicenseType">
      <summary>
            License Type
            </summary>
    </member>
    <member name="F:Rhino.Licensing.LicenseType.None">
      <summary>
            No type specified
            </summary>
    </member>
    <member name="F:Rhino.Licensing.LicenseType.Trial">
      <summary>
            For trial use
            </summary>
    </member>
    <member name="F:Rhino.Licensing.LicenseType.Standard">
      <summary>
            Standard license
            </summary>
    </member>
    <member name="F:Rhino.Licensing.LicenseType.Personal">
      <summary>
            For personal use
            </summary>
    </member>
    <member name="T:Rhino.Licensing.LicenseValidator">
      <summary>
            License validator validates a license file
            that can be located on disk.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseValidator.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseValidator" />.
            </summary>
      <param name="publicKey">public key</param>
      <param name="licensePath">path to license file</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseValidator.AssertValidLicense">
      <summary>
            Validates loaded license
            </summary>
    </member>
    <member name="P:Rhino.Licensing.LicenseValidator.License">
      <summary>
            Gets or Sets the license content
            </summary>
    </member>
    <member name="T:Rhino.Licensing.StringLicenseValidator">
      <summary>
            Validates content of a license file
            </summary>
    </member>
    <member name="M:Rhino.Licensing.StringLicenseValidator.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.StringLicenseValidator" /></summary>
      <param name="publicKey">public key</param>
      <param name="license">license content</param>
    </member>
    <member name="P:Rhino.Licensing.StringLicenseValidator.License">
      <summary>
            License content
            </summary>
    </member>
    <member name="T:NServiceBus.Persistence.InMemory.SagaPersister.InMemorySagaPersister">
      <summary>
            In memory implementation of ISagaPersister for quick development.
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.AutoCorrelateSagaOnReplyMutator">
      <summary>
            Promotes the saga id and type headers on replies(bus.Reply|bus.Return) so that the saga can be 
            correlated without the user having to add mappings for it. This replaces the ISagaMessage feature
            </summary>
    </member>
    <member name="M:NServiceBus.Sagas.AutoCorrelateSagaOnReplyMutator.MutateIncoming(NServiceBus.TransportMessage)">
      <summary>
            Stores the original saga id and type of the incoming message
            </summary>
      <param name="transportMessage">
      </param>
    </member>
    <member name="M:NServiceBus.Sagas.AutoCorrelateSagaOnReplyMutator.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
      <summary>
            Promotes the id and type of the originating saga if the is a reply
            </summary>
      <param name="messages">
      </param>
      <param name="transportMessage">
      </param>
    </member>
    <member name="T:NServiceBus.Sagas.ConfigureHowToFindSagaWithMessageDispatcher">
      <summary>
            Class used to bridge the dependency between Saga{T} in NServiceBus.dll and
            the Configure class found in this project in NServiceBus.Core.dll.
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.ConfigureTimeoutAsSystemMessages">
      <summary>
            Defining <see cref="T:NServiceBus.Saga.IHandleTimeouts`1" /> as valid system messages
            </summary>
    </member>
    <member name="M:NServiceBus.Sagas.ConfigureTimeoutAsSystemMessages.Init">
      <summary>
            Defining <see cref="T:NServiceBus.Saga.IHandleTimeouts`1" /> as valid system messages
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.Finders.HeaderSagaIdFinder`1">
      <summary>
            Finds sagas based on the sagaid header
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Sagas.Finders.HeaderSagaIdFinder`1.FindBy(System.Object)">
      <summary>
            Returns the saga 
            </summary>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Sagas.Finders.HeaderSagaIdFinder`1.SagaPersister">
      <summary>
            Injected persister
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.Finders.NullSagaFinder`1">
      <summary>
            Catch-all finder to return null - so that we can later check
            for whether a new saga should be created.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Sagas.Finders.NullSagaFinder`1.FindBy(System.Object)">
      <summary>
            Returns null.
            </summary>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Sagas.Finders.PropertySagaFinder`2">
      <summary>
            Finds the given type of saga by looking it up based on the given property.
            </summary>
      <typeparam name="TSaga">
      </typeparam>
      <typeparam name="TMessage">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Sagas.Finders.PropertySagaFinder`2.FindBy(`1)">
      <summary>
            Uses the saga persister to find the saga.
            </summary>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Sagas.Finders.PropertySagaFinder`2.SagaPersister">
      <summary>
            Injected persister
            </summary>
    </member>
    <member name="P:NServiceBus.Sagas.Finders.PropertySagaFinder`2.SagaProperty">
      <summary>
            Property of the saga that will be used for lookup.
            </summary>
    </member>
    <member name="P:NServiceBus.Sagas.Finders.PropertySagaFinder`2.MessageProperty">
      <summary>
            Property of the message whose value will be used for the lookup.
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.OriginatingSagaHeaderMutator">
      <summary>
            Adds the originating saga headers to outgoing messages
            </summary>
    </member>
    <member name="M:NServiceBus.Sagas.OriginatingSagaHeaderMutator.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
      <summary>
            Set the header if we run in the context of a saga
            </summary>
      <param name="messages">
      </param>
      <param name="transportMessage">
      </param>
    </member>
    <member name="T:NServiceBus.Sagas.ReplyingToNullOriginatorDispatcher">
      <summary>
            Class used to bridge the dependency between Saga{T} in NServiceBus.dll and
            which doesn't have access to Common.Logging and the level of logging
            known in the Configure class found in this project in NServiceBus.Core.dll.
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.SagaContext">
      <summary>
            Context class that holds the current saga beeing processed
            </summary>
    </member>
    <member name="F:NServiceBus.Sagas.SagaContext.Current">
      <summary>
            The saga
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.IMessageDispatcherFactory">
      <summary>
            Returns the action to dispatch the given message to the handler
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.IMessageDispatcherFactory.GetDispatcher(System.Type,NServiceBus.ObjectBuilder.IBuilder,System.Object)">
      <summary>
            Returns the action that will dipatch this message
            </summary>
      <param name="messageHandlerType">
      </param>
      <param name="builder">
      </param>
      <param name="toHandle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.IMessageDispatcherFactory.CanDispatch(System.Type)">
      <summary>
            Returns true if the factory is able to dispatch this type
            </summary>
      <param name="handler">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Sagas.SagaDispatcherFactory">
      <summary>
            Dispatch factory that can dispatch messages to sagas
            </summary>
    </member>
    <member name="M:NServiceBus.Sagas.SagaDispatcherFactory.GetDispatcher(System.Type,NServiceBus.ObjectBuilder.IBuilder,System.Object)">
      <summary>
            Get Dispatcher
            </summary>
      <param name="messageHandlerType">Type of the message Handler</param>
      <param name="builder">Builder</param>
      <param name="message">Message</param>
      <returns>Saga Dispatcher</returns>
    </member>
    <member name="M:NServiceBus.Sagas.SagaDispatcherFactory.CanDispatch(System.Type)">
      <summary>
            Dispatcher factory filters on handler type
            </summary>
      <param name="handler">handler</param>
      <returns>returns true if can be dispatched</returns>
    </member>
    <member name="M:NServiceBus.Sagas.SagaDispatcherFactory.IsTimeoutMessage(System.Object)">
      <summary>
            True if this is a timeout message
            </summary>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Sagas.SagaDispatcherFactory.Persister">
      <summary>
            Get or Set Saga Persister
            </summary>
    </member>
    <member name="P:NServiceBus.Sagas.SagaDispatcherFactory.Bus">
      <summary>
            The unicast bus
            </summary>
    </member>
    <member name="P:NServiceBus.Sagas.SagaDispatcherFactory.MessageDeferrer">
      <summary>
            A way to request the transport to defer the processing of a message
            </summary>
    </member>
    <member name="T:NServiceBus.Satellites.SatelitesQueuesCreator">
      <summary>
            Responsible to create a queue, using the registered ICreateQueues for each satellite
            </summary>
    </member>
    <member name="M:NServiceBus.Satellites.SatelitesQueuesCreator.Install(System.String)">
      <summary>
            Performs the installation providing permission for the given user.
            </summary>
      <param name="identity">The user for whom permissions will be given.</param>
    </member>
    <member name="T:NServiceBus.Serializers.Binary.BinaryMessageSerializer">
      <summary>
            Binary implementation of the message serializer.
            </summary>
    </member>
    <member name="M:NServiceBus.Serializers.Binary.BinaryMessageSerializer.Serialize(System.Object[],System.IO.Stream)">
      <summary>
            Serializes the given set of messages into the given stream.
            </summary>
      <param name="messages">Messages to serialize.</param>
      <param name="stream">Stream for <paramref name="messages" /> to be serialized into.</param>
    </member>
    <member name="M:NServiceBus.Serializers.Binary.BinaryMessageSerializer.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
      <summary>
            Deserializes from the given stream a set of messages.
            </summary>
      <param name="stream">Stream that contains messages.</param>
      <param name="messageTypes">The list of message types to deserialize. If null the types must be inferred from the serialized data.</param>
      <returns>Deserialized messages.</returns>
    </member>
    <member name="P:NServiceBus.Serializers.Binary.BinaryMessageSerializer.ContentType">
      <summary>
            Gets the content type into which this serializer serializes the content to 
            </summary>
    </member>
    <member name="T:NServiceBus.Serializers.Binary.SimpleMessageMapper">
      <summary>
            Simple implementation of message mapper for binary serialization.
            </summary>
    </member>
    <member name="T:NServiceBus.Serializers.Json.JsonMessageSerializerBase">
      <summary>
            JSON and BSON base class for <see cref="T:NServiceBus.Serialization.IMessageSerializer" />.
            </summary>
    </member>
    <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializerBase.Serialize(System.Object[],System.IO.Stream)">
      <summary>
            Serializes the given set of messages into the given stream.
            </summary>
      <param name="messages">Messages to serialize.</param>
      <param name="stream">Stream for <paramref name="messages" /> to be serialized into.</param>
    </member>
    <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializerBase.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
      <summary>
            Deserializes from the given stream a set of messages.
            </summary>
      <param name="stream">Stream that contains messages.</param>
      <param name="messageTypes">The list of message types to deserialize. If null the types must be inferred from the serialized data.</param>
      <returns>Deserialized messages.</returns>
    </member>
    <member name="P:NServiceBus.Serializers.Json.JsonMessageSerializerBase.SkipArrayWrappingForSingleMessages">
      <summary>
            Removes the wrapping array if serializing a single message 
            </summary>
    </member>
    <member name="P:NServiceBus.Serializers.Json.JsonMessageSerializerBase.ContentType">
      <summary>
            Gets the content type into which this serializer serializes the content to 
            </summary>
    </member>
    <member name="T:NServiceBus.Serializers.Json.BsonMessageSerializer">
      <summary>
            BSON message serializer.
            </summary>
    </member>
    <member name="M:NServiceBus.Serializers.Json.BsonMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper)">
      <summary>
            Constructor
            </summary>
      <param name="messageMapper">
      </param>
    </member>
    <member name="T:NServiceBus.Serializers.Json.JsonMessageSerializer">
      <summary>
            JSON message serializer.
            </summary>
    </member>
    <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper)">
      <summary>
            Constructor.
            </summary>
      <param name="messageMapper">
      </param>
    </member>
    <member name="T:NServiceBus.Serializers.XML.Config.MessageTypesInitializer">
      <summary>
            Initializes the mapper and the serializer with the found message types
            </summary>
    </member>
    <member name="T:NServiceBus.Serializers.XML.XmlMessageSerializer">
      <summary>
            Implementation of the message serializer over XML supporting interface-based messages.
            </summary>
    </member>
    <member name="F:NServiceBus.Serializers.XML.XmlMessageSerializer.namespacesToPrefix">
      <summary>
            Used for serialization
            </summary>
    </member>
    <member name="F:NServiceBus.Serializers.XML.XmlMessageSerializer.prefixesToNamespaces">
      <summary>
            Used for deserialization
            </summary>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.InitType(System.Type)">
      <summary>
            Scans the given type storing maps to fields and properties to save on reflection at runtime.
            </summary>
      <param name="t">
      </param>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.GetAllPropertiesForType(System.Type,System.Boolean)">
      <summary>
            Gets a PropertyInfo for each property of the given type.
            </summary>
      <param name="t">
      </param>
      <param name="isKeyValuePair">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
      <summary>
            Deserializes from the given stream a set of messages.
            </summary>
      <param name="stream">Stream that contains messages.</param>
      <param name="messageTypesToDeserialize">The list of message types to deserialize. If null the types must be inferred from the serialized data.</param>
      <returns>Deserialized messages.</returns>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Serialize(System.Object[],System.IO.Stream)">
      <summary>
            Serializes the given messages to the given stream.
            </summary>
      <param name="messages">
      </param>
      <param name="stream">
      </param>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper)">
      <summary>
            Initializes an instace of a NServiceBus.Serializers.XML.XmlMessageSerializer
            </summary>
      <param name="mapper">Message Mapper</param>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initialized the serializer with the given message types
            </summary>
      <param name="types">
      </param>
    </member>
    <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.Namespace">
      <summary>
            The namespace to place in outgoing XML.
            </summary>
    </member>
    <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.SanitizeInput">
      <summary>
            If true, then the serializer will use a sanitizing stream to skip invalid characters from the stream before parsing
            </summary>
    </member>
    <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.SkipWrappingElementForSingleMessages">
      <summary>
            Removes the wrapping "<Messages />" element if serializing a single message 
            </summary>
    </member>
    <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.SkipWrappingRawXml">
      <summary>
            Removes the wrapping of properties containing XDocument or XElement with property name as root element
            </summary>
    </member>
    <member name="T:NServiceBus.Serializers.XML.XmlSanitizingStream">
      <summary>
            A StreamReader that excludes XML-illegal characters while reading.
            </summary>
    </member>
    <member name="F:NServiceBus.Serializers.XML.XmlSanitizingStream.EOF">
      <summary>
            The charactet that denotes the end of a file has been reached.
            </summary>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlSanitizingStream.#ctor(System.IO.Stream)">
      <summary>Create an instance of XmlSanitizingStream.</summary>
      <param name="streamToSanitize">
            The stream to sanitize of illegal XML characters.
            </param>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlSanitizingStream.IsLegalXmlChar(System.String,System.Int32)">
      <summary>
            Get whether an integer represents a legal XML 1.0 or 1.1 character. See
            the specification at w3.org for these characters.
            </summary>
      <param name="xmlVersion">
            The version number as a string. Use "1.0" for XML 1.0 character
            validation, and use "1.1" for XML 1.1 character validation.
            </param>
      <param name="character">
      </param>
      <returns>
        <c>true</c> if is a legal xml chracter.</returns>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlSanitizingStream.IsLegalXmlChar(System.Int32)">
      <summary>
            Get whether an integer represents a legal XML 1.0 character. See the  
            specification at w3.org for these characters.
            </summary>
    </member>
    <member name="M:NServiceBus.ServiceAsyncResult.#ctor(System.Object)">
      <summary>
            Creates a new object storing the given state.
            </summary>
      <param name="state">
      </param>
    </member>
    <member name="M:NServiceBus.ServiceAsyncResult.Complete(NServiceBus.CompletionResult)">
      <summary>
            Stores the given completion result from the server, 
            releases any blocked threads
            </summary>
    </member>
    <member name="P:NServiceBus.ServiceAsyncResult.AsyncState">
      <summary>
            Returns the original state passed into the Begin method.
            </summary>
    </member>
    <member name="P:NServiceBus.ServiceAsyncResult.AsyncWaitHandle">
      <summary>
            Returns a handle suitable for blocking threads.
            </summary>
    </member>
    <member name="P:NServiceBus.ServiceAsyncResult.CompletedSynchronously">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:NServiceBus.ServiceAsyncResult.Result">
      <summary>
            Contains the completion result from the server.
            </summary>
    </member>
    <member name="P:NServiceBus.ServiceAsyncResult.IsCompleted">
      <summary>
            Returns if the operation has completed.
            </summary>
    </member>
    <member name="T:NServiceBus.SetLoggingLibrary">
      <summary>
            Class containing extension method to allow users to use Log4Net for logging
            </summary>
    </member>
    <member name="M:NServiceBus.SetLoggingLibrary.Log4Net(NServiceBus.Configure)">
      <summary>
            Use Log4Net for logging with the Console Appender at the level of All.
            </summary>
    </member>
    <member name="M:NServiceBus.SetLoggingLibrary.Log4Net``1(NServiceBus.Configure,System.Action{``0})">
      <summary>
            Use Log4Net for logging with your own appender type, initializing it as necessary.
            Will call 'ActivateOptions()' on the appender for you.
            If you don't specify a threshold, will default to Level.Debug.
            If you don't specify layout, uses this as a default: %d [%t] %-5p %c [%x] &lt;%X{auth}&gt; - %m%n
            </summary>
    </member>
    <member name="M:NServiceBus.SetLoggingLibrary.Log4Net(NServiceBus.Configure,System.Object)">
      <summary>
            Use Log4Net for logging passing in a pre-configured appender.
            Will call 'ActivateOptions()' on the appender for you.
            If you don't specify a threshold, will default to Level.Debug.
            If you don't specify layout, uses this as a default: %d [%t] %-5p %c [%x] &lt;%X{auth}&gt; - %m%n
            </summary>
    </member>
    <member name="M:NServiceBus.SetLoggingLibrary.Log4Net">
      <summary>
            Configure NServiceBus to use Log4Net without setting a specific appender.
            </summary>
    </member>
    <member name="M:NServiceBus.SetLoggingLibrary.Log4Net(System.Action)">
      <summary>
            Configure NServiceBus to use Log4Net and specify your own configuration.
            Use 'log4net.Config.XmlConfigurator.Configure' as the parameter to get the configuration from the app.config.
            </summary>
    </member>
    <member name="T:NServiceBus.Settings.Endpoint">
      <summary>
                Configuration class for Endpoint settings.
            </summary>
    </member>
    <member name="T:NServiceBus.Settings.Endpoint.EndpointAdvancedSettings">
      <summary>
        <see cref="T:NServiceBus.Settings.Endpoint" /> advance settings.
            </summary>
    </member>
    <member name="M:NServiceBus.Settings.Endpoint.EndpointAdvancedSettings.EnableDurableMessages">
      <summary>
            Configures endpoint with messages guaranteed to be delivered in the event of a computer failure or network problem.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Settings.Endpoint.EndpointAdvancedSettings.DisableDurableMessages">
      <summary>
            Configures endpoint with messages that are not guaranteed to be delivered in the event of a computer failure or network problem.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Settings.Endpoint.AsVolatile">
      <summary>
                Tells the endpoint to not enforce durability (using InMemory storages, non durable messages, ...).
            </summary>
    </member>
    <member name="M:NServiceBus.Settings.Endpoint.AsSendOnly">
      <summary>
                Configures this endpoint as a send only endpoint.
            </summary>
      <remarks>
                Use this in endpoints whose only purpose is sending messages, websites are often a good example of send only endpoints.
            </remarks>
    </member>
    <member name="M:NServiceBus.Settings.Endpoint.Advanced(System.Action{NServiceBus.Settings.Endpoint.EndpointAdvancedSettings})">
      <summary>
        <see cref="T:NServiceBus.Settings.Endpoint" /> advance settings.
            </summary>
      <param name="action">A lambda to set the advance settings.</param>
    </member>
    <member name="T:NServiceBus.Settings.TransactionSettings">
      <summary>
                Configuration class for Transaction settings.
            </summary>
    </member>
    <member name="T:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings">
      <summary>
        <see cref="T:NServiceBus.Settings.TransactionSettings" /> advance settings.
            </summary>
    </member>
    <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.#ctor">
      <summary>
                Default constructor.
            </summary>
    </member>
    <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.IsolationLevel(System.Transactions.IsolationLevel)">
      <summary>
               Sets the isolation level of the transaction.
            </summary>
      <param name="isolationLevel">A <see cref="T:System.Transactions.IsolationLevel" /> enumeration that specifies the isolation level of the transaction.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.DisableDistributedTransactions">
      <summary>
            Configures the <see cref="T:NServiceBus.Unicast.Transport.ITransport" /> not to enlist in Distributed Transactions.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.EnableDistributedTransactions">
      <summary>
            Configures the <see cref="T:NServiceBus.Unicast.Transport.ITransport" /> to enlist in Distributed Transactions.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.DoNotWrapHandlersExecutionInATransactionScope">
      <summary>
            Configures this endpoint so that <see cref="T:NServiceBus.IHandleMessages`1">handlers</see> are not wrapped in a <see cref="T:System.Transactions.TransactionScope" />.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.WrapHandlersExecutionInATransactionScope">
      <summary>
            Configures this endpoint so that <see cref="T:NServiceBus.IHandleMessages`1">handlers</see> not wrapped in a <see cref="T:System.Transactions.TransactionScope" />.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.DefaultTimeout(System.TimeSpan)">
      <summary>
            Sets the default timeout period for the transaction.
            </summary>
      <param name="defaultTimeout">A <see cref="T:System.TimeSpan" /> value that specifies the default timeout period for the transaction.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Settings.TransactionSettings.Enable">
      <summary>
                Configures this endpoint to use transactions.
            </summary>
      <remarks>
                A transactional endpoint means that we don't remove a message from the queue until it has been successfully processed.
            </remarks>
    </member>
    <member name="M:NServiceBus.Settings.TransactionSettings.Disable">
      <summary>
                Configures this endpoint to not use transactions.
            </summary>
      <remarks>
                Turning transactions off means that the endpoint won't do retries and messages are lost on exceptions.
            </remarks>
    </member>
    <member name="M:NServiceBus.Settings.TransactionSettings.Advanced(System.Action{NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings})">
      <summary>
        <see cref="T:NServiceBus.Settings.TransactionSettings" /> advance settings.
            </summary>
      <param name="action">A lambda to set the advance settings.</param>
    </member>
    <member name="T:NServiceBus.SyncConfig">
      <summary>
            Class for holding extension methods to NServiceBus.Configure
            </summary>
    </member>
    <member name="M:NServiceBus.SyncConfig.MarkConfigured">
      <summary>
            Notify that configuration of ConfigureCommon occurred.
            </summary>
    </member>
    <member name="M:NServiceBus.SyncConfig.Synchronization(NServiceBus.Configure)">
      <summary>
            Use this for multi-threaded rich clients. Specifies that message processing
            will occur within a synchronization domain (make sure that you only have one).
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.SyncConfig.Synchronize">
      <summary>
            Indicates whether the synchronization has been requested.
            </summary>
    </member>
    <member name="T:System.Threading.Tasks.Schedulers.MTATaskScheduler">
      <summary>Provides a scheduler that uses MTA threads.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Schedulers.MTATaskScheduler._tasks">
      <summary>Stores the queued tasks to be executed by our pool of STA threads.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Schedulers.MTATaskScheduler._threads">
      <summary>The MTA threads used by the scheduler.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Schedulers.MTATaskScheduler.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the MTATaskScheduler class with the specified concurrency level.</summary>
      <param name="numberOfThreads">The number of threads that should be created and used by this scheduler.</param>
      <param name="nameFormat">The template name form to use to name threads.</param>
    </member>
    <member name="M:System.Threading.Tasks.Schedulers.MTATaskScheduler.QueueTask(System.Threading.Tasks.Task)">
      <summary>Queues a Task to be executed by this scheduler.</summary>
      <param name="task">The task to be executed.</param>
    </member>
    <member name="M:System.Threading.Tasks.Schedulers.MTATaskScheduler.GetScheduledTasks">
      <summary>Provides a list of the scheduled tasks for the debugger to consume.</summary>
      <returns>An enumerable of all tasks currently scheduled.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Schedulers.MTATaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>Determines whether a Task may be inlined.</summary>
      <param name="task">The task to be executed.</param>
      <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
      <returns>true if the task was successfully inlined; otherwise, false.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Schedulers.MTATaskScheduler.Dispose">
      <summary>
            Cleans up the scheduler by indicating that no more tasks will be queued.
            This method blocks until all threads successfully shutdown.
            </summary>
    </member>
    <member name="P:System.Threading.Tasks.Schedulers.MTATaskScheduler.MaximumConcurrencyLevel">
      <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
    </member>
    <member name="T:NServiceBus.Timeout.Core.IManageTimeouts">
      <summary>
            Manages NSB timeouts.
            </summary>
      <remarks>Implementors must be thread-safe.</remarks>
    </member>
    <member name="M:NServiceBus.Timeout.Core.IManageTimeouts.PushTimeout(NServiceBus.Timeout.Core.TimeoutData)">
      <summary>
            Adds a new timeout to be monitored.
            </summary>
      <param name="timeout">
        <see cref="T:NServiceBus.Timeout.Core.TimeoutData" /> to be added.</param>
    </member>
    <member name="M:NServiceBus.Timeout.Core.IManageTimeouts.RemoveTimeout(System.String)">
      <summary>
            Removes a timeout from being monitored.
            </summary>
      <param name="timeoutId">The timeout id to be removed.</param>
    </member>
    <member name="M:NServiceBus.Timeout.Core.IManageTimeouts.RemoveTimeoutBy(System.Guid)">
      <summary>
            Clears the timeout for the given <paramref name="sagaId" />.
            </summary>
      <param name="sagaId">The sagaId to be removed</param>
    </member>
    <member name="E:NServiceBus.Timeout.Core.IManageTimeouts.TimeoutPushed">
      <summary>
            Fires when a timeout is added.
            </summary>
    </member>
    <member name="T:NServiceBus.Timeout.Core.DefaultTimeoutManager">
      <summary>
            Default implementation for <see cref="T:NServiceBus.Timeout.Core.IManageTimeouts" /></summary>
    </member>
    <member name="M:NServiceBus.Timeout.Core.DefaultTimeoutManager.PushTimeout(NServiceBus.Timeout.Core.TimeoutData)">
      <summary>
            Adds a new timeout to be monitored.
            </summary>
      <param name="timeout">
        <see cref="T:NServiceBus.Timeout.Core.TimeoutData" /> to be added.</param>
    </member>
    <member name="M:NServiceBus.Timeout.Core.DefaultTimeoutManager.RemoveTimeout(System.String)">
      <summary>
            Removes a timeout from being monitored.
            </summary>
      <param name="timeoutId">The timeout id to be removed.</param>
    </member>
    <member name="M:NServiceBus.Timeout.Core.DefaultTimeoutManager.RemoveTimeoutBy(System.Guid)">
      <summary>
            Clears the timeout for the given <paramref name="sagaId" />.
            </summary>
      <param name="sagaId">The sagaId to be removed</param>
    </member>
    <member name="P:NServiceBus.Timeout.Core.DefaultTimeoutManager.TimeoutsPersister">
      <summary>
            The timeout persister.
            </summary>
    </member>
    <member name="P:NServiceBus.Timeout.Core.DefaultTimeoutManager.MessageSender">
      <summary>
            Messages sender.
            </summary>
    </member>
    <member name="E:NServiceBus.Timeout.Core.DefaultTimeoutManager.TimeoutPushed">
      <summary>
            Fires when a timeout is added.
            </summary>
    </member>
    <member name="T:NServiceBus.Timeout.Core.IPersistTimeouts">
      <summary>
            Timeout persister contract.
            </summary>
    </member>
    <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.GetNextChunk(System.DateTime,System.DateTime@)">
      <summary>
            Retrieves the next range of timeouts that are due.
            </summary>
      <param name="startSlice">The time where to start retrieving the next slice, the slice should exclude this date.</param>
      <param name="nextTimeToRunQuery">Returns the next time we should query again.</param>
      <returns>Returns the next range of timeouts that are due.</returns>
    </member>
    <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.Add(NServiceBus.Timeout.Core.TimeoutData)">
      <summary>
            Adds a new timeout.
            </summary>
      <param name="timeout">Timeout data.</param>
    </member>
    <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.TryRemove(System.String,NServiceBus.Timeout.Core.TimeoutData@)">
      <summary>
            Removes the timeout if it hasn't been previously removed.
            </summary>
      <param name="timeoutId">The timeout id to remove.</param>
      <param name="timeoutData">The timeout data of the removed timeout.</param>
      <returns>
        <c>true</c> it the timeout was successfully removed.</returns>
    </member>
    <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.RemoveTimeoutBy(System.Guid)">
      <summary>
            Removes the time by saga id.
            </summary>
      <param name="sagaId">The saga id of the timeouts to remove.</param>
    </member>
    <member name="T:NServiceBus.Timeout.Core.TimeoutData">
      <summary>
            Holds timeout information.
            </summary>
    </member>
    <member name="F:NServiceBus.Timeout.Core.TimeoutData.OriginalReplyToAddress">
      <summary>
            Original ReplyTo address header.
            </summary>
    </member>
    <member name="M:NServiceBus.Timeout.Core.TimeoutData.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:NServiceBus.Timeout.Core.TimeoutData.ToTransportMessage">
      <summary>
            Transforms the timeout to a <see cref="T:NServiceBus.TransportMessage" />.
            </summary>
      <returns>Returns a <see cref="T:NServiceBus.TransportMessage" />.</returns>
    </member>
    <member name="P:NServiceBus.Timeout.Core.TimeoutData.Id">
      <summary>
            Id of this timeout
            </summary>
    </member>
    <member name="P:NServiceBus.Timeout.Core.TimeoutData.Destination">
      <summary>
            The address of the client who requested the timeout.
            </summary>
    </member>
    <member name="P:NServiceBus.Timeout.Core.TimeoutData.SagaId">
      <summary>
            The saga ID.
            </summary>
    </member>
    <member name="P:NServiceBus.Timeout.Core.TimeoutData.State">
      <summary>
            Additional state.
            </summary>
    </member>
    <member name="P:NServiceBus.Timeout.Core.TimeoutData.Time">
      <summary>
            The time at which the timeout expires.
            </summary>
    </member>
    <member name="P:NServiceBus.Timeout.Core.TimeoutData.CorrelationId">
      <summary>
            We store the correlation id in order to preserve it across timeouts
            </summary>
    </member>
    <member name="P:NServiceBus.Timeout.Core.TimeoutData.OwningTimeoutManager">
      <summary>
            The timeout manager that owns this particular timeout
            </summary>
    </member>
    <member name="P:NServiceBus.Timeout.Core.TimeoutData.Headers">
      <summary>
            Store the headers to preserve them across timeouts
            </summary>
    </member>
    <member name="T:NServiceBus.TransactionalConfigManager">
      <summary>
            Contains extension methods to NServiceBus.Configure
            </summary>
    </member>
    <member name="M:NServiceBus.TransactionalConfigManager.IsTransactional(NServiceBus.Configure,System.Boolean)">
      <summary>
            Sets the transactionality of the endpoint.
            If true, the endpoint will not lose messages when exceptions occur.
            If false, the endpoint may lose messages when exceptions occur.
            </summary>
      <param name="config">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.TransactionalConfigManager.DontUseTransactions(NServiceBus.Configure)">
      <summary>
            Sets the transactionality of the endpoint such that 
            the endpoint will not lose messages when exceptions occur.
            
            Is equivalent to IsTransactional(true);
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.TransactionalConfigManager.IsolationLevel(NServiceBus.Configure,System.Transactions.IsolationLevel)">
      <summary>
            Sets the isolation level that database transactions on this endpoint will run at.
            This value is only relevant when IsTransactional has been set to true.
            
            Higher levels like RepeatableRead and Serializable promise a higher level
            of consistency, but at the cost of lower parallelism and throughput.
            
            If you wish to run sagas on this endpoint, RepeatableRead is the suggested value.
            </summary>
      <param name="config">
      </param>
      <param name="isolationLevel">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.TransactionalConfigManager.TransactionTimeout(NServiceBus.Configure,System.TimeSpan)">
      <summary>
            Sets the time span where a transaction will timeout.
            
            Most endpoints should leave it at the default.
            </summary>
      <param name="config">
      </param>
      <param name="transactionTimeout">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.TransportMessage">
      <summary>
            An envelope used by NServiceBus to package messages for transmission.
            </summary>
      <remarks>
            All messages sent and received by NServiceBus are wrapped in this class. 
            More than one message can be bundled in the envelope to be transmitted or 
            received by the bus.
            </remarks>
    </member>
    <member name="M:NServiceBus.TransportMessage.#ctor">
      <summary>
            Initalizes the transport message with a CombGuid as identifier
            </summary>
    </member>
    <member name="M:NServiceBus.TransportMessage.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Creates a new TransportMessage with the given id and headers
            </summary>
      <param name="existingHeaders">
      </param>
    </member>
    <member name="M:NServiceBus.TransportMessage.ChangeMessageId(System.String)">
      <summary>
            Use this method to change the stable ID of the given message.
            </summary>
      <param name="newId">
      </param>
    </member>
    <member name="P:NServiceBus.TransportMessage.Id">
      <summary>
            Gets/sets the identifier of this message bundle.
            </summary>
    </member>
    <member name="P:NServiceBus.TransportMessage.IdForCorrelation">
      <summary>
            Gets/sets the identifier that is copied to <see cref="P:NServiceBus.TransportMessage.CorrelationId" />.
            </summary>
    </member>
    <member name="P:NServiceBus.TransportMessage.CorrelationId">
      <summary>
            Gets/sets the unique identifier of another message bundle
            this message bundle is associated with.
            </summary>
    </member>
    <member name="P:NServiceBus.TransportMessage.ReplyToAddress">
      <summary>
            Gets/sets the reply-to address of the message bundle - replaces 'ReturnAddress'.
            </summary>
    </member>
    <member name="P:NServiceBus.TransportMessage.Recoverable">
      <summary>
            Gets/sets whether or not the message is supposed to
            be guaranteed deliverable.
            </summary>
    </member>
    <member name="P:NServiceBus.TransportMessage.MessageIntent">
      <summary>
            Indicates to the infrastructure the message intent (publish, or regular send).
            </summary>
    </member>
    <member name="P:NServiceBus.TransportMessage.TimeToBeReceived">
      <summary>
            Gets/sets the maximum time limit in which the message bundle
            must be received.
            </summary>
    </member>
    <member name="P:NServiceBus.TransportMessage.Headers">
      <summary>
            Gets/sets other applicative out-of-band information.
            </summary>
    </member>
    <member name="P:NServiceBus.TransportMessage.Body">
      <summary>
            Gets/sets a byte array to the body content of the message
            </summary>
    </member>
    <member name="F:NServiceBus.Forms.TrialExpired.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:NServiceBus.Forms.TrialExpired.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:NServiceBus.Forms.TrialExpired.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.BackwardCompatibility.MutateMessageContentTypeOfIncomingTransportMessages.MutateIncoming(NServiceBus.TransportMessage)">
      <summary>
            Ensure that the content type which is introduced in V4.0.0 and later versions is present in the header.
            </summary>
      <param name="transportMessage">Transport Message to mutate.</param>
    </member>
    <member name="T:NServiceBus.Unicast.BuilderExtensions">
      <summary>
            Extension methods for IBuilder
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.BuilderExtensions.ForEach``1(NServiceBus.ObjectBuilder.IBuilder,System.Action{``0})">
      <summary>
            Applies the action on the instances of T
            </summary>
      <param name="builder">
      </param>
      <param name="action">
      </param>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.Unicast.BusAsyncResult">
      <summary>
            Implementation of IAsyncResult returned when registering a callback.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.BusAsyncResult.#ctor(System.AsyncCallback,System.Object)">
      <summary>
            Creates a new object storing the given callback and state.
            </summary>
      <param name="callback">
      </param>
      <param name="state">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.BusAsyncResult.Complete(System.Int32,System.Object[])">
      <summary>
            Stores the given error code and messages, 
            releases any blocked threads,
            and invokes the previously given callback.
            </summary>
      <param name="errorCode">
      </param>
      <param name="messages">
      </param>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResult.AsyncState">
      <summary>
            Returns a completion result containing the error code, messages, and state.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResult.AsyncWaitHandle">
      <summary>
            Returns a handle suitable for blocking threads.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResult.CompletedSynchronously">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResult.IsCompleted">
      <summary>
            Returns if the operation has completed.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Callback">
      <summary>
            Implementation of the ICallback interface for the unicast bus.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Callback.#ctor(System.String)">
      <summary>
            Creates a new instance of the callback object storing the given message id.
            </summary>
      <param name="messageId">
      </param>
    </member>
    <member name="P:NServiceBus.Unicast.Callback.MessageId">
      <summary>
            Returns the message id this object was constructed with.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Callback.Registered">
      <summary>
            Event raised when the Register method is called.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.BusAsyncResultEventArgs">
      <summary>
            Argument passed in the Registered event of the Callback object.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResultEventArgs.Result">
      <summary>
            Gets/sets the IAsyncResult.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResultEventArgs.MessageId">
      <summary>
            Gets/sets the message id.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Config.ConfigUnicastBus">
      <summary>
            Inherits NServiceBus.Configure providing UnicastBus specific configuration on top of it.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.Config.ConfigUnicastBus.busConfig">
      <summary>
            Used to configure the bus.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.Configure(NServiceBus.Configure)">
      <summary>
            Wrap the given configure object storing its builder and configurer.
            </summary>
      <param name="config">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.LoadMessageHandlers">
      <summary>
            
            Loads all message handler assemblies in the runtime directory.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.LoadMessageHandlers``1">
      <summary>
            Loads all message handler assemblies in the runtime directory
            and specifies that handlers in the given assembly should run
            before all others.
            
            Use First{T} to indicate the type to load from.
            </summary>
      <typeparam name="TFirst">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.LoadMessageHandlers``1(NServiceBus.First{``0})">
      <summary>
            Loads all message handler assemblies in the runtime directory
            and specifies that the handlers in the given 'order' are to 
            run before all others and in the order specified.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="order">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.ConfigureMessageHandlersIn(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Scans the given types for types that are message handlers
            then uses the Configurer to configure them into the container as single call components,
            finally passing them to the bus as its MessageHandlerTypes.
            </summary>
      <param name="types">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.PropogateReturnAddressOnSend(System.Boolean)">
      <summary>
            Set this if you want this endpoint to serve as something of a proxy;
            recipients of messages sent by this endpoint will see the address
            of endpoints that sent the incoming messages.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.PropagateReturnAddressOnSend(System.Boolean)">
      <summary>
            Set this if you want this endpoint to serve as something of a proxy;
            recipients of messages sent by this endpoint will see the address
            of endpoints that sent the incoming messages.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.ForwardReceivedMessagesTo(System.String)">
      <summary>
            Forwards all received messages to a given endpoint (queue@machine).
            This is useful as an auditing/debugging mechanism.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.DoNotAutoSubscribe">
      <summary>
            Instructs the bus not to automatically subscribe to messages that
            it has handlers for (given those messages belong to a different endpoint).
            
            This is needed only if you require fine-grained control over the subscribe/unsubscribe process.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.DoNotAutoSubscribeSagas">
      <summary>
            Instructs the bus not to automatically subscribe sagas to messages that
            it has handlers for (given those messages belong to a different endpoint).
            
            This is needed only if you require fine-grained control over the subscribe/unsubscribe process.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.AllowSubscribeToSelf">
      <summary>
            Allow the bus to subscribe to itself
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.AutoSubscribePlainMessages">
      <summary>
            Tells the bus to auto subscribe plain messages in addition to events
            Commands will NOT be auto subscribed
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.SkipDeserialization">
      <summary>
            Causes the bus to not deserialize incoming messages. This means that no handlers are called and 
            you need to be subscribed to the ITransport.TransportMessageReceived event to handle the messages
            your self.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.DefaultDispatcherFactory``1">
      <summary>
            Allow the bus to subscribe to itself
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.IsMessageHandler(System.Type)">
      <summary>
            Returns true if the given type is a message handler.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.GetMessageTypeFromMessageHandler(System.Type)">
      <summary>
            Returns the message type handled by the given message handler type.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Unicast.DefaultDispatcherFactory">
      <summary>
            The default dispatch factory
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Config.DefaultTransportForHost">
      <summary>
            Default to MSMQ transport if no other transport has been configured. This can be removed when we introduce the modules concept
            </summary>
    </member>
    <member name="T:NServiceBus.Distributor.DistributorSatellite">
      <summary>
                Provides functionality for distributing messages from a bus
                to multiple workers when using a unicast transport.
            </summary>
    </member>
    <member name="M:NServiceBus.Distributor.DistributorSatellite.Start">
      <summary>
                Starts the Distributor.
            </summary>
    </member>
    <member name="M:NServiceBus.Distributor.DistributorSatellite.Stop">
      <summary>
                Stops the Distributor.
            </summary>
    </member>
    <member name="M:NServiceBus.Distributor.DistributorSatellite.Handle(NServiceBus.TransportMessage)">
      <summary>
            This method is called when a message is available to be processed.
            </summary>
      <param name="message">The <see cref="T:NServiceBus.TransportMessage" /> received.</param>
    </member>
    <member name="P:NServiceBus.Distributor.DistributorSatellite.MessageSender">
      <summary>
                Object used to send messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Distributor.DistributorSatellite.WorkerManager">
      <summary>
                Sets the <see cref="T:NServiceBus.Distributor.IWorkerAvailabilityManager" /> implementation that will be
                used to determine whether or not a worker is available.
            </summary>
    </member>
    <member name="P:NServiceBus.Distributor.DistributorSatellite.InputAddress">
      <summary>
            The <see cref="F:NServiceBus.Distributor.DistributorSatellite.Address" /> for this <see cref="T:NServiceBus.Satellites.ISatellite" /> to use when receiving messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Distributor.DistributorSatellite.Disabled">
      <summary>
            Set to <code>true</code> to disable this <see cref="T:NServiceBus.Satellites.ISatellite" />.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.HandlerInvocationCache">
      <summary>
            Helper that optimize the invocation of the handle methods
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.HandlerInvocationCache.InvokeHandle(System.Object,System.Object)">
      <summary>
            Invokes the handle method of the given handler passing the message
            </summary>
      <param name="handler">The handler instance.</param>
      <param name="message">The message instance.</param>
    </member>
    <member name="M:NServiceBus.Unicast.HandlerInvocationCache.InvokeTimeout(System.Object,System.Object)">
      <summary>
            Invokes the timeout method of the given handler passing the message
            </summary>
      <param name="handler">The handler instance.</param>
      <param name="state">The message instance.</param>
    </member>
    <member name="M:NServiceBus.Unicast.HandlerInvocationCache.CacheMethodForHandler(System.Type,System.Type)">
      <summary>
            Registers the method in the cache
            </summary>
      <param name="handler">The object type.</param>
      <param name="messageType">the message type.</param>
    </member>
    <member name="M:NServiceBus.Unicast.HandlerInvocationCache.Clear">
      <summary>
            Clears the cache
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.EnableMessageDrivenPublisherIfStorageIsFound">
      <summary>
            This class handles backwards compatibility. If there is a ISubscription storage registered by the user we should use
            the message drive´n subscription manager
            </summary>
    </member>
    <member name="T:NServiceBus.Features.StorageDrivenPublisher">
      <summary>
            Adds support for pub/sub using a external subscription storage. This brings pub/sub to transport that lacks native support.
            </summary>
    </member>
    <member name="T:NServiceBus.AutomaticSubscriptions.IAutoSubscriptionStrategy">
      <summary>
            Abstracts the strategy for selecting which events to autosubscribe to during startup
            </summary>
    </member>
    <member name="M:NServiceBus.AutomaticSubscriptions.IAutoSubscriptionStrategy.GetEventsToSubscribe">
      <summary>
            Returns the list of events to autosubscribe
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy">
      <summary>
            The default strategy for auto subscriptions.
            </summary>
    </member>
    <member name="P:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy.HandlerRegistry">
      <summary>
            The known handlers
            </summary>
    </member>
    <member name="P:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy.MessageRouter">
      <summary>
            The message routing
            </summary>
    </member>
    <member name="P:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy.DoNotRequireExplicitRouting">
      <summary>
            If set to true the endpoint will subscribe to it self even if no endpoint mappings exists
            </summary>
    </member>
    <member name="P:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy.DoNotAutoSubscribeSagas">
      <summary>
            if true messages that are handled by sagas wont be auto subscribed
            </summary>
    </member>
    <member name="P:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy.SubscribePlainMessages">
      <summary>
            If true all messages that are not commands will be auto subscribed
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.IUnicastBus">
      <summary>
            Extension of the IBus interface for working with a distributor.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.IUnicastBus.ClearTimeoutsFor(System.Guid)">
      <summary>
            Clears any existing timeouts for the given saga
            </summary>
      <param name="sagaId">
      </param>
    </member>
    <member name="E:NServiceBus.Unicast.IUnicastBus.NoSubscribersForMessage">
      <summary>
            Event raised by the Publish method when no subscribers are
            registered for the message being published.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.IUnicastBus.ClientSubscribed">
      <summary>
            Event raised when a client has been subscribed to a message type.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.IUnicastBus.MessagesSent">
      <summary>
            Event raised when the bus sends multiple messages across the wire.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.IWantToRunWhenTheBusStarts">
      <summary>
            Implement this interface if you want to be called when the bus starts up
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.IWantToRunWhenTheBusStarts.Run">
      <summary>
            Method called on start up
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.MessageContext">
      <summary>
            Implementation of IMessageContext
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.MessageContext.#ctor(NServiceBus.TransportMessage)">
      <summary>
            Initializes message context from the transport message.
            </summary>
      <param name="transportMessage">
      </param>
    </member>
    <member name="T:NServiceBus.Unicast.MessageEventArgs">
      <summary>
            Data containing a message for raising in events.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.MessageEventArgs.#ctor(System.Object)">
      <summary>
            Instantiates a new object containing the given message.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="P:NServiceBus.Unicast.MessageEventArgs.Message">
      <summary>
            The message.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.MessagesEventArgs">
      <summary>
            Data containing multiple messages for raising in events.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.MessagesEventArgs.#ctor(System.Object[])">
      <summary>
            Instantiate an event arg referencing multiple messages.
            </summary>
      <param name="messages">
      </param>
    </member>
    <member name="P:NServiceBus.Unicast.MessagesEventArgs.Messages">
      <summary>
            The messages that were sent.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.MessagingBestPractices">
      <summary>
            Enforce messaging rules
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForSend(System.Type,NServiceBus.MessageIntentEnum)">
      <summary>
            Enforce messaging rules. Make sure, the message can be used within the Bus.Send.
            </summary>
      <param name="messageType">Event, Command or message</param>
      <param name="messageIntent">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForReply(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Enforce messaging rules. Make sure, the message can be used by Bus.Reply.
            </summary>
      <param name="messages">Collection of messages to enforce messaging rules on.</param>
    </member>
    <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForReply(System.Type)">
      <summary>
            Enforce messaging rules. Make sure, the message can be used by Bus.Reply.
            </summary>
      <param name="messageType">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForPubSub(System.Type)">
      <summary>
            Enforce messaging rules. Make sure, the message can be used by pubsub bus methods (subscribe, unsubscribe and publish)..
            </summary>
      <param name="messageType">
      </param>
    </member>
    <member name="T:NServiceBus.Unicast.Monitoring.CriticalTimeCalculator">
      <summary>
                Performance counter for the critical time
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Monitoring.CriticalTimeCalculator.Update(System.DateTime,System.DateTime,System.DateTime)">
      <summary>
                Updates the counter based on the passed times
            </summary>
      <param name="sent">
      </param>
      <param name="processingStarted">
      </param>
      <param name="processingEnded">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Monitoring.CriticalTimeCalculator.Initialize(System.Diagnostics.PerformanceCounter)">
      <summary>
                Verified that the counter exists
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Monitoring.EstimatedTimeToSLABreachCalculator.Initialize(System.TimeSpan,System.Diagnostics.PerformanceCounter)">
      <summary>
                Verified that the counter exists
            </summary>
      <param name="sla">
      </param>
      <param name="slaBreachCounter">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Monitoring.EstimatedTimeToSLABreachCalculator.Update(System.DateTime,System.DateTime,System.DateTime)">
      <summary>
                Updates the counter based on the passed times
            </summary>
      <param name="sent">
      </param>
      <param name="processingStarted">
      </param>
      <param name="processingEnded">
      </param>
    </member>
    <member name="T:NServiceBus.Unicast.Monitoring.PerformanceCounterInitializer">
      <summary>
            Initializes the performance counters if they are enabled
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Monitoring.ProcessingStatistics">
      <summary>
            Stores the start and end times for statistic purposes
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Monitoring.ProcessingStatistics.Bus">
      <summary>
            Needs the bus to set the headers
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Monitoring.ProcessingStatistics.CriticalTimeCounter">
      <summary>
            Performance counter for critical time. 
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Monitoring.ProcessingStatistics.EstimatedTimeToSLABreachCalculator">
      <summary>
            Counter that displays the estimated time left to a SLA breach
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Monitoring.CausationMutator">
      <summary>
            Mutator to set the related to header
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Monitoring.CausationMutator.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
      <summary>
            Keeps track of related messages to make auditing possible
            </summary>
      <param name="messages">
      </param>
      <param name="transportMessage">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Monitoring.CausationMutator.Init">
      <summary>
            Initializes 
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Monitoring.CausationMutator.Bus">
      <summary>
            The bus is needed to get access to the current message id
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Monitoring.SentTimeMutator">
      <summary>
            Set the TimeSent header
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Monitoring.SentTimeMutator.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
      <summary>
            Stamps the message with the current time in UTC
            </summary>
      <param name="messages">
      </param>
      <param name="transportMessage">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Monitoring.VersionMutator.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
      <summary>
            Keeps track of related messages to make auditing possible
            </summary>
      <param name="messages">
      </param>
      <param name="transportMessage">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Monitoring.VersionMutator.Init">
      <summary>
            Initializer
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Publishing.StorageDrivenPublisher">
      <summary>
            Published messages based on whats registered in the given subscription storage
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Publishing.StorageDrivenPublisher.Publish(NServiceBus.TransportMessage,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Pubvlishes the given message to all subscribers
            </summary>
      <param name="message">
      </param>
      <param name="eventTypes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Unicast.Publishing.StorageDrivenPublisher.SubscriptionStorage">
      <summary>
            Subscription storge containing information about events and their subscribers
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Publishing.StorageDrivenPublisher.MessageSender">
      <summary>
            The message sender to use when sending the events to the different publishers
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Queuing.Installers.EndpointInputQueueCreator.Address">
      <summary>
            Endpoint input name
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Queuing.Installers.EndpointInputQueueCreator.IsDisabled">
      <summary>
            True if no need to create queue
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Queuing.Installers.ForwardReceivedMessagesToQueueCreator">
      <summary>
            Signals to create forward received messages queue.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Queuing.Installers.ForwardReceivedMessagesToQueueCreator.Address">
      <summary>
            Address of queue the implementer requires.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Queuing.Installers.ForwardReceivedMessagesToQueueCreator.IsDisabled">
      <summary>
            True if no need to create queue
            </summary>
    </member>
    <member name="T:NServiceBus.Transports.Msmq.Config.CheckMachineNameForComplianceWithDtcLimitation">
      <summary>
            Make sure NETBios name is shorter than 15 characters. 
            See <a href="http://particular.net/articles/dtcping-warning-the-cid-values-for-both-test-machines-are-the-same">DTCPing warning</a></summary>
    </member>
    <member name="M:NServiceBus.Transports.Msmq.Config.CheckMachineNameForComplianceWithDtcLimitation.Run">
      <summary>
            Method invoked to run custom code.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Queuing.QueuesCreator">
      <summary>
            Iterating over all implementers of IWantQueueCreated and creating queue for each.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Queuing.QueuesCreator.Install(System.String)">
      <summary>
            Performs the installation providing permission for the given user.
            </summary>
      <param name="identity">The user for under which the queue will be created.</param>
    </member>
    <member name="M:NServiceBus.Unicast.Queuing.QueuesCreator.Init">
      <summary>
            Register all IWantQueueCreated implementers.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Routing.IRouteMessages">
      <summary>
            Keeps track of where a given message should be routed to
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Routing.IRouteMessages.GetDestinationFor(System.Type)">
      <summary>
            Gets the owner/destination for the given message
            </summary>
      <param name="messageType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Unicast.Routing.StaticMessageRouter">
      <summary>
            The default message router
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Routing.StaticMessageRouter.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initializes the router with all known messages
            </summary>
      <param name="knownMessages">
      </param>
    </member>
    <member name="T:NServiceBus.Unicast.IMessageHandlerRegistry">
      <summary>
            The registry that keeps track of all known message handlers
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.IMessageHandlerRegistry.GetHandlerTypes(System.Type)">
      <summary>
            Gets the list of messagehandlers for the given message type
            </summary>
      <param name="messageType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.IMessageHandlerRegistry.GetMessageTypes">
      <summary>
            Lists all message type for which we have handlers
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Unicast.MessageHandlerRegistry">
      <summary>
            Maintains the message handlers for this endpoint
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.RegisterHandler(System.Type)">
      <summary>
            Registers the given message handler type
            </summary>
      <param name="handlerType">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.GetHandlerTypes(System.Type)">
      <summary>
            Gets the list of messagehandlers for the given message type
            </summary>
      <param name="messageType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.GetMessageTypes">
      <summary>
            Lists all message type for which we have handlers
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.GetMessageTypesIfIsMessageHandler(System.Type)">
      <summary>
            If the type is a message handler, returns all the message types that it handles
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.SubscriptionEventArgs">
      <summary>
            Contains which client subscribed to which message
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Subscriptions.SubscriptionEventArgs.SubscriberReturnAddress">
      <summary>
            The address of the subscriber.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Subscriptions.SubscriptionEventArgs.MessageType">
      <summary>
            The type of message the client subscribed to.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.SubcriberSideFiltering.SubscriptionPredicatesEvaluator">
      <summary>
            Manages subscriptions and predicates for messages published by other endpoints
            and subscribed to by the local bus.
            </summary>
      <remarks>
            Thread safe.
            </remarks>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.SubcriberSideFiltering.SubscriptionPredicatesEvaluator.GetConditionsForMessage(System.Object)">
      <summary>
            Gets the list of conditions associated with a message.
            </summary>
      <param name="message">The message to get conditions for.</param>
      <returns>A list of conditions that are associated with type of message provided.</returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.SubcriberSideFiltering.SubscriptionPredicatesEvaluator.AddConditionForSubscriptionToMessageType(System.Type,System.Predicate{System.Object})">
      <summary>
            Adds a condition to a message type.
            </summary>
      <param name="messageType">The message type to add a condition to.</param>
      <param name="condition">The condition to add.</param>
      <remarks>
            All conditions added to a message type must be met if the messages of that type 
            are to be published to a subscriber.</remarks>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.MessageDrivenSubscriptionManager">
      <summary>
            Implements message driven subscriptions for transports that doesn't have native support for it (MSMQ , SqlServer, Azure Queues etc)
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage">
      <summary>
            Defines storage for subscriptions
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.Subscribe(NServiceBus.Address,System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
      <summary>
            Subscribes the given client address to messages of the given types.
            </summary>
      <param name="client">
      </param>
      <param name="messageTypes">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.Unsubscribe(NServiceBus.Address,System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
      <summary>
            Unsubscribes the given client address from messages of the given types.
            </summary>
      <param name="client">
      </param>
      <param name="messageTypes">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.GetSubscriberAddressesForMessage(System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
      <summary>
            Returns a list of addresses of subscribers that previously requested to be notified
            of messages of the given message types.
            </summary>
      <param name="messageTypes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.Init">
      <summary>
            Notifies the subscription storage that now is the time to perform
            any initialization work
            </summary>
    </member>
    <member name="T:NServiceBus.Persistence.InMemory.SubscriptionStorage.InMemorySubscriptionStorage">
      <summary>
            In memory implementation of the subscription storage
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.MessageType">
      <summary>
            Representation of a message type that clients can be subscribed to
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.Type)">
      <summary>
            Initializes the message type from the given type
            </summary>
      <param name="type">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String)">
      <summary>
            Initializes the message type from the given string. 
            </summary>
      <param name="messageTypeString">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String,System.String)">
      <summary>
            Initializes the message type from the given string. 
            </summary>
      <param name="typeName">
      </param>
      <param name="versionString">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String,System.Version)">
      <summary>
            Initializes the message type from the given string. 
            </summary>
      <param name="typeName">
      </param>
      <param name="version">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.ToString">
      <summary>
            Overriden to append Version along with Type Name
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.Equals(NServiceBus.Unicast.Subscriptions.MessageType)">
      <summary>
            Equality, only major version is used
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.Equals(System.Object)">
      <summary>
            Equality, only Type is same
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.GetHashCode">
      <summary>
            Gets Hash Code
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.op_Equality(NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Unicast.Subscriptions.MessageType)">
      <summary>
            Equality
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.op_Inequality(NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Unicast.Subscriptions.MessageType)">
      <summary>
            Equality
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Unicast.Subscriptions.MessageType.TypeName">
      <summary>
            TypeName of the message
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Subscriptions.MessageType.Version">
      <summary>
            Version of the message
            </summary>
    </member>
    <member name="T:NServiceBus.Persistence.Msmq.SubscriptionStorage.Config.SubscriptionsQueueCreator">
      <summary>
            Signals to create MSMQ subscription queue
            </summary>
    </member>
    <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.Config.SubscriptionsQueueCreator.Address">
      <summary>
            MSMQ Subscription storage
            </summary>
    </member>
    <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.Config.SubscriptionsQueueCreator.IsDisabled">
      <summary>
            Disabling the creation of the MSMQ Subscription queue
            </summary>
    </member>
    <member name="T:NServiceBus.Persistence.Msmq.SubscriptionStorage.Entry">
      <summary>
            Describes an entry in the list of subscriptions.
            </summary>
    </member>
    <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.Entry.MessageType">
      <summary>
            Gets the message type for the subscription entry.
            </summary>
    </member>
    <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.Entry.Subscriber">
      <summary>
            Gets the subscription request message.
            </summary>
    </member>
    <member name="T:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage">
      <summary>
            Provides functionality for managing message subscriptions
            using MSMQ.
            </summary>
    </member>
    <member name="F:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.lookup">
      <summary>
            lookup from subscriber, to message type, to message id
            </summary>
    </member>
    <member name="M:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.ConfigurationIsWrong">
      <summary>
            Checks if configuration is wrong - endpoint isn't transactional and
            object isn't configured to handle own transactions.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.Add(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType)">
      <summary>
            Adds a message to the subscription store.
            </summary>
    </member>
    <member name="M:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.Remove(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType)">
      <summary>
            Removes a message from the subscription store.
            </summary>
    </member>
    <member name="M:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.GetTransactionType">
      <summary>
            Returns the transaction type (automatic or single) that should be used
            based on the configuration of enlisting into external transactions.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.AddToLookup(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType,System.String)">
      <summary>
            Adds a message to the lookup to find message from
            subscriber, to message type, to message id
            </summary>
    </member>
    <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.DontUseExternalTransaction">
      <summary>
            Gets/sets whether or not to use a transaction started outside the 
            subscription store.
            </summary>
    </member>
    <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.Queue">
      <summary>
            Sets the address of the queue where subscription messages will be stored.
            For a local queue, just use its name - msmq specific info isn't needed.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.ControlMessage">
      <summary>
            Helper for creating control messages
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ControlMessage.Create(NServiceBus.Address)">
      <summary>
            Creates Transport Message
            </summary>
      <returns>Transport Message</returns>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.TransportMessageExtensions">
      <summary>
            Extensions to make the usage if control messages easier
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportMessageExtensions.IsControlMessage(NServiceBus.TransportMessage)">
      <summary>
            True if the transport message is a control message
            </summary>
      <param name="transportMessage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs">
      <summary>
            Defives the event data for the failed message processing event
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs.#ctor(System.Exception)">
      <summary>
            Initialized the event arg with the actual exception
            </summary>
      <param name="ex">
      </param>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs.Reason">
      <summary>
            The exception that caused the processing to fail
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.ITransport">
      <summary>
            Defines the basic functionality of a transport to be used by NServiceBus.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ITransport.Start(System.String)">
      <summary>
            Starts the transport.
            </summary>
      <param name="inputqueue">
            The adress of a local queue that should be used as input channel for this transport
            </param>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ITransport.Start(NServiceBus.Address)">
      <summary>
            Starts the transport listening for messages on the given local address.
            </summary>
      <param name="localAddress">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ITransport.ChangeNumberOfWorkerThreads(System.Int32)">
      <summary>
            Changes the number of worker threads running in the transport.
            This may stop active worker threads; those threads will finish
            processing their current message and then exit.
            </summary>
      <param name="targetNumberOfWorkerThreads">
            The requested number of active worker threads after
            the necessary threads have been stopped or started.
            </param>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ITransport.ChangeMaximumConcurrencyLevel(System.Int32)">
      <summary>
            Updates the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport" /> is able to support.
            </summary>
      <param name="maximumConcurrencyLevel">The new maximum concurrency level for this <see cref="T:NServiceBus.Unicast.Transport.ITransport" />.</param>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ITransport.ChangeMaximumMessageThroughputPerSecond(System.Int32)">
      <summary>
            Updates the max throughput per second.
            </summary>
      <param name="maximumMessageThroughputPerSecond">The new max throughput.</param>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ITransport.AbortHandlingCurrentMessage">
      <summary>
            Causes the current message being handled to return to the queue.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ITransport.Stop">
      <summary>
            Stops the transport.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.ITransport.NumberOfWorkerThreads">
      <summary>
            Gets the number of worker threads currently running in the transport.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.ITransport.MaximumConcurrencyLevel">
      <summary>
            Gets the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport" /> is able to support.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.ITransport.MaxThroughputPerSecond">
      <summary>
            Throttling receiving messages rate. You can't set the value than the value specified at your license.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.ITransport.MaximumMessageThroughputPerSecond">
      <summary>
            Gets the receiving messages rate.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived">
      <summary>
            Raised when a message is received.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.ITransport.StartedMessageProcessing">
      <summary>
            Raised when a message is available but before <see cref="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived" /> is raised.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.ITransport.FinishedMessageProcessing">
      <summary>
            Raised after message processing was completed, even in case of an exception in message processing.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.ITransport.FailedMessageProcessing">
      <summary>
            Raised if an exception was encountered at any point in the processing - including
            when the transaction commits.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs">
      <summary>
            Defines the arguments passed to the event handler of the
            <see cref="E:NServiceBus.Unicast.Transport.ITransport.StartedMessageProcessing" /> event.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs.#ctor(NServiceBus.TransportMessage)">
      <summary>
            Initializes a new TransportMessageReceivedEventArgs.
            </summary>
      <param name="m">The message that was received.</param>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs.Message">
      <summary>
            Gets the message received.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.Transactional.Config.AdvancedTransactionalConfig.SupressDTC(NServiceBus.Configure)">
      <summary>
            Suppress the use of DTC. Can be combined with IsTransactional to turn off
            the DTC but still use the retries
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.TransportReceiverConfig">
      <summary>
            Extension methods to configure transport.
            </summary>
    </member>
    <member name="M:NServiceBus.TransportReceiverConfig.UseTransport``1(NServiceBus.Configure,System.String)">
      <summary>
            Configures NServiceBus to use the given transport.
            </summary>
      <typeparam name="T">Type of <see cref="T:NServiceBus.Transports.TransportDefinition" /> to be configured.</typeparam>
      <param name="config">The configuration object.</param>
      <param name="connectionStringName">The connectionstring name to use to retrieve the connectionstring from.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.TransportReceiverConfig.UseTransport``1(NServiceBus.Configure,System.Func{System.String})">
      <summary>
            Configures NServiceBus to use the given transport.
            </summary>
      <typeparam name="T">Type of <see cref="T:NServiceBus.Transports.TransportDefinition" /> to be configured.</typeparam>
      <param name="config">The configuration object.</param>
      <param name="definesConnectionString">Specifies a callback to call to retrieve the connectionstring to use</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.TransportReceiverConfig.UseTransport(NServiceBus.Configure,System.Type,System.String)">
      <summary>
            Configures NServiceBus to use the given transport.
            </summary>
      <param name="config">The configuration object.</param>
      <param name="transportDefinitionType">Type of <see cref="T:NServiceBus.Transports.TransportDefinition" /> to be configured.</param>
      <param name="connectionStringName">The connectionstring name to use to retrieve the connectionstring from.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:NServiceBus.TransportReceiverConfig.UseTransport(NServiceBus.Configure,System.Type,System.Func{System.String})">
      <summary>
            Configures NServiceBus to use the given transport.
            </summary>
      <param name="config">The configuration object.</param>
      <param name="transportDefinitionType">Type of <see cref="T:NServiceBus.Transports.TransportDefinition" /> to be configured.</param>
      <param name="definesConnectionString">Specifies a callback to call to retrieve the connectionstring to use</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.ThroughputLimiter">
      <summary>
            Support for throughput limitation of the transport
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.TransportReceiver">
      <summary>
            The default implementation of <see cref="T:NServiceBus.Unicast.Transport.ITransport" /></summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.ChangeMaximumConcurrencyLevel(System.Int32)">
      <summary>
            Updates the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport" /> is able to support.
            </summary>
      <param name="maximumConcurrencyLevel">The new maximum concurrency level for this <see cref="T:NServiceBus.Unicast.Transport.ITransport" />.</param>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.ChangeNumberOfWorkerThreads(System.Int32)">
      <summary>
            Changes the number of worker threads to the given target,
            stopping or starting worker threads as needed.
            </summary>
      <param name="targetNumberOfWorkerThreads">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.AbortHandlingCurrentMessage">
      <summary>
            Causes the processing of the current message to be aborted.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.Stop">
      <summary>
            Stops the transport.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.Receiver">
      <summary>
            The receiver responsible for notifying the transport when new messages are available
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.FailureManager">
      <summary>
            Manages failed message processing.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.TransactionSettings">
      <summary>
            The current settings for transactions
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.NumberOfWorkerThreads">
      <summary>
            Gets/sets the number of concurrent threads that should be
            created for processing the queue.
            
            Get returns the actual number of running worker threads, which may
            be different than the originally configured value.
            
            When used as a setter, this value will be used by the <see cref="M:NServiceBus.Unicast.Transport.TransportReceiver.Start(NServiceBus.Address)" />
            method only and will have no effect if called afterwards.
            
            To change the number of worker threads at runtime, call <see cref="M:NServiceBus.Unicast.Transport.TransportReceiver.ChangeNumberOfWorkerThreads(System.Int32)" />.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.MaximumConcurrencyLevel">
      <summary>
            Gets the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport" /> is able to support.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.MaximumMessageThroughputPerSecond">
      <summary>
            Gets the receiving messages rate.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.MaxThroughputPerSecond">
      <summary>
            Throttling receiving messages rate. You can't set the value other than the value specified at your license.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.StartedMessageProcessing">
      <summary>
            Event which indicates that message processing has started.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.FinishedMessageProcessing">
      <summary>
            Event which indicates that message processing has completed.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.FailedMessageProcessing">
      <summary>
            Event which indicates that message processing failed for some reason.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.TransportMessageReceived">
      <summary>
            Event raised when a message has been received in the input queue.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional">
      <summary>
            Sets whether or not the transport is transactional.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.TransactionTimeout">
      <summary>
            Property for getting/setting the period of time when the transaction times out.
            Only relevant when <see cref="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional" /> is set to true.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.IsolationLevel">
      <summary>
            Property for getting/setting the isolation level of the transaction scope.
            Only relevant when <see cref="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional" /> is set to true.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.MaxRetries">
      <summary>
            Sets the maximum number of times a message will be retried
            when an exception is thrown as a result of handling the message.
            This value is only relevant when <see cref="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional" /> is true.
            </summary>
      <remarks>
            Default value is 5.
            </remarks>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.DontUseDistributedTransactions">
      <summary>
            If true the transport won't enlist in distributed transactions
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.DoNotWrapHandlersExecutionInATransactionScope">
      <summary>
            Controls if the message handlers should be wrapped in a transactionscope
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs">
      <summary>
                Provides data for the MessageDequeued event.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs.#ctor(NServiceBus.TransportMessage)">
      <summary>
                Default constructor for <see cref="T:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs" />.
            </summary>
      <param name="m">
                The received <see cref="T:NServiceBus.TransportMessage" />.
            </param>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs.Message">
      <summary>
                The received <see cref="T:NServiceBus.TransportMessage" />.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.TransportMessageHandlingFailedException">
      <summary>
            Exception used to transport exceptions encountered in message handlers.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportMessageHandlingFailedException.#ctor(System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="originalException">The exception that got thrown from the message handler.</param>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs">
      <summary>
            Defines the arguments passed to the event handler of the
            <see cref="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived" /> event.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs.#ctor(NServiceBus.TransportMessage)">
      <summary>
            Initializes a new TransportMessageReceivedEventArgs.
            </summary>
      <param name="m">The message that was received.</param>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs.Message">
      <summary>
            Gets the message received.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.UnicastBus">
      <summary>
            A unicast implementation of <see cref="T:NServiceBus.IBus" /> for NServiceBus.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.UnicastBus.MessageReceivedDelegate">
      <summary>
            A delegate for a method that will handle the <see cref="E:NServiceBus.Unicast.UnicastBus.MessageReceived" />
            event.
            </summary>
      <param name="message">The message received.</param>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus.modules">
      <summary>
            Thread-static list of message modules, needs to be initialized for every transport message
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus.messageIdToAsyncResultLookup">
      <summary>
            Map of message IDs to Async Results - useful for cleanup in case of timeouts.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus._messageBeingHandled">
      <remarks>
            ThreadStatic
            </remarks>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus._handleCurrentMessageLaterWasCalled">
      <summary>
            ThreadStatic variable indicating if the current message was already
            marked to be handled later so we don't do this more than once.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.ClearTimeoutsFor(System.Guid)">
      <summary>
            Clear Timeouts For the saga
            </summary>
      <param name="sagaId">Id of the Saga for clearing the timeouts</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.CreateInstance``1">
      <summary>
            Creates an instance of the specified type.
            Used primarily for instantiating interface-based messages.
            </summary>
      <typeparam name="T">The type to instantiate.</typeparam>
      <returns>An instance of the specified type.</returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.CreateInstance``1(System.Action{``0})">
      <summary>
            Creates an instance of the specified type.
            Used primarily for instantiating interface-based messages.
            </summary>
      <typeparam name="T">The type to instantiate.</typeparam>
      <param name="action">An action to perform on the result</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.CreateInstance(System.Type)">
      <summary>
            Creates an instance of the specified type.
            Used primarily for instantiating interface-based messages.
            </summary>
      <param name="messageType">The type to instantiate.</param>
      <returns>An instance of the specified type.</returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Publish``1(System.Action{``0})">
      <summary>
            Creates an instance of the requested message type (T), 
            performing the given action on the created message,
            and then publishing it.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="messageConstructor">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Publish``1(``0[])">
      <summary>
            Publishes the messages to all subscribers of the first message's type.
            </summary>
      <param name="messages">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe``1">
      <summary>
            Subscribes to the given type - T.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe(System.Type)">
      <summary>
            Subscribes to receive published messages of the specified type.
            </summary>
      <param name="messageType">The type of message to subscribe to.</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe``1(System.Predicate{``0})">
      <summary>
            Subscribes to the given type T, registering a condition that all received
            messages of that type should comply with, otherwise discarding them.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="condition">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe(System.Type,System.Predicate{System.Object})">
      <summary>
            Subscribes to receive published messages of the specified type if
            they meet the provided condition.
            </summary>
      <param name="messageType">The type of message to subscribe to.</param>
      <param name="condition">The condition under which to receive the message.</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Unsubscribe``1">
      <summary>
            Unsubscribes from the given type of message - T.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Unsubscribe(System.Type)">
      <summary>
            Unsubscribes from receiving published messages of the specified type.
            </summary>
      <param name="messageType">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Defer(System.TimeSpan,System.Object[])">
      <summary>
            Defer
            </summary>
      <param name="delay">Delay</param>
      <param name="messages">Messages</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Defer(System.DateTime,System.Object[])">
      <summary>
            Defer
            </summary>
      <param name="processAt">processAt</param>
      <param name="messages">messages</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Dispose(System.Boolean)">
      <summary>
            Tells the transport to dispose.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.HandleMessage(NServiceBus.ObjectBuilder.IBuilder,NServiceBus.TransportMessage)">
      <summary>
            Handles a received message.
            </summary>
      <param name="builder">The builder used to construct the objects necessary to handle the message.</param>
      <param name="m">The received message.</param>
      <remarks>
            run by multiple threads so must be thread safe
            public for testing
            </remarks>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.DispatchMessageToHandlersBasedOnType(NServiceBus.ObjectBuilder.IBuilder,System.Object)">
      <summary>
            Finds the message handlers associated with the message type and dispatches
            the message to the found handlers.
            </summary>
      <param name="builder">The builder used to construct the handlers.</param>
      <param name="toHandle">The message to dispatch to the handlers.</param>
      <returns>
      </returns>
      <remarks>
            If during the dispatch, a message handler calls the DoNotContinueDispatchingCurrentMessageToHandlers method,
            this prevents the message from being further dispatched.
            This includes generic message handlers (of IMessage), and handlers for the specific messageType.
            </remarks>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.HandleCorrelatedMessage(NServiceBus.TransportMessage,System.Object[])">
      <summary>
            If the message contains a correlationId, attempts to
            invoke callbacks for that Id. Returns true if a callback was invoked
            </summary>
      <param name="msg">The message to evaluate.</param>
      <param name="messages">The logical messages in the transport message.</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.TransportMessageReceived(System.Object,NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs)">
      <summary>
            Handles the <see cref="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived" /> event from the <see cref="T:NServiceBus.Unicast.Transport.ITransport" /> used
            for the bus.
            </summary>
      <param name="sender">The sender of the event.</param>
      <param name="e">The arguments for the event.</param>
      <remarks>
            When the transport passes up the <see cref="T:NServiceBus.TransportMessage" /> its received,
            the bus checks for initialization, 
            sets the message as that which is currently being handled for the current thread
            and, depending on <see cref="P:NServiceBus.Unicast.UnicastBus.DisableMessageHandling" />, attempts to handle the message.
            </remarks>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.ForwardMessageIfNecessary(NServiceBus.TransportMessage)">
      <summary>
            Sends the Msg to the address found in the field <see cref="P:NServiceBus.Unicast.UnicastBus.ForwardReceivedMessagesTo" />
            if it isn't null.
            </summary>
      <param name="m">The message to forward</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.MapTransportMessageFor(System.Collections.Generic.IList{System.Object},NServiceBus.TransportMessage)">
      <summary>
            Wraps the provided messages in an NServiceBus envelope, does not include destination.
            Invokes message mutators.
            </summary>
      <param name="rawMessages">The messages to wrap.</param>
            /// <param name="result">The envelope in which the messages are placed.</param><returns>The envelope containing the messages.</returns></member>
    <member name="M:NServiceBus.Unicast.UnicastBus.GetAddressForMessages(System.Object[])">
      <summary>
            Uses the first message in the array to pass to <see cref="M:NServiceBus.Unicast.UnicastBus.GetAddressForMessageType(System.Type)" />.
            </summary>
      <param name="messages">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.GetAddressForMessageType(System.Type)">
      <summary>
            Gets the destination address for a message type.
            </summary>
      <param name="messageType">The message type to get the destination for.</param>
      <returns>The address of the destination associated with the message type.</returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.AssertBusIsStarted">
      <summary>
            Throws an exception if the bus hasn't begun the startup process.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.DisableMessageHandling">
      <summary>
            Should be used by programmer, not administrator.
            Disables the handling of incoming messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.Transport">
      <summary>
            Should be used by programmer, not administrator.
            Sets an <see cref="T:NServiceBus.Unicast.Transport.ITransport" /> implementation to use as the
            listening endpoint for the bus.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageSender">
      <summary>
            Message queue used to send messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MasterNodeAddress">
      <summary>
            Information regarding the current master node
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageSerializer">
      <summary>
            Should be used by the programmer, not the administrator.
            Gets and sets an <see cref="T:NServiceBus.Serialization.IMessageSerializer" /> implementation to
            be used for subscription storage for the bus.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageRegistry">
      <summary>
            The registry of all known messages for this endpoint
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageDeferrer">
      <summary>
            A way to request the transport to defer the processing of a message
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.Builder">
      <summary>
            Should be used by programmer, not administrator.
            Sets <see cref="T:NServiceBus.ObjectBuilder.IBuilder" /> implementation that will be used to 
            dynamically instantiate and execute message handlers.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageMapper">
      <summary>
            Gets/sets the message mapper.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.PropagateReturnAddressOnSend">
      <summary>
            Should be used by programmer, not administrator.
            Sets whether or not the return address of a received message 
            should be propagated when the message is forwarded. This field is
            used primarily for the Distributor.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.ForwardReceivedMessagesTo">
      <summary>
            Should be used by administrator, not programmer.
            Sets the address to which all messages received on this bus will be 
            forwarded to (not including subscription messages). 
            This is primarily useful for smart client scenarios 
            where both client and server software are installed on the mobile
            device. The server software will have this field set to the address
            of the real server.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.TimeToBeReceivedOnForwardedMessages">
      <summary>
            The TTR to set on forwarded messages. 
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageRouter">
      <summary>
            The router for this unicastbus
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.HandlerRegistry">
      <summary>
            The handler registry for this unicastbus
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.SubscriptionPredicatesEvaluator">
      <summary>
            Handles the filtering of messages on the subscriber side
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.SubscriptionManager">
      <summary>
            The registered subscription manager for this bus instance
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessagePublisher">
      <summary>
            Publishes the given messages
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.DoNotStartTransport">
      <summary>
            Allow disabling the unicast bus.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.InputAddress">
      <summary>
            The address this bus will use as it's main input
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageDispatcherMappings">
      <summary>
            The list of message dispatcher factories to use
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.SkipDeserialization">
      <summary>
            True if no deseralization should be performed. This means that no handlers will be called
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.UnicastBus.MessageReceived">
      <summary>
            Event raised when a message is received.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.UnicastBus.MessagesSent">
      <summary>
            Event raised when messages are sent.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.UnicastBus.NoSubscribersForMessage">
      <summary>
            Event raised when no subscribers found for the published message.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.UnicastBus.ClientSubscribed">
      <summary>
            Event raised when client subscribed to a message type.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.UnicastBus.Started">
      <summary>
            Implementation of IStartableBus.Started event.
            </summary>
    </member>
    <member name="T:NServiceBus.CircuitBreakers.CircuitBreaker">
      <summary>
            A circuit breaker implementation.
            </summary>
    </member>
    <member name="M:NServiceBus.CircuitBreakers.CircuitBreaker.#ctor(System.Int32,System.TimeSpan)">
      <summary>
            Create a <see cref="T:NServiceBus.CircuitBreakers.CircuitBreaker" />.
            </summary>
      <param name="threshold">Number of triggers before it fires.</param>
      <param name="resetEvery">The <see cref="T:System.TimeSpan" /> to wait before resetting the <see cref="T:NServiceBus.CircuitBreakers.CircuitBreaker" />.</param>
    </member>
    <member name="M:NServiceBus.CircuitBreakers.CircuitBreaker.Execute(System.Action)">
      <summary>
            Method to execute.
            </summary>
      <param name="trigger">The callback to execute.</param>
    </member>
    <member name="T:NServiceBus.Utils.BackOff">
      <summary>
            A utility class that does a sleep on very call up to a limit based on a condition.
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.BackOff.#ctor(System.Int32)">
      <summary>
            Initialises a new instance.
            </summary>
      <param name="maximum">The maximum number of milliseconds for which the thread is blocked.</param>
    </member>
    <member name="M:NServiceBus.Utils.BackOff.Wait(System.Func{System.Boolean})">
      <summary>
            It executes the Thread sleep if condition is <c>true</c>, otherwise it resets.
            </summary>
      <param name="condition">If the condition is <c>true</c> then the wait is performed.</param>
    </member>
    <member name="T:NServiceBus.Utils.FileVersionRetriever">
      <summary>
            Helper class to retrieve File version.
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.FileVersionRetriever.GetFileVersion(System.Type)">
      <summary>
            Retrieves a semver compliant version from a <see cref="T:System.Type" />.
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> to retrieve version from.</param>
      <returns>SemVer compliant version.</returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.LateBoundMethod">
      <summary>
            Late Bound Method
            </summary>
      <param name="target">Target object</param>
      <param name="arguments">Arguments</param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.LateBoundProperty">
      <summary>
            Late Bound Property
            </summary>
      <param name="target">Target Object</param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.LateBoundField">
      <summary>
            Late Bound Field
            </summary>
      <param name="target">Target Objects </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.LateBoundFieldSet">
      <summary>
            Late Bound Field Set
            </summary>
      <param name="target">Target Object</param>
      <param name="value">
      </param>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.LateBoundPropertySet">
      <summary>
            Late Bound Property Set
            </summary>
      <param name="target">Target Object</param>
      <param name="value">
      </param>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.DelegateFactory">
      <summary>
            Delegate Factory
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.Create(System.Reflection.MethodInfo)">
      <summary>
            Create Late Bound methods
            </summary>
      <param name="method">MethodInfo</param>
      <returns>LateBoundMethod</returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.Create(System.Reflection.PropertyInfo)">
      <summary>
            Creates LateBoundProperty
            </summary>
      <param name="property">PropertyInfo</param>
      <returns>LateBoundProperty</returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.Create(System.Reflection.FieldInfo)">
      <summary>
            LateBoundField
            </summary>
      <param name="field">FieldInfo</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.CreateSet(System.Reflection.FieldInfo)">
      <summary>
            Create filed set 
            </summary>
      <param name="field">FieldInfo</param>
      <returns>LateBoundFieldSet</returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.CreateSet(System.Reflection.PropertyInfo)">
      <summary>
            Creates Property Set 
            </summary>
      <param name="property">PropertyInfo</param>
      <returns>LateBoundPropertySet</returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.ExtensionMethods">
      <summary>
            Contains extension methods
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.IsGenericallyEquivalent(System.Type,System.Type,System.Type)">
      <summary>
            Useful for finding if a type is (for example) IMessageHandler{T} where T : IMessage.
            </summary>
      <param name="type">
      </param>
      <param name="openGenericType">
      </param>
      <param name="genericArg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.GetGenericallyContainedType(System.Type,System.Type,System.Type)">
      <summary>
            Returns the enclosed generic type given that the type is GenericallyEquivalent.
            </summary>
      <param name="type">
      </param>
      <param name="openGenericType">
      </param>
      <param name="genericArg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.IsSimpleType(System.Type)">
      <summary>
            Returns true if the type can be serialized as is.
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.SerializationFriendlyName(System.Type)">
      <summary>
            Takes the name of the given type and makes it friendly for serialization
            by removing problematic characters.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.Reflect">
      <summary>
            Provides strong-typed reflection for static members of any type or calling 
            object constructors (to retrieve the constructor <see cref="T:System.Reflection.MethodInfo" />).
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.#ctor">
      <summary>
            Initializes the reflector class.
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetConstructor(System.Linq.Expressions.Expression{System.Action})">
      <summary>
            Gets the constructor represented in the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="constructor" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="constructor" /> is not a lambda expression or it does not represent a constructor invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetMethod(System.Linq.Expressions.Expression{System.Action})">
      <summary>
            Gets the method represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="method" /> is not a lambda expression or it does not represent a method invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetProperty(System.Linq.Expressions.Expression{System.Func{System.Object}})">
      <summary>
            Gets the property represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="property" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="property" /> is not a lambda expression or it does not represent a property access.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetField(System.Linq.Expressions.Expression{System.Func{System.Object}})">
      <summary>
            Gets the field represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="field" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="field" /> is not a lambda expression or it does not represent a field access.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetMethodInfo(System.Linq.Expressions.Expression)">
      <summary>
            Returns a MethodInfo for an expression containing a call to a method.
            </summary>
      <param name="method">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetMemberInfo(System.Linq.Expressions.Expression)">
      <summary>
            Returns a MemberInfo for an expression containing a call to a property.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetMemberInfo(System.Linq.Expressions.Expression,System.Boolean)">
      <summary>
            Returns a MemberInfo for an expression containing a call to a property.
            </summary>
      <param name="member">
      </param>
      <param name="checkForSingleDot">Checks that the member expression doesn't have more than one dot like a.Prop.Val</param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.Reflect`1">
      <summary>
            Provides strong-typed reflection of the <typeparamref name="TTarget" /> 
            type.
            </summary>
      <typeparam name="TTarget">Type to reflect.</typeparam>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
      <summary>
            Gets the method represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="method" /> is not a lambda expression or it does not represent a method invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod``1(System.Linq.Expressions.Expression{System.Action{`0,``0}})">
      <summary>
            Gets the method represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="method" /> is not a lambda expression or it does not represent a method invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}})">
      <summary>
            Gets the method represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="method" /> is not a lambda expression or it does not represent a method invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}})">
      <summary>
            Gets the method represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="method" /> is not a lambda expression or it does not represent a method invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Gets the property represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="property" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="property" /> is not a lambda expression or it does not represent a property access.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
      <summary>
            Gets the property represented by the lambda expression.        
            </summary>
      <param name="property">
      </param>
      <param name="checkForSingleDot">If checkForSingleDot is true, then the property expression is checked to see that only a single dot is present.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Gets the field represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="field" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="field" /> is not a lambda expression or it does not represent a field access.</exception>
    </member>
    <member name="T:NServiceBus.Utils.RegistryReader`1">
      <summary>
            Wrapper to read registry keys.
            </summary>
      <typeparam name="T">The type of the key to retrieve</typeparam>
    </member>
    <member name="M:NServiceBus.Utils.RegistryReader`1.Read(System.String,`0)">
      <summary>
            Attempts to read the key from the registry.
            </summary>
      <param name="name">The name of the value to retrieve. This string is not case-sensitive.</param>
      <param name="defaultValue">The value to return if <paramref name="name" /> does not exist. </param>
      <returns>
            The value associated with <paramref name="name" />, with any embedded environment variables left unexpanded, or <paramref name="defaultValue" /> if <paramref name="name" /> is not found.
            </returns>
    </member>
    <member name="T:NServiceBus.WcfService`2">
      <summary>
            Generic WCF service for exposing a messaging endpoint.
            </summary>
      <typeparam name="TRequest">
      </typeparam>
      <typeparam name="TResponse">
      </typeparam>
    </member>
    <member name="T:log4net.Appender.IAppender">
      <summary>
            Implement this interface for your own strategies for printing log statements.
            </summary>
      <remarks>
        <para>
            Implementors should consider extending the <see cref="T:log4net.Appender.AppenderSkeleton" />
            class which provides a default implementation of this interface.
            </para>
        <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler" /> interface. Therefore
            they would require that the <see cref="M:log4net.Core.IOptionHandler.ActivateOptions" /> method
            be called after the appenders properties have been configured.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Appender.IAppender.Close">
      <summary>
            Closes the appender and releases resources.
            </summary>
      <remarks>
        <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
        <para>
            It is a programming error to append to a closed appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)">
      <summary>
            Log the logging event in Appender specific way.
            </summary>
      <param name="loggingEvent">The event to log</param>
      <remarks>
        <para>
            This method is called to log a message into this appender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.IAppender.Name">
      <summary>
            Gets or sets the name of this appender.
            </summary>
      <value>The name of the appender.</value>
      <remarks>
        <para>The name uniquely identifies the appender.</para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.IBulkAppender">
      <summary>
            Interface for appenders that support bulk logging.
            </summary>
      <remarks>
        <para>
            This interface extends the <see cref="T:log4net.Appender.IAppender" /> interface to
            support bulk logging of <see cref="T:log4net.Core.LoggingEvent" /> objects. Appenders
            should only implement this interface if they can bulk log efficiently.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Appender.IBulkAppender.DoAppend(log4net.Core.LoggingEvent[])">
      <summary>
            Log the array of logging events in Appender specific way.
            </summary>
      <param name="loggingEvents">The events to log</param>
      <remarks>
        <para>
            This method is called to log an array of events into this appender.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.IOptionHandler">
      <summary>
            Interface used to delay activate a configured object.
            </summary>
      <remarks>
        <para>
            This allows an object to defer activation of its options until all
            options have been set. This is required for components which have
            related options that remain ambiguous until all are set.
            </para>
        <para>
            If a component implements this interface then the <see cref="M:log4net.Core.IOptionHandler.ActivateOptions" /> method 
            must be called by the container after its all the configured properties have been set 
            and before the component can be used.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Core.IOptionHandler.ActivateOptions">
      <summary>
            Activate the options that were previously set with calls to properties.
            </summary>
      <remarks>
        <para>
            This allows an object to defer activation of its options until all
            options have been set. This is required for components which have
            related options that remain ambiguous until all are set.
            </para>
        <para>
            If a component implements this interface then this method must be called
            after its properties have been set before the component can be used.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.AppenderSkeleton">
      <summary>
            Abstract base class implementation of <see cref="T:log4net.Appender.IAppender" />. 
            </summary>
      <remarks>
        <para>
            This class provides the code for common functionality, such 
            as support for threshold filtering and support for general filters.
            </para>
        <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler" /> interface. Therefore
            they would require that the <see cref="M:log4net.Core.IOptionHandler.ActivateOptions" /> method
            be called after the appenders properties have been configured.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.c_renderBufferSize">
      <summary>
            Initial buffer size
            </summary>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.c_renderBufferMaxCapacity">
      <summary>
            Maximum buffer size before it is recycled
            </summary>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_layout">
      <summary>
            The layout of this appender.
            </summary>
      <remarks>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> for more information.
            </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_name">
      <summary>
            The name of this appender.
            </summary>
      <remarks>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Name" /> for more information.
            </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_threshold">
      <summary>
            The level threshold of this appender.
            </summary>
      <remarks>
        <para>
            There is no level threshold filtering by default.
            </para>
        <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_errorHandler">
      <summary>
            It is assumed and enforced that errorHandler is never null.
            </summary>
      <remarks>
        <para>
            It is assumed and enforced that errorHandler is never null.
            </para>
        <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_headFilter">
      <summary>
            The first filter in the filter chain.
            </summary>
      <remarks>
        <para>
            Set to <c>null</c> initially.
            </para>
        <para>
            See <see cref="T:log4net.Filter.IFilter" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_tailFilter">
      <summary>
            The last filter in the filter chain.
            </summary>
      <remarks>
            See <see cref="T:log4net.Filter.IFilter" /> for more information.
            </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_closed">
      <summary>
            Flag indicating if this appender is closed.
            </summary>
      <remarks>
            See <see cref="M:log4net.Appender.AppenderSkeleton.Close" /> for more information.
            </remarks>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_recursiveGuard">
      <summary>
            The guard prevents an appender from repeatedly calling its own DoAppend method
            </summary>
    </member>
    <member name="F:log4net.Appender.AppenderSkeleton.m_renderWriter">
      <summary>
            StringWriter used to render events
            </summary>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>Empty default constructor</para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.Finalize">
      <summary>
            Finalizes this appender by calling the implementation's 
            <see cref="M:log4net.Appender.AppenderSkeleton.Close" /> method.
            </summary>
      <remarks>
        <para>
            If this appender has not been closed then the <c>Finalize</c> method
            will call <see cref="M:log4net.Appender.AppenderSkeleton.Close" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.Close">
      <summary>
            Closes the appender and release resources.
            </summary>
      <remarks>
        <para>
            Release any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
        <para>
            It is a programming error to append to a closed appender.
            </para>
        <para>
            This method cannot be overridden by subclasses. This method 
            delegates the closing of the appender to the <see cref="M:log4net.Appender.AppenderSkeleton.OnClose" />
            method which must be overridden in the subclass.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)">
      <summary>
            Performs threshold checks and invokes filters before 
            delegating actual logging to the subclasses specific 
            <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            This method cannot be overridden by derived classes. A
            derived class should override the <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)" /> method
            which is called by this method.
            </para>
        <para>
            The implementation of this method is as follows:
            </para>
        <para>
          <list type="bullet">
            <item>
              <description>
            		Checks that the severity of the <paramref name="loggingEvent" />
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> of this
            		appender.</description>
            </item>
            <item>
              <description>
            		Checks that the <see cref="T:log4net.Filter.IFilter" /> chain accepts the 
            		<paramref name="loggingEvent" />.
            		</description>
            </item>
            <item>
              <description>
            		Calls <see cref="M:log4net.Appender.AppenderSkeleton.PreAppendCheck" /> and checks that 
            		it returns <c>true</c>.</description>
            </item>
          </list>
        </para>
        <para>
            If all of the above steps succeed then the <paramref name="loggingEvent" />
            will be passed to the abstract <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent[])">
      <summary>
            Performs threshold checks and invokes filters before 
            delegating actual logging to the subclasses specific 
            <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent[])" /> method.
            </summary>
      <param name="loggingEvents">The array of events to log.</param>
      <remarks>
        <para>
            This method cannot be overridden by derived classes. A
            derived class should override the <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent[])" /> method
            which is called by this method.
            </para>
        <para>
            The implementation of this method is as follows:
            </para>
        <para>
          <list type="bullet">
            <item>
              <description>
            		Checks that the severity of the <paramref name="loggingEvent" />
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> of this
            		appender.</description>
            </item>
            <item>
              <description>
            		Checks that the <see cref="T:log4net.Filter.IFilter" /> chain accepts the 
            		<paramref name="loggingEvent" />.
            		</description>
            </item>
            <item>
              <description>
            		Calls <see cref="M:log4net.Appender.AppenderSkeleton.PreAppendCheck" /> and checks that 
            		it returns <c>true</c>.</description>
            </item>
          </list>
        </para>
        <para>
            If all of the above steps succeed then the <paramref name="loggingEvents" />
            will be passed to the <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent[])" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.FilterEvent(log4net.Core.LoggingEvent)">
      <summary>
            Test if the logging event should we output by this appender
            </summary>
      <param name="loggingEvent">the event to test</param>
      <returns>
        <c>true</c> if the event should be output, <c>false</c> if the event should be ignored</returns>
      <remarks>
        <para>
            This method checks the logging event against the threshold level set
            on this appender and also against the filters specified on this
            appender.
            </para>
        <para>
            The implementation of this method is as follows:
            </para>
        <para>
          <list type="bullet">
            <item>
              <description>
            		Checks that the severity of the <paramref name="loggingEvent" />
            		is greater than or equal to the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> of this
            		appender.</description>
            </item>
            <item>
              <description>
            		Checks that the <see cref="T:log4net.Filter.IFilter" /> chain accepts the 
            		<paramref name="loggingEvent" />.
            		</description>
            </item>
          </list>
        </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.AddFilter(log4net.Filter.IFilter)">
      <summary>
            Adds a filter to the end of the filter chain.
            </summary>
      <param name="filter">the filter to add to this appender</param>
      <remarks>
        <para>
            The Filters are organized in a linked list.
            </para>
        <para>
            Setting this property causes the new filter to be pushed onto the 
            back of the filter chain.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.ClearFilters">
      <summary>
            Clears the filter list for this appender.
            </summary>
      <remarks>
        <para>
            Clears the filter list for this appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.IsAsSevereAsThreshold(log4net.Core.Level)">
      <summary>
            Checks if the message level is below this appender's threshold.
            </summary>
      <param name="level">
        <see cref="T:log4net.Core.Level" /> to test against.</param>
      <remarks>
        <para>
            If there is no threshold set, then the return value is always <c>true</c>.
            </para>
      </remarks>
      <returns>
        <c>true</c> if the <paramref name="level" /> meets the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> 
            requirements of this appender.
            </returns>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.OnClose">
      <summary>
            Is called when the appender is closed. Derived classes should override 
            this method if resources need to be released.
            </summary>
      <remarks>
        <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
        <para>
            It is a programming error to append to a closed appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)">
      <summary>
            Subclasses of <see cref="T:log4net.Appender.AppenderSkeleton" /> should implement this method 
            to perform actual logging.
            </summary>
      <param name="loggingEvent">The event to append.</param>
      <remarks>
        <para>
            A subclass must implement this method to perform
            logging of the <paramref name="loggingEvent" />.
            </para>
        <para>This method will be called by <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" />
            if all the conditions listed for that method are met.
            </para>
        <para>
            To restrict the logging of events in the appender
            override the <see cref="M:log4net.Appender.AppenderSkeleton.PreAppendCheck" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent[])">
      <summary>
            Append a bulk array of logging events.
            </summary>
      <param name="loggingEvents">the array of logging events</param>
      <remarks>
        <para>
            This base class implementation calls the <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)" />
            method for each element in the bulk array.
            </para>
        <para>
            A sub class that can better process a bulk array of events should
            override this method in addition to <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.PreAppendCheck">
      <summary>
            Called before <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)" /> as a precondition.
            </summary>
      <remarks>
        <para>
            This method is called by <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" />
            before the call to the abstract <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)" /> method.
            </para>
        <para>
            This method can be overridden in a subclass to extend the checks 
            made before the event is passed to the <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)" /> method.
            </para>
        <para>
            A subclass should ensure that they delegate this call to
            this base class if it is overridden.
            </para>
      </remarks>
      <returns>
        <c>true</c> if the call to <see cref="M:log4net.Appender.AppenderSkeleton.Append(log4net.Core.LoggingEvent)" /> should proceed.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(log4net.Core.LoggingEvent)">
      <summary>
            Renders the <see cref="T:log4net.Core.LoggingEvent" /> to a string.
            </summary>
      <param name="loggingEvent">The event to render.</param>
      <returns>The event rendered as a string.</returns>
      <remarks>
        <para>
            Helper method to render a <see cref="T:log4net.Core.LoggingEvent" /> to 
            a string. This appender must have a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" />
            set to render the <paramref name="loggingEvent" /> to 
            a string.
            </para>
        <para>If there is exception data in the logging event and 
            the layout does not process the exception, this method 
            will append the exception text to the rendered string.
            </para>
        <para>
            Where possible use the alternative version of this method
            <see cref="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(System.IO.TextWriter,log4net.Core.LoggingEvent)" />.
            That method streams the rendering onto an existing Writer
            which can give better performance if the caller already has
            a <see cref="T:System.IO.TextWriter" /> open and ready for writing.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Renders the <see cref="T:log4net.Core.LoggingEvent" /> to a string.
            </summary>
      <param name="loggingEvent">The event to render.</param>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <remarks>
        <para>
            Helper method to render a <see cref="T:log4net.Core.LoggingEvent" /> to 
            a string. This appender must have a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" />
            set to render the <paramref name="loggingEvent" /> to 
            a string.
            </para>
        <para>If there is exception data in the logging event and 
            the layout does not process the exception, this method 
            will append the exception text to the rendered string.
            </para>
        <para>
            Use this method in preference to <see cref="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(log4net.Core.LoggingEvent)" />
            where possible. If, however, the caller needs to render the event
            to a string then <see cref="M:log4net.Appender.AppenderSkeleton.RenderLoggingEvent(log4net.Core.LoggingEvent)" /> does
            provide an efficient mechanism for doing so.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.Threshold">
      <summary>
            Gets or sets the threshold <see cref="T:log4net.Core.Level" /> of this appender.
            </summary>
      <value>
            The threshold <see cref="T:log4net.Core.Level" /> of the appender. 
            </value>
      <remarks>
        <para>
            All log events with lower level than the threshold level are ignored 
            by the appender.
            </para>
        <para>
            In configuration files this option is specified by setting the
            value of the <see cref="P:log4net.Appender.AppenderSkeleton.Threshold" /> option to a level
            string, such as "DEBUG", "INFO" and so on.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.ErrorHandler">
      <summary>
            Gets or sets the <see cref="T:log4net.Core.IErrorHandler" /> for this appender.
            </summary>
      <value>The <see cref="T:log4net.Core.IErrorHandler" /> of the appender</value>
      <remarks>
        <para>
            The <see cref="T:log4net.Appender.AppenderSkeleton" /> provides a default 
            implementation for the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" /> property. 
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.FilterHead">
      <summary>
            The filter chain.
            </summary>
      <value>The head of the filter chain filter chain.</value>
      <remarks>
        <para>
            Returns the head Filter. The Filters are organized in a linked list
            and so all Filters on this Appender are available through the result.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.Layout">
      <summary>
            Gets or sets the <see cref="T:log4net.Layout.ILayout" /> for this appender.
            </summary>
      <value>The layout of the appender.</value>
      <remarks>
        <para>
            See <see cref="P:log4net.Appender.AppenderSkeleton.RequiresLayout" /> for more information.
            </para>
      </remarks>
      <seealso cref="P:log4net.Appender.AppenderSkeleton.RequiresLayout" />
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.Name">
      <summary>
            Gets or sets the name of this appender.
            </summary>
      <value>The name of the appender.</value>
      <remarks>
        <para>
            The name uniquely identifies the appender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AppenderSkeleton.RequiresLayout">
      <summary>
            Tests if this appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> to be set.
            </summary>
      <remarks>
        <para>
            In the rather exceptional case, where the appender 
            implementation admits a layout but can also work without it, 
            then the appender should return <c>true</c>.
            </para>
        <para>
            This default implementation always returns <c>true</c>.
            </para>
      </remarks>
      <returns>
        <c>true</c> if the appender requires a layout object, otherwise <c>false</c>.
            </returns>
    </member>
    <member name="T:log4net.Appender.BufferingAppenderSkeleton">
      <summary>
            Abstract base class implementation of <see cref="T:log4net.Appender.IAppender" /> that 
            buffers events in a fixed size buffer.
            </summary>
      <remarks>
        <para>
            This base class should be used by appenders that need to buffer a 
            number of events before logging them. For example the <see cref="T:log4net.Appender.AdoNetAppender" /> 
            buffers events and then submits the entire contents of the buffer to 
            the underlying database in one go.
            </para>
        <para>
            Subclasses should override the <see cref="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])" />
            method to deliver the buffered events.
            </para>
        <para>The BufferingAppenderSkeleton maintains a fixed size cyclic 
            buffer of events. The size of the buffer is set using 
            the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> property.
            </para>
        <para>A <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> is used to inspect 
            each event as it arrives in the appender. If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> 
            triggers, then the current buffer is sent immediately 
            (see <see cref="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])" />). Otherwise the event 
            is stored in the buffer. For example, an evaluator can be used to 
            deliver the events immediately when an ERROR event arrives.
            </para>
        <para>
            The buffering appender can be configured in a <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> mode. 
            By default the appender is NOT lossy. When the buffer is full all 
            the buffered events are sent with <see cref="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])" />.
            If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> property is set to <c>true</c> then the 
            buffer will not be sent when it is full, and new events arriving 
            in the appender will overwrite the oldest event in the buffer. 
            In lossy mode the buffer will only be sent when the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" />
            triggers. This can be useful behavior when you need to know about 
            ERROR events but not about events with a lower level, configure an 
            evaluator that will trigger when an ERROR event arrives, the whole 
            buffer will be sent which gives a history of events leading up to
            the ERROR event.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.DEFAULT_BUFFER_SIZE">
      <summary>
            The default buffer size.
            </summary>
      <remarks>
            The default size of the cyclic buffer used to store events.
            This is set to 512 by default.
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_bufferSize">
      <summary>
            The size of the cyclic buffer used to hold the logging events.
            </summary>
      <remarks>
            Set to <see cref="F:log4net.Appender.BufferingAppenderSkeleton.DEFAULT_BUFFER_SIZE" /> by default.
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_cb">
      <summary>
            The cyclic buffer used to store the logging events.
            </summary>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_evaluator">
      <summary>
            The triggering event evaluator that causes the buffer to be sent immediately.
            </summary>
      <remarks>
            The object that is used to determine if an event causes the entire
            buffer to be sent immediately. This field can be <c>null</c>, which 
            indicates that event triggering is not to be done. The evaluator
            can be set using the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> property. If this appender
            has the <see cref="F:log4net.Appender.BufferingAppenderSkeleton.m_lossy" /> (<see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> property) set to 
            <c>true</c> then an <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must be set.
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_lossy">
      <summary>
            Indicates if the appender should overwrite events in the cyclic buffer 
            when it becomes full, or if the buffer should be flushed when the 
            buffer is full.
            </summary>
      <remarks>
            If this field is set to <c>true</c> then an <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must 
            be set.
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_lossyEvaluator">
      <summary>
            The triggering event evaluator filters discarded events.
            </summary>
      <remarks>
            The object that is used to determine if an event that is discarded should
            really be discarded or if it should be sent to the appenders. 
            This field can be <c>null</c>, which indicates that all discarded events will
            be discarded. 
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_fixFlags">
      <summary>
            Value indicating which fields in the event should be fixed
            </summary>
      <remarks>
            By default all fields are fixed
            </remarks>
    </member>
    <member name="F:log4net.Appender.BufferingAppenderSkeleton.m_eventMustBeFixed">
      <summary>
            The events delivered to the subclass must be fixed.
            </summary>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingAppenderSkeleton" /> class.
            </summary>
      <remarks>
        <para>
            Protected default constructor to allow subclassing.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingAppenderSkeleton" /> class.
            </summary>
      <param name="eventMustBeFixed">the events passed through this appender must be
            fixed by the time that they arrive in the derived class' <c>SendBuffer</c> method.</param>
      <remarks>
        <para>
            Protected constructor to allow subclassing.
            </para>
        <para>
            The <paramref name="eventMustBeFixed" /> should be set if the subclass
            expects the events delivered to be fixed even if the 
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> is set to zero, i.e. when no buffering occurs.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.Flush">
      <summary>
            Flush the currently buffered events
            </summary>
      <remarks>
        <para>
            Flushes any events that have been buffered.
            </para>
        <para>
            If the appender is buffering in <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> mode then the contents
            of the buffer will NOT be flushed to the appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.Flush(System.Boolean)">
      <summary>
            Flush the currently buffered events
            </summary>
      <param name="flushLossyBuffer">set to <c>true</c> to flush the buffer of lossy events</param>
      <remarks>
        <para>
            Flushes events that have been buffered. If <paramref name="flushLossyBuffer" /> is
            <c>false</c> then events will only be flushed if this buffer is non-lossy mode.
            </para>
        <para>
            If the appender is buffering in <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> mode then the contents
            of the buffer will only be flushed if <paramref name="flushLossyBuffer" /> is <c>true</c>.
            In this case the contents of the buffer will be tested against the 
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.LossyEvaluator" /> and if triggering will be output. All other buffered
            events will be discarded.
            </para>
        <para>
            If <paramref name="flushLossyBuffer" /> is <c>true</c> then the buffer will always
            be emptied by calling this method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.BufferingAppenderSkeleton.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.OnClose">
      <summary>
            Close this appender instance.
            </summary>
      <remarks>
        <para>
            Close this appender instance. If this appender is marked
            as not <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> then the remaining events in 
            the buffer must be sent when the appender is closed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method. 
            </summary>
      <param name="loggingEvent">the event to log</param>
      <remarks>
        <para>
            Stores the <paramref name="loggingEvent" /> in the cyclic buffer.
            </para>
        <para>
            The buffer will be sent (i.e. passed to the <see cref="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])" /> 
            method) if one of the following conditions is met:
            </para>
        <list type="bullet">
          <item>
            <description>The cyclic buffer is full and this appender is
            		marked as not lossy (see <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" />)</description>
          </item>
          <item>
            <description>An <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> is set and
            		it is triggered for the <paramref name="loggingEvent" />
            		specified.</description>
          </item>
        </list>
        <para>
            Before the event is stored in the buffer it is fixed
            (see <see cref="M:log4net.Core.LoggingEvent.FixVolatileData(log4net.Core.FixFlags)" />) to ensure that
            any data referenced by the event will be valid when the buffer
            is processed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.SendFromBuffer(log4net.Core.LoggingEvent,log4net.Util.CyclicBuffer)">
      <summary>
            Sends the contents of the buffer.
            </summary>
      <param name="firstLoggingEvent">The first logging event.</param>
      <param name="buffer">The buffer containing the events that need to be send.</param>
      <remarks>
        <para>
            The subclass must override <see cref="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Sends the events.
            </summary>
      <param name="events">The events that need to be send.</param>
      <remarks>
        <para>
            The subclass must override this method to process the buffered events.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.Lossy">
      <summary>
            Gets or sets a value that indicates whether the appender is lossy.
            </summary>
      <value>
        <c>true</c> if the appender is lossy, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
      <remarks>
        <para>
            This appender uses a buffer to store logging events before 
            delivering them. A triggering event causes the whole buffer
            to be send to the remote sink. If the buffer overruns before
            a triggering event then logging events could be lost. Set
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> to <c>false</c> to prevent logging events 
            from being lost.
            </para>
        <para>If <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> is set to <c>true</c> then an
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must be specified.</para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize">
      <summary>
            Gets or sets the size of the cyclic buffer used to hold the 
            logging events.
            </summary>
      <value>
            The size of the cyclic buffer used to hold the logging events.
            </value>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> option takes a positive integer
            representing the maximum number of logging events to collect in 
            a cyclic buffer. When the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> is reached,
            oldest events are deleted as new events are added to the
            buffer. By default the size of the cyclic buffer is 512 events.
            </para>
        <para>
            If the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> is set to a value less than
            or equal to 1 then no buffering will occur. The logging event
            will be delivered synchronously (depending on the <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" />
            and <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> properties). Otherwise the event will
            be buffered.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator">
      <summary>
            Gets or sets the <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> that causes the 
            buffer to be sent immediately.
            </summary>
      <value>
            The <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> that causes the buffer to be
            sent immediately.
            </value>
      <remarks>
        <para>
            The evaluator will be called for each event that is appended to this 
            appender. If the evaluator triggers then the current buffer will 
            immediately be sent (see <see cref="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])" />).
            </para>
        <para>If <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Lossy" /> is set to <c>true</c> then an
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.Evaluator" /> must be specified.</para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.LossyEvaluator">
      <summary>
            Gets or sets the value of the <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> to use.
            </summary>
      <value>
            The value of the <see cref="T:log4net.Core.ITriggeringEventEvaluator" /> to use.
            </value>
      <remarks>
        <para>
            The evaluator will be called for each event that is discarded from this 
            appender. If the evaluator triggers then the current buffer will immediately 
            be sent (see <see cref="M:log4net.Appender.BufferingAppenderSkeleton.SendBuffer(log4net.Core.LoggingEvent[])" />).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.OnlyFixPartialEventData">
      <summary>
            Gets or sets a value indicating if only part of the logging event data
            should be fixed.
            </summary>
      <value>
        <c>true</c> if the appender should only fix part of the logging event 
            data, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
      <remarks>
        <para>
            Setting this property to <c>true</c> will cause only part of the
            event data to be fixed and serialized. This will improve performance.
            </para>
        <para>
            See <see cref="M:log4net.Core.LoggingEvent.FixVolatileData(log4net.Core.FixFlags)" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingAppenderSkeleton.Fix">
      <summary>
            Gets or sets a the fields that will be fixed in the event
            </summary>
      <value>
            The event fields that will be fixed before the event is buffered
            </value>
      <remarks>
        <para>
            The logging event needs to have certain thread specific values 
            captured before it can be buffered. See <see cref="P:log4net.Core.LoggingEvent.Fix" />
            for details.
            </para>
      </remarks>
      <seealso cref="P:log4net.Core.LoggingEvent.Fix" />
    </member>
    <member name="T:log4net.Appender.AdoNetAppender">
      <summary>
            Appender that logs to a database.
            </summary>
      <remarks>
        <para>
          <see cref="T:log4net.Appender.AdoNetAppender" /> appends logging events to a table within a
            database. The appender can be configured to specify the connection 
            string by setting the <see cref="P:log4net.Appender.AdoNetAppender.ConnectionString" /> property. 
            The connection type (provider) can be specified by setting the <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType" />
            property. For more information on database connection strings for
            your specific database see <a href="http://www.connectionstrings.com/">http://www.connectionstrings.com/</a>.
            </para>
        <para>
            Records are written into the database either using a prepared
            statement or a stored procedure. The <see cref="P:log4net.Appender.AdoNetAppender.CommandType" /> property
            is set to <see cref="F:System.Data.CommandType.Text" /> (<c>System.Data.CommandType.Text</c>) to specify a prepared statement
            or to <see cref="F:System.Data.CommandType.StoredProcedure" /> (<c>System.Data.CommandType.StoredProcedure</c>) to specify a stored
            procedure.
            </para>
        <para>
            The prepared statement text or the name of the stored procedure
            must be set in the <see cref="P:log4net.Appender.AdoNetAppender.CommandText" /> property.
            </para>
        <para>
            The prepared statement or stored procedure can take a number
            of parameters. Parameters are added using the <see cref="M:log4net.Appender.AdoNetAppender.AddParameter(log4net.Appender.AdoNetAppenderParameter)" />
            method. This adds a single <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> to the
            ordered list of parameters. The <see cref="T:log4net.Appender.AdoNetAppenderParameter" />
            type may be subclassed if required to provide database specific
            functionality. The <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> specifies
            the parameter name, database type, size, and how the value should
            be generated using a <see cref="T:log4net.Layout.ILayout" />.
            </para>
      </remarks>
      <example>
            An example of a SQL Server table that could be logged to:
            <code lang="SQL">
            CREATE TABLE [dbo].[Log] ( 
              [ID] [int] IDENTITY (1, 1) NOT NULL ,
              [Date] [datetime] NOT NULL ,
              [Thread] [varchar] (255) NOT NULL ,
              [Level] [varchar] (20) NOT NULL ,
              [Logger] [varchar] (255) NOT NULL ,
              [Message] [varchar] (4000) NOT NULL 
            ) ON [PRIMARY]
            </code></example>
      <example>
            An example configuration to log to the above table:
            <code lang="XML" escaped="true"><appender name="AdoNetAppender_SqlServer" type="log4net.Appender.AdoNetAppender"><connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" /><connectionString value="data source=SQLSVR;initial catalog=test_log4net;integrated security=false;persist security info=True;User ID=sa;Password=sa" /><commandText value="INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)" /><parameter><parameterName value="@log_date" /><dbType value="DateTime" /><layout type="log4net.Layout.PatternLayout" value="%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}" /></parameter><parameter><parameterName value="@thread" /><dbType value="String" /><size value="255" /><layout type="log4net.Layout.PatternLayout" value="%thread" /></parameter><parameter><parameterName value="@log_level" /><dbType value="String" /><size value="50" /><layout type="log4net.Layout.PatternLayout" value="%level" /></parameter><parameter><parameterName value="@logger" /><dbType value="String" /><size value="255" /><layout type="log4net.Layout.PatternLayout" value="%logger" /></parameter><parameter><parameterName value="@message" /><dbType value="String" /><size value="4000" /><layout type="log4net.Layout.PatternLayout" value="%message" /></parameter></appender></code></example>
      <author>Julian Biddle</author>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Lance Nehring</author>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_usePreparedCommand">
      <summary>
            Flag to indicate if we are using a command object
            </summary>
      <remarks>
        <para>
            Set to <c>true</c> when the appender is to use a prepared
            statement or stored procedure to insert into the database.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_parameters">
      <summary>
            The list of <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> objects.
            </summary>
      <remarks>
        <para>
            The list of <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> objects.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_securityContext">
      <summary>
            The security context to use for privileged calls
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_dbConnection">
      <summary>
            The <see cref="T:System.Data.IDbConnection" /> that will be used
            to insert logging events into a database.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_dbCommand">
      <summary>
            The database command.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_connectionString">
      <summary>
            Database connection string.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_connectionType">
      <summary>
            String type name of the <see cref="T:System.Data.IDbConnection" /> type name.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_commandText">
      <summary>
            The text of the command.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_commandType">
      <summary>
            The command type.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_useTransactions">
      <summary>
            Indicates whether to use transactions when writing to the database.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppender.m_reconnectOnError">
      <summary>
            Indicates whether to use transactions when writing to the database.
            </summary>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.#ctor">
      <summary> 
            Initializes a new instance of the <see cref="T:log4net.Appender.AdoNetAppender" /> class.
            </summary>
      <remarks>
            Public default constructor to initialize a new instance of this class.
            </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.AdoNetAppender.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.OnClose">
      <summary>
            Override the parent method to close the database
            </summary>
      <remarks>
        <para>
            Closes the database command and database connection.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Inserts the events into the database.
            </summary>
      <param name="events">The events to insert into the database.</param>
      <remarks>
        <para>
            Insert all the events specified in the <paramref name="events" />
            array into the database.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.AddParameter(log4net.Appender.AdoNetAppenderParameter)">
      <summary>
            Adds a parameter to the command.
            </summary>
      <param name="parameter">The parameter to add to the command.</param>
      <remarks>
        <para>
            Adds a parameter to the ordered list of command parameters.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.SendBuffer(System.Data.IDbTransaction,log4net.Core.LoggingEvent[])">
      <summary>
            Writes the events to the database using the transaction specified.
            </summary>
      <param name="dbTran">The transaction that the events will be executed under.</param>
      <param name="events">The array of events to insert into the database.</param>
      <remarks>
        <para>
            The transaction argument can be <c>null</c> if the appender has been
            configured not to use transactions. See <see cref="P:log4net.Appender.AdoNetAppender.UseTransactions" />
            property for more information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.GetLogStatement(log4net.Core.LoggingEvent)">
      <summary>
            Formats the log message into database statement text.
            </summary>
      <param name="logEvent">The event being logged.</param>
      <remarks>
            This method can be overridden by subclasses to provide 
            more control over the format of the database statement.
            </remarks>
      <returns>
            Text that can be passed to a <see cref="T:System.Data.IDbCommand" />.
            </returns>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.InitializeDatabaseConnection">
      <summary>
            Connects to the database.
            </summary>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.ResolveConnectionType">
      <summary>
            Retrieves the class type of the ADO.NET provider.
            </summary>
      <remarks>
        <para>
            Gets the Type of the ADO.NET provider to use to connect to the
            database. This method resolves the type specified in the 
            <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType" /> property.
            </para>
        <para>
            Subclasses can override this method to return a different type
            if necessary.
            </para>
      </remarks>
      <returns>The <see cref="T:System.Type" /> of the ADO.NET provider</returns>
    </member>
    <member name="M:log4net.Appender.AdoNetAppender.InitializeDatabaseCommand">
      <summary>
            Prepares the database command and initialize the parameters.
            </summary>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.ConnectionString">
      <summary>
            Gets or sets the database connection string that is used to connect to 
            the database.
            </summary>
      <value>
            The database connection string used to connect to the database.
            </value>
      <remarks>
        <para>
            The connections string is specific to the connection type.
            See <see cref="P:log4net.Appender.AdoNetAppender.ConnectionType" /> for more information.
            </para>
      </remarks>
      <example>Connection string for MS Access via ODBC:
            <code>"DSN=MS Access Database;UID=admin;PWD=;SystemDB=C:\data\System.mdw;SafeTransactions = 0;FIL=MS Access;DriverID = 25;DBQ=C:\data\train33.mdb"</code></example>
      <example>Another connection string for MS Access via ODBC:
            <code>"Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"</code></example>
      <example>Connection string for MS Access via OLE DB:
            <code>"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"</code></example>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.ConnectionType">
      <summary>
            Gets or sets the type name of the <see cref="T:System.Data.IDbConnection" /> connection
            that should be created.
            </summary>
      <value>
            The type name of the <see cref="T:System.Data.IDbConnection" /> connection.
            </value>
      <remarks>
        <para>
            The type name of the ADO.NET provider to use.
            </para>
        <para>
            The default is to use the OLE DB provider.
            </para>
      </remarks>
      <example>Use the OLE DB Provider. This is the default value.
            <code>System.Data.OleDb.OleDbConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code></example>
      <example>Use the MS SQL Server Provider. 
            <code>System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code></example>
      <example>Use the ODBC Provider. 
            <code>Microsoft.Data.Odbc.OdbcConnection,Microsoft.Data.Odbc,version=1.0.3300.0,publicKeyToken=b77a5c561934e089,culture=neutral</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>ODBC .NET Data Provider</b>.
            </example>
      <example>Use the Oracle Provider. 
            <code>System.Data.OracleClient.OracleConnection, System.Data.OracleClient, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>.NET Managed Provider for Oracle</b>.
            </example>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.CommandText">
      <summary>
            Gets or sets the command text that is used to insert logging events
            into the database.
            </summary>
      <value>
            The command text used to insert logging events into the database.
            </value>
      <remarks>
        <para>
            Either the text of the prepared statement or the
            name of the stored procedure to execute to write into
            the database.
            </para>
        <para>
            The <see cref="P:log4net.Appender.AdoNetAppender.CommandType" /> property determines if
            this text is a prepared statement or a stored procedure.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.CommandType">
      <summary>
            Gets or sets the command type to execute.
            </summary>
      <value>
            The command type to execute.
            </value>
      <remarks>
        <para>
            This value may be either <see cref="F:System.Data.CommandType.Text" /> (<c>System.Data.CommandType.Text</c>) to specify
            that the <see cref="P:log4net.Appender.AdoNetAppender.CommandText" /> is a prepared statement to execute, 
            or <see cref="F:System.Data.CommandType.StoredProcedure" /> (<c>System.Data.CommandType.StoredProcedure</c>) to specify that the
            <see cref="P:log4net.Appender.AdoNetAppender.CommandText" /> property is the name of a stored procedure
            to execute.
            </para>
        <para>
            The default value is <see cref="F:System.Data.CommandType.Text" /> (<c>System.Data.CommandType.Text</c>).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.UseTransactions">
      <summary>
            Should transactions be used to insert logging events in the database.
            </summary>
      <value>
        <c>true</c> if transactions should be used to insert logging events in
            the database, otherwise <c>false</c>. The default value is <c>true</c>.
            </value>
      <remarks>
        <para>
            Gets or sets a value that indicates whether transactions should be used
            to insert logging events in the database.
            </para>
        <para>
            When set a single transaction will be used to insert the buffered events
            into the database. Otherwise each event will be inserted without using
            an explicit transaction.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.SecurityContext">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext" /> used to call the NetSend method.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext" /> used to call the NetSend method.
            </value>
      <remarks>
        <para>
            Unless a <see cref="P:log4net.Appender.AdoNetAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.ReconnectOnError">
      <summary>
            Should this appender try to reconnect to the database on error.
            </summary>
      <value>
        <c>true</c> if the appender should try to reconnect to the database after an
            error has occurred, otherwise <c>false</c>. The default value is <c>false</c>, 
            i.e. not to try to reconnect.
            </value>
      <remarks>
        <para>
            The default behaviour is for the appender not to try to reconnect to the
            database if an error occurs. Subsequent logging events are discarded.
            </para>
        <para>
            To force the appender to attempt to reconnect to the database set this
            property to <c>true</c>.
            </para>
        <note>
            When the appender attempts to connect to the database there may be a
            delay of up to the connection timeout specified in the connection string.
            This delay will block the calling application's thread. 
            Until the connection can be reestablished this potential delay may occur multiple times.
            </note>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppender.Connection">
      <summary>
            Gets or sets the underlying <see cref="T:System.Data.IDbConnection" />.
            </summary>
      <value>
            The underlying <see cref="T:System.Data.IDbConnection" />.
            </value>
      <remarks>
        <see cref="T:log4net.Appender.AdoNetAppender" /> creates a <see cref="T:System.Data.IDbConnection" /> to insert 
            logging events into a database.  Classes deriving from <see cref="T:log4net.Appender.AdoNetAppender" /> 
            can use this property to get or set this <see cref="T:System.Data.IDbConnection" />.  Use the 
            underlying <see cref="T:System.Data.IDbConnection" /> returned from <see cref="P:log4net.Appender.AdoNetAppender.Connection" /> if 
            you require access beyond that which <see cref="T:log4net.Appender.AdoNetAppender" /> provides.
            </remarks>
    </member>
    <member name="T:log4net.Appender.AdoNetAppenderParameter">
      <summary>
            Parameter type used by the <see cref="T:log4net.Appender.AdoNetAppender" />.
            </summary>
      <remarks>
        <para>
            This class provides the basic database parameter properties
            as defined by the <see cref="T:System.Data.IDbDataParameter" /> interface.
            </para>
        <para>This type can be subclassed to provide database specific
            functionality. The two methods that are called externally are
            <see cref="M:log4net.Appender.AdoNetAppenderParameter.Prepare(System.Data.IDbCommand)" /> and <see cref="M:log4net.Appender.AdoNetAppenderParameter.FormatValue(System.Data.IDbCommand,log4net.Core.LoggingEvent)" />.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_parameterName">
      <summary>
            The name of this parameter.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_dbType">
      <summary>
            The database type for this parameter.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_inferType">
      <summary>
            Flag to infer type rather than use the DbType
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_precision">
      <summary>
            The precision for this parameter.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_scale">
      <summary>
            The scale for this parameter.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_size">
      <summary>
            The size for this parameter.
            </summary>
    </member>
    <member name="F:log4net.Appender.AdoNetAppenderParameter.m_layout">
      <summary>
            The <see cref="T:log4net.Layout.IRawLayout" /> to use to render the
            logging event into an object for this parameter.
            </summary>
    </member>
    <member name="M:log4net.Appender.AdoNetAppenderParameter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.AdoNetAppenderParameter" /> class.
            </summary>
      <remarks>
            Default constructor for the AdoNetAppenderParameter class.
            </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppenderParameter.Prepare(System.Data.IDbCommand)">
      <summary>
            Prepare the specified database command object.
            </summary>
      <param name="command">The command to prepare.</param>
      <remarks>
        <para>
            Prepares the database command object by adding
            this parameter to its collection of parameters.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AdoNetAppenderParameter.FormatValue(System.Data.IDbCommand,log4net.Core.LoggingEvent)">
      <summary>
            Renders the logging event and set the parameter value in the command.
            </summary>
      <param name="command">The command containing the parameter.</param>
      <param name="loggingEvent">The event to be rendered.</param>
      <remarks>
        <para>
            Renders the logging event using this parameters layout
            object. Sets the value of the parameter on the command object.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.ParameterName">
      <summary>
            Gets or sets the name of this parameter.
            </summary>
      <value>
            The name of this parameter.
            </value>
      <remarks>
        <para>
            The name of this parameter. The parameter name
            must match up to a named parameter to the SQL stored procedure
            or prepared statement.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.DbType">
      <summary>
            Gets or sets the database type for this parameter.
            </summary>
      <value>
            The database type for this parameter.
            </value>
      <remarks>
        <para>
            The database type for this parameter. This property should
            be set to the database type from the <see cref="P:log4net.Appender.AdoNetAppenderParameter.DbType" />
            enumeration. See <see cref="P:System.Data.IDataParameter.DbType" />.
            </para>
        <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the type from the value.
            </para>
      </remarks>
      <seealso cref="P:System.Data.IDataParameter.DbType" />
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.Precision">
      <summary>
            Gets or sets the precision for this parameter.
            </summary>
      <value>
            The precision for this parameter.
            </value>
      <remarks>
        <para>
            The maximum number of digits used to represent the Value.
            </para>
        <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the precision from the value.
            </para>
      </remarks>
      <seealso cref="P:System.Data.IDbDataParameter.Precision" />
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.Scale">
      <summary>
            Gets or sets the scale for this parameter.
            </summary>
      <value>
            The scale for this parameter.
            </value>
      <remarks>
        <para>
            The number of decimal places to which Value is resolved.
            </para>
        <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the scale from the value.
            </para>
      </remarks>
      <seealso cref="P:System.Data.IDbDataParameter.Scale" />
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.Size">
      <summary>
            Gets or sets the size for this parameter.
            </summary>
      <value>
            The size for this parameter.
            </value>
      <remarks>
        <para>
            The maximum size, in bytes, of the data within the column.
            </para>
        <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the size from the value.
            </para>
      </remarks>
      <seealso cref="P:System.Data.IDbDataParameter.Size" />
    </member>
    <member name="P:log4net.Appender.AdoNetAppenderParameter.Layout">
      <summary>
            Gets or sets the <see cref="T:log4net.Layout.IRawLayout" /> to use to 
            render the logging event into an object for this 
            parameter.
            </summary>
      <value>
            The <see cref="T:log4net.Layout.IRawLayout" /> used to render the
            logging event into an object for this parameter.
            </value>
      <remarks>
        <para>
            The <see cref="T:log4net.Layout.IRawLayout" /> that renders the value for this
            parameter.
            </para>
        <para>
            The <see cref="T:log4net.Layout.RawLayoutConverter" /> can be used to adapt
            any <see cref="T:log4net.Layout.ILayout" /> into a <see cref="T:log4net.Layout.IRawLayout" />
            for use in the property.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.AnsiColorTerminalAppender">
      <summary>
            Appends logging events to the terminal using ANSI color escape sequences.
            </summary>
      <remarks>
        <para>
            AnsiColorTerminalAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user. It also allows the color of a specific level of message to be set.
            </para>
        <note>
            This appender expects the terminal to understand the VT100 control set 
            in order to interpret the color codes. If the terminal or console does not
            understand the control codes the behavior is not defined.
            </note>
        <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> property can be set to direct the output to the
            error stream.
            </para>
        <para>
            NOTE: This appender writes each message to the <c>System.Console.Out</c> or 
            <c>System.Console.Error</c> that is set at the time the event is appended.
            Therefore it is possible to programmatically redirect the output of this appender 
            (for example NUnit does this to capture program output). While this is the desired
            behavior of this appender it may have security implications in your application. 
            </para>
        <para>
            When configuring the ANSI colored terminal appender, a mapping should be
            specified to map a logging level to a color. For example:
            </para>
        <code lang="XML" escaped="true">
          <mapping>
            <level value="ERROR" />
            <foreColor value="White" />
            <backColor value="Red" />
            <attributes value="Bright,Underscore" />
          </mapping>
          <mapping>
            <level value="DEBUG" />
            <backColor value="Green" />
          </mapping>
        </code>
        <para>
            The Level is the standard log4net logging level and ForeColor and BackColor can be any
            of the following values:
            <list type="bullet"><item><term>Blue</term><description></description></item><item><term>Green</term><description></description></item><item><term>Red</term><description></description></item><item><term>White</term><description></description></item><item><term>Yellow</term><description></description></item><item><term>Purple</term><description></description></item><item><term>Cyan</term><description></description></item></list>
            These color values cannot be combined together to make new colors.
            </para>
        <para>
            The attributes can be any combination of the following:
            <list type="bullet"><item><term>Bright</term><description>foreground is brighter</description></item><item><term>Dim</term><description>foreground is dimmer</description></item><item><term>Underscore</term><description>message is underlined</description></item><item><term>Blink</term><description>foreground is blinking (does not work on all terminals)</description></item><item><term>Reverse</term><description>foreground and background are reversed</description></item><item><term>Hidden</term><description>output is hidden</description></item><item><term>Strikethrough</term><description>message has a line through it</description></item></list>
            While any of these attributes may be combined together not all combinations
            work well together, for example setting both <i>Bright</i> and <i>Dim</i> attributes makes
            no sense.
            </para>
      </remarks>
      <author>Patrick Wagstrom</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.AnsiColorTerminalAppender.AnsiAttributes">
      <summary>
            The enum of possible display attributes
            </summary>
      <remarks>
        <para>
            The following flags can be combined together to
            form the ANSI color attributes.
            </para>
      </remarks>
      <seealso cref="T:log4net.Appender.AnsiColorTerminalAppender" />
    </member>
    <member name="T:log4net.Appender.AnsiColorTerminalAppender.AnsiColor">
      <summary>
            The enum of possible foreground or background color values for 
            use with the color mapping method
            </summary>
      <remarks>
        <para>
            The output can be in one for the following ANSI colors.
            </para>
      </remarks>
      <seealso cref="T:log4net.Appender.AnsiColorTerminalAppender" />
    </member>
    <member name="T:log4net.Appender.AnsiColorTerminalAppender.LevelColors">
      <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
      <remarks>
        <para>
            Defines the mapping between a level and the color it should be displayed in.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ActivateOptions">
      <summary>
            Initialize the options for the object
            </summary>
      <remarks>
        <para>
            Combine the <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor" /> and <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor" /> together
            and append the attributes.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor">
      <summary>
            The mapped foreground color for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped foreground color for the specified level
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor">
      <summary>
            The mapped background color for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped background color for the specified level
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.Attributes">
      <summary>
            The color attributes for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The color attributes for the specified level
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.CombinedColor">
      <summary>
            The combined <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.ForeColor" />, <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.BackColor" /> and
            <see cref="P:log4net.Appender.AnsiColorTerminalAppender.LevelColors.Attributes" /> suitable for setting the ansi terminal color.
            </summary>
    </member>
    <member name="F:log4net.Appender.AnsiColorTerminalAppender.ConsoleOut">
      <summary>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AnsiColorTerminalAppender.ConsoleError">
      <summary>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.AnsiColorTerminalAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.AnsiColorTerminalAppender.PostEventCodes">
      <summary>
            Ansi code to reset terminal
            </summary>
    </member>
    <member name="F:log4net.Appender.AnsiColorTerminalAppender.m_writeToErrorStream">
      <summary>
            Flag to write output to the error stream rather than the standard output stream
            </summary>
    </member>
    <member name="F:log4net.Appender.AnsiColorTerminalAppender.m_levelMapping">
      <summary>
            Mapping from level object to color value
            </summary>
    </member>
    <member name="M:log4net.Appender.AnsiColorTerminalAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.AnsiColorTerminalAppender" /> class.
            </summary>
      <remarks>
            The instance of the <see cref="T:log4net.Appender.AnsiColorTerminalAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.AnsiColorTerminalAppender.AddMapping(log4net.Appender.AnsiColorTerminalAppender.LevelColors)">
      <summary>
            Add a mapping of level to color
            </summary>
      <param name="mapping">The mapping to add</param>
      <remarks>
        <para>
            Add a <see cref="T:log4net.Appender.AnsiColorTerminalAppender.LevelColors" /> mapping to this appender.
            Each mapping defines the foreground and background colours
            for a level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AnsiColorTerminalAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the event to the console.
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AnsiColorTerminalAppender.ActivateOptions">
      <summary>
            Initialize the options for this appender
            </summary>
      <remarks>
        <para>
            Initialize the level to color mappings set on this appender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.Target">
      <summary>
            Target is the value of the console output stream.
            </summary>
      <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
      <remarks>
        <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AnsiColorTerminalAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.LevelMappingEntry">
      <summary>
            An entry in the <see cref="T:log4net.Util.LevelMapping" /></summary>
      <remarks>
        <para>
            This is an abstract base class for types that are stored in the
            <see cref="T:log4net.Util.LevelMapping" /> object.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.LevelMappingEntry.#ctor">
      <summary>
            Default protected constructor
            </summary>
      <remarks>
        <para>
            Default protected constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LevelMappingEntry.ActivateOptions">
      <summary>
            Initialize any options defined on this entry
            </summary>
      <remarks>
        <para>
            Should be overridden by any classes that need to initialise based on their options
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.LevelMappingEntry.Level">
      <summary>
            The level that is the key for this mapping 
            </summary>
      <value>
            The <see cref="P:log4net.Util.LevelMappingEntry.Level" /> that is the key for this mapping 
            </value>
      <remarks>
        <para>
            Get or set the <see cref="P:log4net.Util.LevelMappingEntry.Level" /> that is the key for this
            mapping subclass.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.AppenderCollection">
      <summary>
            A strongly-typed collection of <see cref="T:log4net.Appender.IAppender" /> objects.
            </summary>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator">
      <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Appender.AppenderCollection" />.
            </summary>
      <exclude />
    </member>
    <member name="M:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.IAppenderCollectionEnumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
    </member>
    <member name="T:log4net.Appender.AppenderCollection.Tag">
      <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
      <exclude />
    </member>
    <member name="T:log4net.Appender.AppenderCollection.Enumerator">
      <summary>
            Supports simple iteration over a <see cref="T:log4net.Appender.AppenderCollection" />.
            </summary>
      <exclude />
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Enumerator.#ctor(log4net.Appender.AppenderCollection)">
      <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
      <param name="tc">
      </param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.Enumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
    </member>
    <member name="T:log4net.Appender.AppenderCollection.ReadOnlyAppenderCollection">
      <exclude />
    </member>
    <member name="F:log4net.Appender.AppenderCollection.EmptyCollection">
      <summary>
            An empty readonly static AppenderCollection
            </summary>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.ReadOnly(log4net.Appender.AppenderCollection)">
      <summary>
            Creates a read-only wrapper for a <c>AppenderCollection</c> instance.
            </summary>
      <param name="list">list to create a readonly wrapper arround</param>
      <returns>
            An <c>AppenderCollection</c> wrapper that is read-only.
            </returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor">
      <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that has the specified initial capacity.
            </summary>
      <param name="capacity">
            The number of elements that the new <c>AppenderCollection</c> is initially capable of storing.
            </param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.AppenderCollection)">
      <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <c>AppenderCollection</c>.
            </summary>
      <param name="c">The <c>AppenderCollection</c> whose elements are copied to the new collection.</param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.IAppender[])">
      <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Appender.IAppender" /> array.
            </summary>
      <param name="a">The <see cref="T:log4net.Appender.IAppender" /> array whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <c>AppenderCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Appender.IAppender" /> collection.
            </summary>
      <param name="col">The <see cref="T:log4net.Appender.IAppender" /> collection whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.#ctor(log4net.Appender.AppenderCollection.Tag)">
      <summary>
            Allow subclasses to avoid our default constructors
            </summary>
      <param name="tag">
      </param>
      <exclude />
    </member>
    <member name="M:log4net.Appender.AppenderCollection.CopyTo(log4net.Appender.IAppender[])">
      <summary>
            Copies the entire <c>AppenderCollection</c> to a one-dimensional
            <see cref="T:log4net.Appender.IAppender" /> array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Appender.IAppender" /> array to copy to.</param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.CopyTo(log4net.Appender.IAppender[],System.Int32)">
      <summary>
            Copies the entire <c>AppenderCollection</c> to a one-dimensional
            <see cref="T:log4net.Appender.IAppender" /> array, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Appender.IAppender" /> array to copy to.</param>
      <param name="start">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Add(log4net.Appender.IAppender)">
      <summary>
            Adds a <see cref="T:log4net.Appender.IAppender" /> to the end of the <c>AppenderCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to be added to the end of the <c>AppenderCollection</c>.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Clear">
      <summary>
            Removes all elements from the <c>AppenderCollection</c>.
            </summary>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Clone">
      <summary>
            Creates a shallow copy of the <see cref="T:log4net.Appender.AppenderCollection" />.
            </summary>
      <returns>A new <see cref="T:log4net.Appender.AppenderCollection" /> with a shallow copy of the collection data.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Contains(log4net.Appender.IAppender)">
      <summary>
            Determines whether a given <see cref="T:log4net.Appender.IAppender" /> is in the <c>AppenderCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to check for.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> is found in the <c>AppenderCollection</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.IndexOf(log4net.Appender.IAppender)">
      <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Appender.IAppender" />
            in the <c>AppenderCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to locate in the <c>AppenderCollection</c>.</param>
      <returns>
            The zero-based index of the first occurrence of <paramref name="item" /> 
            in the entire <c>AppenderCollection</c>, if found; otherwise, -1.
            </returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Insert(System.Int32,log4net.Appender.IAppender)">
      <summary>
            Inserts an element into the <c>AppenderCollection</c> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.Remove(log4net.Appender.IAppender)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Appender.IAppender" /> from the <c>AppenderCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Appender.IAppender" /> to remove from the <c>AppenderCollection</c>.</param>
      <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Appender.IAppender" /> was not found in the <c>AppenderCollection</c>.
            </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <c>AppenderCollection</c>.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the <c>AppenderCollection</c>.
            </summary>
      <returns>An <see cref="T:log4net.Appender.AppenderCollection.Enumerator" /> for the entire <c>AppenderCollection</c>.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.AddRange(log4net.Appender.AppenderCollection)">
      <summary>
            Adds the elements of another <c>AppenderCollection</c> to the current <c>AppenderCollection</c>.
            </summary>
      <param name="x">The <c>AppenderCollection</c> whose elements should be added to the end of the current <c>AppenderCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count" /> of the <c>AppenderCollection</c>.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.AddRange(log4net.Appender.IAppender[])">
      <summary>
            Adds the elements of a <see cref="T:log4net.Appender.IAppender" /> array to the current <c>AppenderCollection</c>.
            </summary>
      <param name="x">The <see cref="T:log4net.Appender.IAppender" /> array whose elements should be added to the end of the <c>AppenderCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count" /> of the <c>AppenderCollection</c>.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of a <see cref="T:log4net.Appender.IAppender" /> collection to the current <c>AppenderCollection</c>.
            </summary>
      <param name="col">The <see cref="T:log4net.Appender.IAppender" /> collection whose elements should be added to the end of the <c>AppenderCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Appender.AppenderCollection.Count" /> of the <c>AppenderCollection</c>.</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.TrimToSize">
      <summary>
            Sets the capacity to the actual number of elements.
            </summary>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.ToArray">
      <summary>
            Return the collection elements as an array
            </summary>
      <returns>the array</returns>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.ValidateIndex(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Appender.AppenderCollection.ValidateIndex(System.Int32,System.Boolean)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.Count">
      <summary>
            Gets the number of elements actually contained in the <c>AppenderCollection</c>.
            </summary>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
      <returns>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:log4net.Appender.IAppender" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Appender.AppenderCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
      <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
      <value>true if the collection is read-only; otherwise, false. The default is false</value>
    </member>
    <member name="P:log4net.Appender.AppenderCollection.Capacity">
      <summary>
            Gets or sets the number of elements the <c>AppenderCollection</c> can contain.
            </summary>
    </member>
    <member name="T:log4net.Appender.AspNetTraceAppender">
      <summary>
        <para>
            Appends log events to the ASP.NET <see cref="T:System.Web.TraceContext" /> system.
            </para>
      </summary>
      <remarks>
        <para>
            Diagnostic information and tracing messages that you specify are appended to the output 
            of the page that is sent to the requesting browser. Optionally, you can view this information
            from a separate trace viewer (Trace.axd) that displays trace information for every page in a 
            given application.
            </para>
        <para>
            Trace statements are processed and displayed only when tracing is enabled. You can control 
            whether tracing is displayed to a page, to the trace viewer, or both.
            </para>
        <para>
            The logging event is passed to the <see cref="M:System.Web.TraceContext.Write(System.String)" /> or 
            <see cref="M:System.Web.TraceContext.Warn(System.String)" /> method depending on the level of the logging event.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Appender.AspNetTraceAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.AspNetTraceAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.AspNetTraceAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Write the logging event to the ASP.NET trace
            </summary>
      <param name="loggingEvent">the event to log</param>
      <remarks>
        <para>
            Write the logging event to the ASP.NET trace
            <c>HttpContext.Current.Trace</c> 
            (<see cref="T:System.Web.TraceContext" />).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.AspNetTraceAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.IAppenderAttachable">
      <summary>
            Interface for attaching appenders to objects.
            </summary>
      <remarks>
        <para>
            Interface for attaching, removing and retrieving appenders.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Core.IAppenderAttachable.AddAppender(log4net.Appender.IAppender)">
      <summary>
            Attaches an appender.
            </summary>
      <param name="appender">The appender to add.</param>
      <remarks>
        <para>
            Add the specified appender. The implementation may
            choose to allow or deny duplicate appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IAppenderAttachable.GetAppender(System.String)">
      <summary>
            Gets an attached appender with the specified name.
            </summary>
      <param name="name">The name of the appender to get.</param>
      <returns>
            The appender with the name specified, or <c>null</c> if no appender with the
            specified name is found.
            </returns>
      <remarks>
        <para>
            Returns an attached appender with the <paramref name="name" /> specified.
            If no appender with the specified name is found <c>null</c> will be
            returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IAppenderAttachable.RemoveAllAppenders">
      <summary>
            Removes all attached appenders.
            </summary>
      <remarks>
        <para>
            Removes and closes all attached appenders
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IAppenderAttachable.RemoveAppender(log4net.Appender.IAppender)">
      <summary>
            Removes the specified appender from the list of attached appenders.
            </summary>
      <param name="appender">The appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IAppenderAttachable.RemoveAppender(System.String)">
      <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
      <param name="name">The name of the appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.IAppenderAttachable.Appenders">
      <summary>
            Gets all attached appenders.
            </summary>
      <value>
            A collection of attached appenders.
            </value>
      <remarks>
        <para>
            Gets a collection of attached appenders.
            If there are no attached appenders the
            implementation should return an empty 
            collection rather than <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.BufferingForwardingAppender">
      <summary>
            Buffers events and then forwards them to attached appenders.
            </summary>
      <remarks>
        <para>
            The events are buffered in this appender until conditions are
            met to allow the appender to deliver the events to the attached 
            appenders. See <see cref="T:log4net.Appender.BufferingAppenderSkeleton" /> for the
            conditions that cause the buffer to be sent.
            </para>
        <para>The forwarding appender can be used to specify different 
            thresholds and filters for the same appender at different locations 
            within the hierarchy.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.BufferingForwardingAppender.m_appenderAttachedImpl">
      <summary>
            Implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            </summary>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.BufferingForwardingAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.OnClose">
      <summary>
            Closes the appender and releases resources.
            </summary>
      <remarks>
        <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
        <para>
            It is a programming error to append to a closed appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Send the events.
            </summary>
      <param name="events">The events that need to be send.</param>
      <remarks>
        <para>
            Forwards the events to the attached appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.AddAppender(log4net.Appender.IAppender)">
      <summary>
            Adds an <see cref="T:log4net.Appender.IAppender" /> to the list of appenders of this
            instance.
            </summary>
      <param name="newAppender">The <see cref="T:log4net.Appender.IAppender" /> to add to this appender.</param>
      <remarks>
        <para>
            If the specified <see cref="T:log4net.Appender.IAppender" /> is already in the list of
            appenders, then it won't be added again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.GetAppender(System.String)">
      <summary>
            Looks for the appender with the specified name.
            </summary>
      <param name="name">The name of the appender to lookup.</param>
      <returns>
            The appender with the specified name, or <c>null</c>.
            </returns>
      <remarks>
        <para>
            Get the named appender attached to this buffering appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAllAppenders">
      <summary>
            Removes all previously added appenders from this appender.
            </summary>
      <remarks>
        <para>
            This is useful when re-reading configuration information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAppender(log4net.Appender.IAppender)">
      <summary>
            Removes the specified appender from the list of appenders.
            </summary>
      <param name="appender">The appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
    </member>
    <member name="M:log4net.Appender.BufferingForwardingAppender.RemoveAppender(System.String)">
      <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
      <param name="name">The name of the appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
    </member>
    <member name="P:log4net.Appender.BufferingForwardingAppender.Appenders">
      <summary>
            Gets the appenders contained in this appender as an 
            <see cref="T:System.Collections.ICollection" />.
            </summary>
      <remarks>
            If no appenders can be found, then an <see cref="T:log4net.Util.EmptyCollection" /> 
            is returned.
            </remarks>
      <returns>
            A collection of the appenders in this appender.
            </returns>
    </member>
    <member name="T:log4net.Appender.ColoredConsoleAppender">
      <summary>
            Appends logging events to the console.
            </summary>
      <remarks>
        <para>
            ColoredConsoleAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user. It also allows the color of a specific type of message to be set.
            </para>
        <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> property can be set to direct the output to the
            error stream.
            </para>
        <para>
            NOTE: This appender writes directly to the application's attached console
            not to the <c>System.Console.Out</c> or <c>System.Console.Error</c><c>TextWriter</c>.
            The <c>System.Console.Out</c> and <c>System.Console.Error</c> streams can be
            programmatically redirected (for example NUnit does this to capture program output).
            This appender will ignore these redirections because it needs to use Win32
            API calls to colorize the output. To respect these redirections the <see cref="T:log4net.Appender.ConsoleAppender" />
            must be used.
            </para>
        <para>
            When configuring the colored console appender, mapping should be
            specified to map a logging level to a color. For example:
            </para>
        <code lang="XML" escaped="true">
          <mapping>
            <level value="ERROR" />
            <foreColor value="White" />
            <backColor value="Red, HighIntensity" />
          </mapping>
          <mapping>
            <level value="DEBUG" />
            <backColor value="Green" />
          </mapping>
        </code>
        <para>
            The Level is the standard log4net logging level and ForeColor and BackColor can be any
            combination of the following values:
            <list type="bullet"><item><term>Blue</term><description></description></item><item><term>Green</term><description></description></item><item><term>Red</term><description></description></item><item><term>White</term><description></description></item><item><term>Yellow</term><description></description></item><item><term>Purple</term><description></description></item><item><term>Cyan</term><description></description></item><item><term>HighIntensity</term><description></description></item></list></para>
      </remarks>
      <author>Rick Hobbs</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.ColoredConsoleAppender.Colors">
      <summary>
            The enum of possible color values for use with the color mapping method
            </summary>
      <remarks>
        <para>
            The following flags can be combined together to
            form the colors.
            </para>
      </remarks>
      <seealso cref="T:log4net.Appender.ColoredConsoleAppender" />
    </member>
    <member name="T:log4net.Appender.ColoredConsoleAppender.LevelColors">
      <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
      <remarks>
        <para>
            Defines the mapping between a level and the color it should be displayed in.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.LevelColors.ActivateOptions">
      <summary>
            Initialize the options for the object
            </summary>
      <remarks>
        <para>
            Combine the <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor" /> and <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor" /> together.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor">
      <summary>
            The mapped foreground color for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped foreground color for the specified level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor">
      <summary>
            The mapped background color for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped background color for the specified level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ColoredConsoleAppender.LevelColors.CombinedColor">
      <summary>
            The combined <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.ForeColor" /> and <see cref="P:log4net.Appender.ColoredConsoleAppender.LevelColors.BackColor" /> suitable for 
            setting the console color.
            </summary>
    </member>
    <member name="F:log4net.Appender.ColoredConsoleAppender.ConsoleOut">
      <summary>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.ColoredConsoleAppender.ConsoleError">
      <summary>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.ColoredConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.ColoredConsoleAppender.m_writeToErrorStream">
      <summary>
            Flag to write output to the error stream rather than the standard output stream
            </summary>
    </member>
    <member name="F:log4net.Appender.ColoredConsoleAppender.m_levelMapping">
      <summary>
            Mapping from level object to color value
            </summary>
    </member>
    <member name="F:log4net.Appender.ColoredConsoleAppender.m_consoleOutputWriter">
      <summary>
            The console output stream writer to write to
            </summary>
      <remarks>
        <para>
            This writer is not thread safe.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class.
            </summary>
      <remarks>
            The instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor(log4net.Layout.ILayout)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class
            with the specified layout.
            </summary>
      <param name="layout">the layout to use for this appender</param>
      <remarks>
            The instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.#ctor(log4net.Layout.ILayout,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ColoredConsoleAppender" /> class
            with the specified layout.
            </summary>
      <param name="layout">the layout to use for this appender</param>
      <param name="writeToErrorStream">flag set to <c>true</c> to write to the console error stream</param>
      <remarks>
            When <paramref name="writeToErrorStream" /> is set to <c>true</c>, output is written to
            the standard error output stream.  Otherwise, output is written to the standard
            output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.AddMapping(log4net.Appender.ColoredConsoleAppender.LevelColors)">
      <summary>
            Add a mapping of level to color - done by the config file
            </summary>
      <param name="mapping">The mapping to add</param>
      <remarks>
        <para>
            Add a <see cref="T:log4net.Appender.ColoredConsoleAppender.LevelColors" /> mapping to this appender.
            Each mapping defines the foreground and background colors
            for a level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the event to the console.
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ColoredConsoleAppender.ActivateOptions">
      <summary>
            Initialize the options for this appender
            </summary>
      <remarks>
        <para>
            Initialize the level to color mappings set on this appender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ColoredConsoleAppender.Target">
      <summary>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </summary>
      <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
      <remarks>
        <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ColoredConsoleAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.ConsoleAppender">
      <summary>
            Appends logging events to the console.
            </summary>
      <remarks>
        <para>
            ConsoleAppender appends log events to the standard output stream
            or the error output stream using a layout specified by the 
            user.
            </para>
        <para>
            By default, all output is written to the console's standard output stream.
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> property can be set to direct the output to the
            error stream.
            </para>
        <para>
            NOTE: This appender writes each message to the <c>System.Console.Out</c> or 
            <c>System.Console.Error</c> that is set at the time the event is appended.
            Therefore it is possible to programmatically redirect the output of this appender 
            (for example NUnit does this to capture program output). While this is the desired
            behavior of this appender it may have security implications in your application. 
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.ConsoleAppender.ConsoleOut">
      <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard output stream.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.ConsoleAppender.ConsoleError">
      <summary>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.ConsoleAppender.Target" /> to use when writing to the Console 
            standard error output stream.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ConsoleAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class.
            </summary>
      <remarks>
            The instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class
            with the specified layout.
            </summary>
      <param name="layout">the layout to use for this appender</param>
      <remarks>
            The instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class is set up to write 
            to the standard output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ConsoleAppender.#ctor(log4net.Layout.ILayout,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ConsoleAppender" /> class
            with the specified layout.
            </summary>
      <param name="layout">the layout to use for this appender</param>
      <param name="writeToErrorStream">flag set to <c>true</c> to write to the console error stream</param>
      <remarks>
            When <paramref name="writeToErrorStream" /> is set to <c>true</c>, output is written to
            the standard error output stream.  Otherwise, output is written to the standard
            output stream.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ConsoleAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the event to the console.
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ConsoleAppender.Target">
      <summary>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </summary>
      <value>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </value>
      <remarks>
        <para>
            Target is the value of the console output stream.
            This is either <c>"Console.Out"</c> or <c>"Console.Error"</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.ConsoleAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.DebugAppender">
      <summary>
            Appends log events to the <see cref="T:System.Diagnostics.Debug" /> system.
            </summary>
      <remarks>
        <para>
            The application configuration file can be used to control what listeners 
            are actually used. See the MSDN documentation for the 
            <see cref="T:System.Diagnostics.Debug" /> class for details on configuring the
            debug system.
            </para>
        <para>
            Events are written using the <see cref="M:System.Diagnostics.Debug.Write(System.String,System.String)" />
            method. The event's logger name is passed as the value for the category name to the Write method.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Appender.DebugAppender.m_immediateFlush">
      <summary>
            Immediate flush means that the underlying writer or output stream
            will be flushed at the end of each append operation.
            </summary>
      <remarks>
        <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.DebugAppender.ImmediateFlush" /> is set to
            <c>false</c>, then there is a good chance that the last few
            logs events are not actually written to persistent media if and
            when the application crashes.
            </para>
        <para>
            The default value is <c>true</c>.</para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.DebugAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.DebugAppender" />.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.DebugAppender.#ctor(log4net.Layout.ILayout)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.DebugAppender" /> 
            with a specified layout.
            </summary>
      <param name="layout">The layout to use with this appender.</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.DebugAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Writes the logging event to the <see cref="T:System.Diagnostics.Debug" /> system.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the logging event to the <see cref="T:System.Diagnostics.Debug" /> system.
            If <see cref="P:log4net.Appender.DebugAppender.ImmediateFlush" /> is <c>true</c> then the <see cref="M:System.Diagnostics.Debug.Flush" />
            is called.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.DebugAppender.ImmediateFlush">
      <summary>
            Gets or sets a value that indicates whether the appender will 
            flush at the end of each write.
            </summary>
      <remarks>
        <para>The default behavior is to flush at the end of each 
            write. If the option is set to<c>false</c>, then the underlying 
            stream can defer writing to physical medium to a later time. 
            </para>
        <para>
            Avoiding the flush operation at the end of each append results 
            in a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.DebugAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.EventLogAppender">
      <summary>
            Writes events to the system event log.
            </summary>
      <remarks>
        <para>
            The <c>EventID</c> of the event log entry can be
            set using the <c>EventLogEventID</c> property (<see cref="P:log4net.Core.LoggingEvent.Properties" />)
            on the <see cref="T:log4net.Core.LoggingEvent" />.
            </para>
        <para>
            There is a limit of 32K characters for an event log message
            </para>
        <para>
            When configuring the EventLogAppender a mapping can be
            specified to map a logging level to an event log entry type. For example:
            </para>
        <code lang="XML">
            &lt;mapping&gt;
            	&lt;level value="ERROR" /&gt;
            	&lt;eventLogEntryType value="Error" /&gt;
            &lt;/mapping&gt;
            &lt;mapping&gt;
            	&lt;level value="DEBUG" /&gt;
            	&lt;eventLogEntryType value="Information" /&gt;
            &lt;/mapping&gt;
            </code>
        <para>
            The Level is the standard log4net logging level and eventLogEntryType can be any value
            from the <see cref="T:System.Diagnostics.EventLogEntryType" /> enum, i.e.:
            <list type="bullet"><item><term>Error</term><description>an error event</description></item><item><term>Warning</term><description>a warning event</description></item><item><term>Information</term><description>an informational event</description></item></list></para>
      </remarks>
      <author>Aspi Havewala</author>
      <author>Douglas de la Torre</author>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Thomas Voss</author>
    </member>
    <member name="T:log4net.Appender.EventLogAppender.Level2EventLogEntryType">
      <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the color it should be displayed as.
            </summary>
      <remarks>
        <para>
            Defines the mapping between a level and its event log entry type.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType">
      <summary>
            The <see cref="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType" /> for this entry
            </summary>
      <remarks>
        <para>
            Required property.
            The <see cref="P:log4net.Appender.EventLogAppender.Level2EventLogEntryType.EventLogEntryType" /> for this entry
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_logName">
      <summary>
            The log name is the section in the event logs where the messages
            are stored.
            </summary>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_applicationName">
      <summary>
            Name of the application to use when logging.  This appears in the
            application column of the event log named by <see cref="F:log4net.Appender.EventLogAppender.m_logName" />.
            </summary>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_machineName">
      <summary>
            The name of the machine which holds the event log. This is
            currently only allowed to be '.' i.e. the current machine.
            </summary>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_levelMapping">
      <summary>
            Mapping from level object to EventLogEntryType
            </summary>
    </member>
    <member name="F:log4net.Appender.EventLogAppender.m_securityContext">
      <summary>
            The security context to use for privileged calls
            </summary>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.EventLogAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.#ctor(log4net.Layout.ILayout)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.EventLogAppender" /> class
            with the specified <see cref="T:log4net.Layout.ILayout" />.
            </summary>
      <param name="layout">The <see cref="T:log4net.Layout.ILayout" /> to use with this appender.</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.AddMapping(log4net.Appender.EventLogAppender.Level2EventLogEntryType)">
      <summary>
            Add a mapping of level to <see cref="T:System.Diagnostics.EventLogEntryType" /> - done by the config file
            </summary>
      <param name="mapping">The mapping to add</param>
      <remarks>
        <para>
            Add a <see cref="T:log4net.Appender.EventLogAppender.Level2EventLogEntryType" /> mapping to this appender.
            Each mapping defines the event log entry type for a level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.EventLogAppender.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.CreateEventSource(System.String,System.String,System.String)">
      <summary>
            Create an event log source
            </summary>
      <remarks>
            Uses different API calls under NET_2_0
            </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" />
            method. 
            </summary>
      <param name="loggingEvent">the event to log</param>
      <remarks>
        <para>Writes the event to the system event log using the 
            <see cref="P:log4net.Appender.EventLogAppender.ApplicationName" />.</para>
        <para>If the event has an <c>EventID</c> property (see <see cref="P:log4net.Core.LoggingEvent.Properties" />)
            set then this integer will be used as the event log event id.</para>
        <para>
            There is a limit of 32K characters for an event log message
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.EventLogAppender.GetEntryType(log4net.Core.Level)">
      <summary>
            Get the equivalent <see cref="T:System.Diagnostics.EventLogEntryType" /> for a <see cref="T:log4net.Core.Level" /><paramref name="p" /></summary>
      <param name="level">the Level to convert to an EventLogEntryType</param>
      <returns>The equivalent <see cref="T:System.Diagnostics.EventLogEntryType" /> for a <see cref="T:log4net.Core.Level" /><paramref name="p" /></returns>
      <remarks>
            Because there are fewer applicable <see cref="T:System.Diagnostics.EventLogEntryType" />
            values to use in logging levels than there are in the 
            <see cref="T:log4net.Core.Level" /> this is a one way mapping. There is
            a loss of information during the conversion.
            </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.LogName">
      <summary>
            The name of the log where messages will be stored.
            </summary>
      <value>
            The string name of the log where messages will be stored.
            </value>
      <remarks>
        <para>This is the name of the log as it appears in the Event Viewer
            tree. The default value is to log into the <c>Application</c>
            log, this is where most applications write their events. However
            if you need a separate log for your application (or applications)
            then you should set the <see cref="P:log4net.Appender.EventLogAppender.LogName" /> appropriately.</para>
        <para>This should not be used to distinguish your event log messages
            from those of other applications, the <see cref="P:log4net.Appender.EventLogAppender.ApplicationName" />
            property should be used to distinguish events. This property should be 
            used to group together events into a single log.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.ApplicationName">
      <summary>
            Property used to set the Application name.  This appears in the
            event logs when logging.
            </summary>
      <value>
            The string used to distinguish events from different sources.
            </value>
      <remarks>
            Sets the event log source property.
            </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.MachineName">
      <summary>
            This property is used to return the name of the computer to use
            when accessing the event logs.  Currently, this is the current
            computer, denoted by a dot "."
            </summary>
      <value>
            The string name of the machine holding the event log that 
            will be logged into.
            </value>
      <remarks>
            This property cannot be changed. It is currently set to '.'
            i.e. the local machine. This may be changed in future.
            </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.SecurityContext">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.EventLogAppender.SecurityContext" /> used to write to the EventLog.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.EventLogAppender.SecurityContext" /> used to write to the EventLog.
            </value>
      <remarks>
        <para>
            The system security context used to write to the EventLog.
            </para>
        <para>
            Unless a <see cref="P:log4net.Appender.EventLogAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.EventLogAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.TextWriterAppender">
      <summary>
            Sends logging events to a <see cref="T:System.IO.TextWriter" />.
            </summary>
      <remarks>
        <para>
            An Appender that writes to a <see cref="T:System.IO.TextWriter" />.
            </para>
        <para>
            This appender may be used stand alone if initialized with an appropriate
            writer, however it is typically used as a base class for an appender that
            can open a <see cref="T:System.IO.TextWriter" /> to write to.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Douglas de la Torre</author>
    </member>
    <member name="F:log4net.Appender.TextWriterAppender.m_qtw">
      <summary>
            This is the <see cref="T:log4net.Util.QuietTextWriter" /> where logging events
            will be written to. 
            </summary>
    </member>
    <member name="F:log4net.Appender.TextWriterAppender.m_immediateFlush">
      <summary>
            Immediate flush means that the underlying <see cref="T:System.IO.TextWriter" /> 
            or output stream will be flushed at the end of each append operation.
            </summary>
      <remarks>
        <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.TextWriterAppender.ImmediateFlush" /> is set to
            <c>false</c>, then there is a good chance that the last few
            logging events are not actually persisted if and when the application 
            crashes.
            </para>
        <para>
            The default value is <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class and
            sets the output destination to a new <see cref="T:System.IO.StreamWriter" /> initialized 
            with the specified <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="layout">The layout to use with this appender.</param>
      <param name="os">The <see cref="T:System.IO.Stream" /> to output to.</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.#ctor(log4net.Layout.ILayout,System.IO.TextWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TextWriterAppender" /> class and sets
            the output destination to the specified <see cref="T:System.IO.StreamWriter" />.
            </summary>
      <param name="layout">The layout to use with this appender</param>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to output to</param>
      <remarks>
            The <see cref="T:System.IO.TextWriter" /> must have been previously opened.
            </remarks>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.PreAppendCheck">
      <summary>
            This method determines if there is a sense in attempting to append.
            </summary>
      <remarks>
        <para>
            This method checked if an output target has been set and if a
            layout has been set. 
            </para>
      </remarks>
      <returns>
        <c>false</c> if any of the preconditions fail.</returns>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" />
            method. 
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes a log statement to the output stream if the output stream exists 
            and is writable.  
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.Append(log4net.Core.LoggingEvent[])">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent[])" />
            method. 
            </summary>
      <param name="loggingEvents">The array of events to log.</param>
      <remarks>
        <para>
            This method writes all the bulk logged events to the output writer
            before flushing the stream.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.OnClose">
      <summary>
            Close this appender instance. The underlying stream or writer is also closed.
            </summary>
      <remarks>
            Closed appenders cannot be reused.
            </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.WriteFooterAndCloseWriter">
      <summary>
            Writes the footer and closes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
      <remarks>
        <para>
            Writes the footer and closes the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.CloseWriter">
      <summary>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
      <remarks>
        <para>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.Reset">
      <summary>
            Clears internal references to the underlying <see cref="T:System.IO.TextWriter" /> 
            and other variables.
            </summary>
      <remarks>
        <para>
            Subclasses can override this method for an alternate closing behavior.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.WriteFooter">
      <summary>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </summary>
      <remarks>
        <para>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.WriteHeader">
      <summary>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </summary>
      <remarks>
        <para>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TextWriterAppender.PrepareWriter">
      <summary>
            Called to allow a subclass to lazily initialize the writer
            </summary>
      <remarks>
        <para>
            This method is called when an event is logged and the <see cref="P:log4net.Appender.TextWriterAppender.Writer" /> or
            <see cref="P:log4net.Appender.TextWriterAppender.QuietWriter" /> have not been set. This allows a subclass to
            attempt to initialize the writer multiple times.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TextWriterAppender.ImmediateFlush">
      <summary>
            Gets or set whether the appender will flush at the end 
            of each append operation.
            </summary>
      <value>
        <para>
            The default behavior is to flush at the end of each 
            append operation.
            </para>
        <para>
            If this option is set to <c>false</c>, then the underlying 
            stream can defer persisting the logging event to a later 
            time.
            </para>
      </value>
      <remarks>
            Avoiding the flush operation at the end of each append results in
            a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </remarks>
    </member>
    <member name="P:log4net.Appender.TextWriterAppender.Writer">
      <summary>
            Sets the <see cref="T:System.IO.TextWriter" /> where the log output will go.
            </summary>
      <remarks>
        <para>
            The specified <see cref="T:System.IO.TextWriter" /> must be open and writable.
            </para>
        <para>
            The <see cref="T:System.IO.TextWriter" /> will be closed when the appender 
            instance is closed.
            </para>
        <para>
          <b>Note:</b> Logging to an unopened <see cref="T:System.IO.TextWriter" /> will fail.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TextWriterAppender.ErrorHandler">
      <summary>
            Gets or set the <see cref="T:log4net.Core.IErrorHandler" /> and the underlying 
            <see cref="T:log4net.Util.QuietTextWriter" />, if any, for this appender. 
            </summary>
      <value>
            The <see cref="T:log4net.Core.IErrorHandler" /> for this appender.
            </value>
    </member>
    <member name="P:log4net.Appender.TextWriterAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TextWriterAppender.QuietWriter">
      <summary>
            Gets or sets the <see cref="T:log4net.Util.QuietTextWriter" /> where logging events
            will be written to. 
            </summary>
      <value>
            The <see cref="T:log4net.Util.QuietTextWriter" /> where logging events are written.
            </value>
      <remarks>
        <para>
            This is the <see cref="T:log4net.Util.QuietTextWriter" /> where logging events
            will be written to. 
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.FileAppender">
      <summary>
            Appends logging events to a file.
            </summary>
      <remarks>
        <para>
            Logging events are sent to the file specified by
            the <see cref="P:log4net.Appender.FileAppender.File" /> property.
            </para>
        <para>
            The file can be opened in either append or overwrite mode 
            by specifying the <see cref="P:log4net.Appender.FileAppender.AppendToFile" /> property.
            If the file path is relative it is taken as relative from 
            the application base directory. The file encoding can be
            specified by setting the <see cref="P:log4net.Appender.FileAppender.Encoding" /> property.
            </para>
        <para>
            The layout's <see cref="P:log4net.Layout.ILayout.Header" /> and <see cref="P:log4net.Layout.ILayout.Footer" />
            values will be written each time the file is opened and closed
            respectively. If the <see cref="P:log4net.Appender.FileAppender.AppendToFile" /> property is <see langword="true" />
            then the file may contain multiple copies of the header and footer.
            </para>
        <para>
            This appender will first try to open the file for writing when <see cref="M:log4net.Appender.FileAppender.ActivateOptions" />
            is called. This will typically be during configuration.
            If the file cannot be opened for writing the appender will attempt
            to open the file again each time a message is logged to the appender.
            If the file cannot be opened for writing when a message is logged then
            the message will be discarded by this appender.
            </para>
        <para>
            The <see cref="T:log4net.Appender.FileAppender" /> supports pluggable file locking models via
            the <see cref="P:log4net.Appender.FileAppender.LockingModel" /> property.
            The default behavior, implemented by <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" /> 
            is to obtain an exclusive write lock on the file until this appender is closed.
            The alternative model, <see cref="T:log4net.Appender.FileAppender.MinimalLock" />, only holds a
            write lock while the appender is writing a logging event.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Rodrigo B. de Oliveira</author>
      <author>Douglas de la Torre</author>
      <author>Niall Daley</author>
    </member>
    <member name="T:log4net.Appender.FileAppender.LockingStream">
      <summary>
            Write only <see cref="T:System.IO.Stream" /> that uses the <see cref="T:log4net.Appender.FileAppender.LockingModelBase" /> 
            to manage access to an underlying resource.
            </summary>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
            True asynchronous writes are not supported, the implementation forces a synchronous write.
            </summary>
    </member>
    <member name="T:log4net.Appender.FileAppender.LockingModelBase">
      <summary>
            Locking model base class
            </summary>
      <remarks>
        <para>
            Base class for the locking models available to the <see cref="T:log4net.Appender.FileAppender" /> derived loggers.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingModelBase.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
      <summary>
            Open the output file
            </summary>
      <param name="filename">The filename to use</param>
      <param name="append">Whether to append to the file, or overwrite</param>
      <param name="encoding">The encoding to use</param>
      <remarks>
        <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock" /> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock" />,
            <see cref="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock" /> and <see cref="M:log4net.Appender.FileAppender.LockingModelBase.CloseFile" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingModelBase.CloseFile">
      <summary>
            Close the file
            </summary>
      <remarks>
        <para>
            Close the file. No further writes will be made.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock">
      <summary>
            Acquire the lock on the file
            </summary>
      <returns>A stream that is ready to be written to.</returns>
      <remarks>
        <para>
            Acquire the lock on the file in preparation for writing to it. 
            Return a stream pointing to the file. <see cref="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock" />
            must be called to release the lock on the output file.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.LockingModelBase.ReleaseLock">
      <summary>
            Release the lock on the file
            </summary>
      <remarks>
        <para>
            Release the lock on the file. No further writes will be made to the 
            stream until <see cref="M:log4net.Appender.FileAppender.LockingModelBase.AcquireLock" /> is called again.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.FileAppender.LockingModelBase.CurrentAppender">
      <summary>
            Gets or sets the <see cref="T:log4net.Appender.FileAppender" /> for this LockingModel
            </summary>
      <value>
            The <see cref="T:log4net.Appender.FileAppender" /> for this LockingModel
            </value>
      <remarks>
        <para>
            The file appender this locking model is attached to and working on
            behalf of.
            </para>
        <para>
            The file appender is used to locate the security context and the error handler to use.
            </para>
        <para>
            The value of this property will be set before <see cref="M:log4net.Appender.FileAppender.LockingModelBase.OpenFile(System.String,System.Boolean,System.Text.Encoding)" /> is
            called.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.FileAppender.ExclusiveLock">
      <summary>
            Hold an exclusive lock on the output file
            </summary>
      <remarks>
        <para>
            Open the file once for writing and hold it open until <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile" /> is called. 
            Maintains an exclusive lock on the file during this time.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ExclusiveLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
      <summary>
            Open the file specified and prepare for logging.
            </summary>
      <param name="filename">The filename to use</param>
      <param name="append">Whether to append to the file, or overwrite</param>
      <param name="encoding">The encoding to use</param>
      <remarks>
        <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock" /> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock" />,
            <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.ReleaseLock" /> and <see cref="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ExclusiveLock.CloseFile">
      <summary>
            Close the file
            </summary>
      <remarks>
        <para>
            Close the file. No further writes will be made.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ExclusiveLock.AcquireLock">
      <summary>
            Acquire the lock on the file
            </summary>
      <returns>A stream that is ready to be written to.</returns>
      <remarks>
        <para>
            Does nothing. The lock is already taken
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ExclusiveLock.ReleaseLock">
      <summary>
            Release the lock on the file
            </summary>
      <remarks>
        <para>
            Does nothing. The lock will be released when the file is closed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.FileAppender.MinimalLock">
      <summary>
            Acquires the file lock for each write
            </summary>
      <remarks>
        <para>
            Opens the file once for each <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" />/<see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock" /> cycle, 
            thus holding the lock for the minimal amount of time. This method of locking
            is considerably slower than <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" /> but allows 
            other processes to move/delete the log file whilst logging continues.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.MinimalLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
      <summary>
            Prepares to open the file when the first message is logged.
            </summary>
      <param name="filename">The filename to use</param>
      <param name="append">Whether to append to the file, or overwrite</param>
      <param name="encoding">The encoding to use</param>
      <remarks>
        <para>
            Open the file specified and prepare for logging. 
            No writes will be made until <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" /> is called.
            Must be called before any calls to <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" />,
            <see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock" /> and <see cref="M:log4net.Appender.FileAppender.MinimalLock.CloseFile" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.MinimalLock.CloseFile">
      <summary>
            Close the file
            </summary>
      <remarks>
        <para>
            Close the file. No further writes will be made.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock">
      <summary>
            Acquire the lock on the file
            </summary>
      <returns>A stream that is ready to be written to.</returns>
      <remarks>
        <para>
            Acquire the lock on the file in preparation for writing to it. 
            Return a stream pointing to the file. <see cref="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock" />
            must be called to release the lock on the output file.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.MinimalLock.ReleaseLock">
      <summary>
            Release the lock on the file
            </summary>
      <remarks>
        <para>
            Release the lock on the file. No further writes will be made to the 
            stream until <see cref="M:log4net.Appender.FileAppender.MinimalLock.AcquireLock" /> is called again.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_appendToFile">
      <summary>
            Flag to indicate if we should append to the file
            or overwrite the file. The default is to append.
            </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_fileName">
      <summary>
            The name of the log file.
            </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_encoding">
      <summary>
            The encoding to use for the file stream.
            </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_securityContext">
      <summary>
            The security context to use for privileged calls
            </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_stream">
      <summary>
            The stream to log to. Has added locking semantics
            </summary>
    </member>
    <member name="F:log4net.Appender.FileAppender.m_lockingModel">
      <summary>
            The locking model to use
            </summary>
    </member>
    <member name="M:log4net.Appender.FileAppender.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String,System.Boolean)">
      <summary>
            Construct a new appender using the layout, file and append mode.
            </summary>
      <param name="layout">the layout to use with this appender</param>
      <param name="filename">the full path to the file to write to</param>
      <param name="append">flag to indicate if the file should be appended to</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.#ctor(log4net.Layout.ILayout,System.String)">
      <summary>
            Construct a new appender using the layout and file specified.
            The file will be appended to.
            </summary>
      <param name="layout">the layout to use with this appender</param>
      <param name="filename">the full path to the file to write to</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ActivateOptions">
      <summary>
            Activate the options on the file appender. 
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.FileAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.FileAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.FileAppender.ActivateOptions" /> must be called again.
            </para>
        <para>
            This will cause the file to be opened.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.Reset">
      <summary>
            Closes any previously opened file and calls the parent's <see cref="M:log4net.Appender.TextWriterAppender.Reset" />.
            </summary>
      <remarks>
        <para>
            Resets the filename and the file stream.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.PrepareWriter">
      <summary>
            Called to initialize the file writer
            </summary>
      <remarks>
        <para>
            Will be called for each logged message until the file is
            successfully opened.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" />
            method. 
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes a log statement to the output stream if the output stream exists 
            and is writable.  
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.Append(log4net.Core.LoggingEvent[])">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent[])" />
            method. 
            </summary>
      <param name="loggingEvents">The array of events to log.</param>
      <remarks>
        <para>
            Acquires the output file locks once before writing all the events to
            the stream.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.WriteFooter">
      <summary>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </summary>
      <remarks>
        <para>
            Writes a footer as produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Footer" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.WriteHeader">
      <summary>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </summary>
      <remarks>
        <para>
            Writes a header produced by the embedded layout's <see cref="P:log4net.Layout.ILayout.Header" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.CloseWriter">
      <summary>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
      <remarks>
        <para>
            Closes the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.CloseFile">
      <summary>
            Closes the previously opened file.
            </summary>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Layout.ILayout.Footer" /> to the file and then
            closes the file.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.SafeOpenFile(System.String,System.Boolean)">
      <summary>
            Sets and <i>opens</i> the file where the log output will go. The specified file must be writable.
            </summary>
      <param name="fileName">The path to the log file. Must be a fully qualified path.</param>
      <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
      <remarks>
        <para>
            Calls <see cref="M:log4net.Appender.FileAppender.OpenFile(System.String,System.Boolean)" /> but guarantees not to throw an exception.
            Errors are passed to the <see cref="P:log4net.Appender.TextWriterAppender.ErrorHandler" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.OpenFile(System.String,System.Boolean)">
      <summary>
            Sets and <i>opens</i> the file where the log output will go. The specified file must be writable.
            </summary>
      <param name="fileName">The path to the log file. Must be a fully qualified path.</param>
      <param name="append">If true will append to fileName. Otherwise will truncate fileName</param>
      <remarks>
        <para>
            If there was already an opened file, then the previous file
            is closed first.
            </para>
        <para>
            This method will ensure that the directory structure
            for the <paramref name="fileName" /> specified exists.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.Stream)">
      <summary>
            Sets the quiet writer used for file output
            </summary>
      <param name="fileStream">the file stream that has been opened for writing</param>
      <remarks>
        <para>
            This implementation of <see cref="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.Stream)" /> creates a <see cref="T:System.IO.StreamWriter" />
            over the <paramref name="fileStream" /> and passes it to the 
            <see cref="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.TextWriter)" /> method.
            </para>
        <para>
            This method can be overridden by sub classes that want to wrap the
            <see cref="T:System.IO.Stream" /> in some way, for example to encrypt the output
            data using a <c>System.Security.Cryptography.CryptoStream</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.SetQWForFiles(System.IO.TextWriter)">
      <summary>
            Sets the quiet writer being used.
            </summary>
      <param name="writer">the writer over the file stream that has been opened for writing</param>
      <remarks>
        <para>
            This method can be overridden by sub classes that want to
            wrap the <see cref="T:System.IO.TextWriter" /> in some way.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.FileAppender.ConvertToFullPath(System.String)">
      <summary>
            Convert a path into a fully qualified path.
            </summary>
      <param name="path">The path to convert.</param>
      <returns>The fully qualified path.</returns>
      <remarks>
        <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.FileAppender.File">
      <summary>
            Gets or sets the path to the file that logging will be written to.
            </summary>
      <value>
            The path to the file that logging will be written to.
            </value>
      <remarks>
        <para>
            If the path is relative it is taken as relative from 
            the application base directory.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.FileAppender.AppendToFile">
      <summary>
            Gets or sets a flag that indicates whether the file should be
            appended to or overwritten.
            </summary>
      <value>
            Indicates whether the file should be appended to or overwritten.
            </value>
      <remarks>
        <para>
            If the value is set to false then the file will be overwritten, if 
            it is set to true then the file will be appended to.
            </para>
            The default value is true.
            </remarks>
    </member>
    <member name="P:log4net.Appender.FileAppender.Encoding">
      <summary>
            Gets or sets <see cref="P:log4net.Appender.FileAppender.Encoding" /> used to write to the file.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.FileAppender.Encoding" /> used to write to the file.
            </value>
      <remarks>
        <para>
            The default encoding set is <see cref="P:System.Text.Encoding.Default" />
            which is the encoding for the system's current ANSI code page.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.FileAppender.SecurityContext">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.SecurityContext" /> used to write to the file.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.FileAppender.SecurityContext" /> used to write to the file.
            </value>
      <remarks>
        <para>
            Unless a <see cref="P:log4net.Appender.FileAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.FileAppender.LockingModel">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.LockingModel" /> used to handle locking of the file.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.FileAppender.LockingModel" /> used to lock the file.
            </value>
      <remarks>
        <para>
            Gets or sets the <see cref="P:log4net.Appender.FileAppender.LockingModel" /> used to handle locking of the file.
            </para>
        <para>
            There are two built in locking models, <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" /> and <see cref="T:log4net.Appender.FileAppender.MinimalLock" />.
            The former locks the file from the start of logging to the end and the 
            later lock only for the minimal amount of time when logging each message.
            </para>
        <para>
            The default locking model is the <see cref="T:log4net.Appender.FileAppender.ExclusiveLock" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LogException">
      <summary>
            Exception base type for log4net.
            </summary>
      <remarks>
        <para>
            This type extends <see cref="T:System.ApplicationException" />. It
            does not add any new functionality but does differentiate the
            type of exception being thrown.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Core.LogException.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogException.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message to include with the exception.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class with
            the specified message.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message to include with the exception.</param>
      <param name="innerException">A nested exception to include.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class
            with the specified message and inner exception.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serialization constructor
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LogException" /> class 
            with serialized data.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.ForwardingAppender">
      <summary>
            This appender forwards logging events to attached appenders.
            </summary>
      <remarks>
        <para>
            The forwarding appender can be used to specify different thresholds
            and filters for the same appender at different locations within the hierarchy.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.ForwardingAppender.m_appenderAttachedImpl">
      <summary>
            Implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            </summary>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.ForwardingAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.OnClose">
      <summary>
            Closes the appender and releases resources.
            </summary>
      <remarks>
        <para>
            Releases any resources allocated within the appender such as file handles, 
            network connections, etc.
            </para>
        <para>
            It is a programming error to append to a closed appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Forward the logging event to the attached appenders 
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Delivers the logging event to all the attached appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.Append(log4net.Core.LoggingEvent[])">
      <summary>
            Forward the logging events to the attached appenders 
            </summary>
      <param name="loggingEvents">The array of events to log.</param>
      <remarks>
        <para>
            Delivers the logging events to all the attached appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.AddAppender(log4net.Appender.IAppender)">
      <summary>
            Adds an <see cref="T:log4net.Appender.IAppender" /> to the list of appenders of this
            instance.
            </summary>
      <param name="newAppender">The <see cref="T:log4net.Appender.IAppender" /> to add to this appender.</param>
      <remarks>
        <para>
            If the specified <see cref="T:log4net.Appender.IAppender" /> is already in the list of
            appenders, then it won't be added again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.GetAppender(System.String)">
      <summary>
            Looks for the appender with the specified name.
            </summary>
      <param name="name">The name of the appender to lookup.</param>
      <returns>
            The appender with the specified name, or <c>null</c>.
            </returns>
      <remarks>
        <para>
            Get the named appender attached to this appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.RemoveAllAppenders">
      <summary>
            Removes all previously added appenders from this appender.
            </summary>
      <remarks>
        <para>
            This is useful when re-reading configuration information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.RemoveAppender(log4net.Appender.IAppender)">
      <summary>
            Removes the specified appender from the list of appenders.
            </summary>
      <param name="appender">The appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
    </member>
    <member name="M:log4net.Appender.ForwardingAppender.RemoveAppender(System.String)">
      <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
      <param name="name">The name of the appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </remarks>
    </member>
    <member name="P:log4net.Appender.ForwardingAppender.Appenders">
      <summary>
            Gets the appenders contained in this appender as an 
            <see cref="T:System.Collections.ICollection" />.
            </summary>
      <remarks>
            If no appenders can be found, then an <see cref="T:log4net.Util.EmptyCollection" /> 
            is returned.
            </remarks>
      <returns>
            A collection of the appenders in this appender.
            </returns>
    </member>
    <member name="T:log4net.Appender.LocalSyslogAppender">
      <summary>
            Logs events to a local syslog service.
            </summary>
      <remarks>
        <note>
            This appender uses the POSIX libc library functions <c>openlog</c>, <c>syslog</c>, and <c>closelog</c>.
            If these functions are not available on the local system then this appender will not work!
            </note>
        <para>
            The functions <c>openlog</c>, <c>syslog</c>, and <c>closelog</c> are specified in SUSv2 and 
            POSIX 1003.1-2001 standards. These are used to log messages to the local syslog service.
            </para>
        <para>
            This appender talks to a local syslog service. If you need to log to a remote syslog
            daemon and you cannot configure your local syslog service to do this you may be
            able to use the <see cref="T:log4net.Appender.RemoteSyslogAppender" /> to log via UDP.
            </para>
        <para>
            Syslog messages must have a facility and and a severity. The severity
            is derived from the Level of the logging event.
            The facility must be chosen from the set of defined syslog 
            <see cref="T:log4net.Appender.LocalSyslogAppender.SyslogFacility" /> values. The facilities list is predefined
            and cannot be extended.
            </para>
        <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.LocalSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Util.SystemInfo.ApplicationFriendlyName" />).
            </para>
      </remarks>
      <author>Rob Lyon</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.LocalSyslogAppender.SyslogSeverity">
      <summary>
            syslog severities
            </summary>
      <remarks>
        <para>
            The log4net Level maps to a syslog severity using the
            <see cref="M:log4net.Appender.LocalSyslogAppender.AddMapping(log4net.Appender.LocalSyslogAppender.LevelSeverity)" /> method and the <see cref="T:log4net.Appender.LocalSyslogAppender.LevelSeverity" />
            class. The severity is set on <see cref="P:log4net.Appender.LocalSyslogAppender.LevelSeverity.Severity" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.LocalSyslogAppender.SyslogFacility">
      <summary>
            syslog facilities
            </summary>
      <remarks>
        <para>
            The syslog facility defines which subsystem the logging comes from.
            This is set on the <see cref="P:log4net.Appender.LocalSyslogAppender.Facility" /> property.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.LocalSyslogAppender.LevelSeverity">
      <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </summary>
      <remarks>
        <para>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.LocalSyslogAppender.LevelSeverity.Severity">
      <summary>
            The mapped syslog severity for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped syslog severity for the specified level
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.LocalSyslogAppender.m_facility">
      <summary>
            The facility. The default facility is <see cref="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.User" />.
            </summary>
    </member>
    <member name="F:log4net.Appender.LocalSyslogAppender.m_identity">
      <summary>
            The message identity
            </summary>
    </member>
    <member name="F:log4net.Appender.LocalSyslogAppender.m_handleToIdentity">
      <summary>
            Marshaled handle to the identity string. We have to hold on to the
            string as the <c>openlog</c> and <c>syslog</c> APIs just hold the
            pointer to the ident and dereference it for each log message.
            </summary>
    </member>
    <member name="F:log4net.Appender.LocalSyslogAppender.m_levelMapping">
      <summary>
            Mapping from level object to syslog severity
            </summary>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.LocalSyslogAppender" /> class.
            </summary>
      <remarks>
            This instance of the <see cref="T:log4net.Appender.LocalSyslogAppender" /> class is set up to write 
            to a local syslog service.
            </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.AddMapping(log4net.Appender.LocalSyslogAppender.LevelSeverity)">
      <summary>
            Add a mapping of level to severity
            </summary>
      <param name="mapping">The mapping to add</param>
      <remarks>
        <para>
            Adds a <see cref="T:log4net.Appender.LocalSyslogAppender.LevelSeverity" /> to this appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.LocalSyslogAppender.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the event to a remote syslog daemon.
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.OnClose">
      <summary>
            Close the syslog when the appender is closed
            </summary>
      <remarks>
        <para>
            Close the syslog when the appender is closed
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.GetSeverity(log4net.Core.Level)">
      <summary>
            Translates a log4net level to a syslog severity.
            </summary>
      <param name="level">A log4net level.</param>
      <returns>A syslog severity.</returns>
      <remarks>
        <para>
            Translates a log4net level to a syslog severity.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.GeneratePriority(log4net.Appender.LocalSyslogAppender.SyslogFacility,log4net.Appender.LocalSyslogAppender.SyslogSeverity)">
      <summary>
            Generate a syslog priority.
            </summary>
      <param name="facility">The syslog facility.</param>
      <param name="severity">The syslog severity.</param>
      <returns>A syslog priority.</returns>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.openlog(System.IntPtr,System.Int32,log4net.Appender.LocalSyslogAppender.SyslogFacility)">
      <summary>
            Open connection to system logger.
            </summary>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.syslog(System.Int32,System.String,System.String)">
      <summary>
            Generate a log message.
            </summary>
      <remarks>
        <para>
            The libc syslog method takes a format string and a variable argument list similar
            to the classic printf function. As this type of vararg list is not supported
            by C# we need to specify the arguments explicitly. Here we have specified the
            format string with a single message argument. The caller must set the format 
            string to <c>"%s"</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.LocalSyslogAppender.closelog">
      <summary>
            Close descriptor used to write to system logger.
            </summary>
    </member>
    <member name="P:log4net.Appender.LocalSyslogAppender.Identity">
      <summary>
            Message identity
            </summary>
      <remarks>
        <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.LocalSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Util.SystemInfo.ApplicationFriendlyName" />).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.LocalSyslogAppender.Facility">
      <summary>
            Syslog facility
            </summary>
      <remarks>
            Set to one of the <see cref="T:log4net.Appender.LocalSyslogAppender.SyslogFacility" /> values. The list of
            facilities is predefined and cannot be extended. The default value
            is <see cref="F:log4net.Appender.LocalSyslogAppender.SyslogFacility.User" />.
            </remarks>
    </member>
    <member name="P:log4net.Appender.LocalSyslogAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="P:log4net.Appender.AppenderSkeleton.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.MemoryAppender">
      <summary>
            Stores logging events in an array.
            </summary>
      <remarks>
        <para>
            The memory appender stores all the logging events
            that are appended in an in-memory array.
            </para>
        <para>
            Use the <see cref="M:log4net.Appender.MemoryAppender.GetEvents" /> method to get
            the current list of events that have been appended.
            </para>
        <para>
            Use the <see cref="M:log4net.Appender.MemoryAppender.Clear" /> method to clear the
            current list of events.
            </para>
      </remarks>
      <author>Julian Biddle</author>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.MemoryAppender.m_eventsList">
      <summary>
            The list of events that have been appended.
            </summary>
    </member>
    <member name="F:log4net.Appender.MemoryAppender.m_fixFlags">
      <summary>
            Value indicating which fields in the event should be fixed
            </summary>
      <remarks>
            By default all fields are fixed
            </remarks>
    </member>
    <member name="M:log4net.Appender.MemoryAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.MemoryAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.MemoryAppender.GetEvents">
      <summary>
            Gets the events that have been logged.
            </summary>
      <returns>The events that have been logged</returns>
      <remarks>
        <para>
            Gets the events that have been logged.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.MemoryAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method. 
            </summary>
      <param name="loggingEvent">the event to log</param>
      <remarks>
        <para>Stores the <paramref name="loggingEvent" /> in the events list.</para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.MemoryAppender.Clear">
      <summary>
            Clear the list of events
            </summary>
      <remarks>
            Clear the list of events
            </remarks>
    </member>
    <member name="P:log4net.Appender.MemoryAppender.OnlyFixPartialEventData">
      <summary>
            Gets or sets a value indicating whether only part of the logging event 
            data should be fixed.
            </summary>
      <value>
        <c>true</c> if the appender should only fix part of the logging event 
            data, otherwise <c>false</c>. The default is <c>false</c>.
            </value>
      <remarks>
        <para>
            Setting this property to <c>true</c> will cause only part of the event 
            data to be fixed and stored in the appender, hereby improving performance. 
            </para>
        <para>
            See <see cref="M:log4net.Core.LoggingEvent.FixVolatileData(System.Boolean)" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.MemoryAppender.Fix">
      <summary>
            Gets or sets the fields that will be fixed in the event
            </summary>
      <remarks>
        <para>
            The logging event needs to have certain thread specific values 
            captured before it can be buffered. See <see cref="P:log4net.Core.LoggingEvent.Fix" />
            for details.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.NetSendAppender">
      <summary>
            Logs entries by sending network messages using the 
            <see cref="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)" /> native function.
            </summary>
      <remarks>
        <para>
            You can send messages only to names that are active 
            on the network. If you send the message to a user name, 
            that user must be logged on and running the Messenger 
            service to receive the message.
            </para>
        <para>
            The receiver will get a top most window displaying the 
            messages one at a time, therefore this appender should 
            not be used to deliver a high volume of messages.
            </para>
        <para>
            The following table lists some possible uses for this appender :
            </para>
        <para>
          <list type="table">
            <listheader>
              <term>Action</term>
              <description>Property Value(s)</description>
            </listheader>
            <item>
              <term>Send a message to a user account on the local machine</term>
              <description>
                <para>
                  <paramref name="Server" /> = &lt;name of the local machine&gt;
                        </para>
                <para>
                  <paramref name="Recipient" /> = &lt;user name&gt;
                        </para>
              </description>
            </item>
            <item>
              <term>Send a message to a user account on a remote machine</term>
              <description>
                <para>
                  <paramref name="Server" /> = &lt;name of the remote machine&gt;
                        </para>
                <para>
                  <paramref name="Recipient" /> = &lt;user name&gt;
                        </para>
              </description>
            </item>
            <item>
              <term>Send a message to a domain user account</term>
              <description>
                <para>
                  <paramref name="Server" /> = &lt;name of a domain controller | uninitialized&gt;
                        </para>
                <para>
                  <paramref name="Recipient" /> = &lt;user name&gt;
                        </para>
              </description>
            </item>
            <item>
              <term>Send a message to all the names in a workgroup or domain</term>
              <description>
                <para>
                  <paramref name="Recipient" /> = &lt;workgroup name | domain name&gt;*
                        </para>
              </description>
            </item>
            <item>
              <term>Send a message from the local machine to a remote machine</term>
              <description>
                <para>
                  <paramref name="Server" /> = &lt;name of the local machine | uninitialized&gt;
                        </para>
                <para>
                  <paramref name="Recipient" /> = &lt;name of the remote machine&gt;
                        </para>
              </description>
            </item>
          </list>
        </para>
        <para>
          <b>Note :</b> security restrictions apply for sending 
            network messages, see <see cref="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)" /> 
            for more information.
            </para>
      </remarks>
      <example>
        <para>
            An example configuration section to log information 
            using this appender from the local machine, named 
            LOCAL_PC, to machine OPERATOR_PC :
            </para>
        <code lang="XML" escaped="true">
          <appender name="NetSendAppender_Operator" type="log4net.Appender.NetSendAppender">
            <server value="LOCAL_PC" />
            <recipient value="OPERATOR_PC" />
            <layout type="log4net.Layout.PatternLayout" value="%-5p %c [%x] - %m%n" />
          </appender>
        </code>
      </example>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.NetSendAppender.m_server">
      <summary>
            The DNS or NetBIOS name of the server on which the function is to execute.
            </summary>
    </member>
    <member name="F:log4net.Appender.NetSendAppender.m_sender">
      <summary>
            The sender of the network message.
            </summary>
    </member>
    <member name="F:log4net.Appender.NetSendAppender.m_recipient">
      <summary>
            The message alias to which the message should be sent.
            </summary>
    </member>
    <member name="F:log4net.Appender.NetSendAppender.m_securityContext">
      <summary>
            The security context to use for privileged calls
            </summary>
    </member>
    <member name="M:log4net.Appender.NetSendAppender.#ctor">
      <summary>
            Initializes the appender.
            </summary>
      <remarks>
            The default constructor initializes all fields to their default values.
            </remarks>
    </member>
    <member name="M:log4net.Appender.NetSendAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.NetSendAppender.ActivateOptions" /> must be called again.
            </para>
        <para>
            The appender will be ignored if no <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> was specified.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">The required property <see cref="P:log4net.Appender.NetSendAppender.Recipient" /> was not specified.</exception>
    </member>
    <member name="M:log4net.Appender.NetSendAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Sends the event using a network message.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.NetSendAppender.NetMessageBufferSend(System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
            Sends a buffer of information to a registered message alias.
            </summary>
      <param name="serverName">The DNS or NetBIOS name of the server on which the function is to execute.</param>
      <param name="msgName">The message alias to which the message buffer should be sent</param>
      <param name="fromName">The originator of the message.</param>
      <param name="buffer">The message text.</param>
      <param name="bufferSize">The length, in bytes, of the message text.</param>
      <remarks>
        <para>
            The following restrictions apply for sending network messages:
            </para>
        <para>
          <list type="table">
            <listheader>
              <term>Platform</term>
              <description>Requirements</description>
            </listheader>
            <item>
              <term>Windows NT</term>
              <description>
                <para>
                        No special group membership is required to send a network message.
                        </para>
                <para>
                        Admin, Accounts, Print, or Server Operator group membership is required to 
                        successfully send a network message on a remote server.
                        </para>
              </description>
            </item>
            <item>
              <term>Windows 2000 or later</term>
              <description>
                <para>
                        If you send a message on a domain controller that is running Active Directory, 
                        access is allowed or denied based on the access control list (ACL) for the securable 
                        object. The default ACL permits only Domain Admins and Account Operators to send a network message. 
                        </para>
                <para>
                        On a member server or workstation, only Administrators and Server Operators can send a network message. 
                        </para>
              </description>
            </item>
          </list>
        </para>
        <para>
            For more information see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/netmgmt/netmgmt/security_requirements_for_the_network_management_functions.asp">Security Requirements for the Network Management Functions</a>.
            </para>
      </remarks>
      <returns>
        <para>
            If the function succeeds, the return value is zero.
            </para>
      </returns>
    </member>
    <member name="P:log4net.Appender.NetSendAppender.Sender">
      <summary>
            Gets or sets the sender of the message.
            </summary>
      <value>
            The sender of the message.
            </value>
      <remarks>
            If this property is not specified, the message is sent from the local computer.
            </remarks>
    </member>
    <member name="P:log4net.Appender.NetSendAppender.Recipient">
      <summary>
            Gets or sets the message alias to which the message should be sent.
            </summary>
      <value>
            The recipient of the message.
            </value>
      <remarks>
            This property should always be specified in order to send a message.
            </remarks>
    </member>
    <member name="P:log4net.Appender.NetSendAppender.Server">
      <summary>
            Gets or sets the DNS or NetBIOS name of the remote server on which the function is to execute.
            </summary>
      <value>
            DNS or NetBIOS name of the remote server on which the function is to execute.
            </value>
      <remarks>
        <para>
            For Windows NT 4.0 and earlier, the string should begin with \\.
            </para>
        <para>
            If this property is not specified, the local computer is used. 
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.NetSendAppender.SecurityContext">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.NetSendAppender.SecurityContext" /> used to call the NetSend method.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.NetSendAppender.SecurityContext" /> used to call the NetSend method.
            </value>
      <remarks>
        <para>
            Unless a <see cref="P:log4net.Appender.NetSendAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.NetSendAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.OutputDebugStringAppender">
      <summary>
            Appends log events to the OutputDebugString system.
            </summary>
      <remarks>
        <para>
            OutputDebugStringAppender appends log events to the
            OutputDebugString system.
            </para>
        <para>
            The string is passed to the native <c>OutputDebugString</c> 
            function.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Appender.OutputDebugStringAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.OutputDebugStringAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.OutputDebugStringAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Write the logging event to the output debug string API
            </summary>
      <param name="loggingEvent">the event to log</param>
      <remarks>
        <para>
            Write the logging event to the output debug string API
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.OutputDebugStringAppender.OutputDebugString(System.String)">
      <summary>
            Stub for OutputDebugString native method
            </summary>
      <param name="message">the string to output</param>
      <remarks>
        <para>
            Stub for OutputDebugString native method
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.OutputDebugStringAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.UdpAppender">
      <summary>
             Sends logging events as connectionless UDP datagrams to a remote host or a 
             multicast group using an <see cref="T:System.Net.Sockets.UdpClient" />.
             </summary>
      <remarks>
        <para>
             UDP guarantees neither that messages arrive, nor that they arrive in the correct order.
             </para>
        <para>
             To view the logging results, a custom application can be developed that listens for logging 
             events.
             </para>
        <para>
             When decoding events send via this appender remember to use the same encoding
             to decode the events as was used to send the events. See the <see cref="P:log4net.Appender.UdpAppender.Encoding" />
             property to specify the encoding to use.
             </para>
      </remarks>
      <example>
             This example shows how to log receive logging events that are sent 
             on IP address 244.0.0.1 and port 8080 to the console. The event is 
             encoded in the packet as a unicode string and it is decoded as such. 
             <code lang="C#">
             IPEndPoint remoteEndPoint = new IPEndPoint(IPAddress.Any, 0);
             UdpClient udpClient;
             byte[] buffer;
             string loggingEvent;
             
             try 
             {
                 udpClient = new UdpClient(8080);
                 
                 while(true) 
                 {
                     buffer = udpClient.Receive(ref remoteEndPoint);
                     loggingEvent = System.Text.Encoding.Unicode.GetString(buffer);
                     Console.WriteLine(loggingEvent);
                 }
             } 
             catch(Exception e) 
             {
                 Console.WriteLine(e.ToString());
             }
             </code><code lang="Visual Basic">
             Dim remoteEndPoint as IPEndPoint
             Dim udpClient as UdpClient
             Dim buffer as Byte()
             Dim loggingEvent as String
             
             Try 
                 remoteEndPoint = new IPEndPoint(IPAddress.Any, 0)
                 udpClient = new UdpClient(8080)
            
                 While True
                     buffer = udpClient.Receive(ByRef remoteEndPoint)
                     loggingEvent = System.Text.Encoding.Unicode.GetString(buffer)
                     Console.WriteLine(loggingEvent)
                 Wend
             Catch e As Exception
                 Console.WriteLine(e.ToString())
             End Try
             </code><para>
             An example configuration section to log information using this appender to the 
             IP 224.0.0.1 on port 8080:
             </para><code lang="XML" escaped="true"><appender name="UdpAppender" type="log4net.Appender.UdpAppender"><remoteAddress value="224.0.0.1" /><remotePort value="8080" /><layout type="log4net.Layout.PatternLayout" value="%-5level %logger [%ndc] - %message%newline" /></appender></code></example>
      <author>Gert Driesen</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_remoteAddress">
      <summary>
            The IP address of the remote host or multicast group to which 
            the logging event will be sent.
            </summary>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_remotePort">
      <summary>
            The TCP port number of the remote host or multicast group to 
            which the logging event will be sent.
            </summary>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_remoteEndPoint">
      <summary>
            The cached remote endpoint to which the logging events will be sent.
            </summary>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_localPort">
      <summary>
            The TCP port number from which the <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </summary>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_client">
      <summary>
            The <see cref="T:System.Net.Sockets.UdpClient" /> instance that will be used for sending the 
            logging events.
            </summary>
    </member>
    <member name="F:log4net.Appender.UdpAppender.m_encoding">
      <summary>
            The encoding to use for the packet.
            </summary>
    </member>
    <member name="M:log4net.Appender.UdpAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.UdpAppender" /> class.
            </summary>
      <remarks>
            The default constructor initializes all fields to their default values.
            </remarks>
    </member>
    <member name="M:log4net.Appender.UdpAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> must be called again.
            </para>
        <para>
            The appender will be ignored if no <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> was specified or 
            an invalid remote or local TCP port number was specified.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">The required property <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> was not specified.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The TCP port number assigned to <see cref="P:log4net.Appender.UdpAppender.LocalPort" /> or <see cref="P:log4net.Appender.UdpAppender.RemotePort" /> is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
    </member>
    <member name="M:log4net.Appender.UdpAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Sends the event using an UDP datagram.
            </para>
        <para>
            Exceptions are passed to the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.UdpAppender.OnClose">
      <summary>
            Closes the UDP connection and releases all resources associated with 
            this <see cref="T:log4net.Appender.UdpAppender" /> instance.
            </summary>
      <remarks>
        <para>
            Disables the underlying <see cref="T:System.Net.Sockets.UdpClient" /> and releases all managed 
            and unmanaged resources associated with the <see cref="T:log4net.Appender.UdpAppender" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.UdpAppender.InitializeClientConnection">
      <summary>
            Initializes the underlying  <see cref="T:System.Net.Sockets.UdpClient" /> connection.
            </summary>
      <remarks>
        <para>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> is initialized and binds to the 
            port number from which you intend to communicate.
            </para>
        <para>
            Exceptions are passed to the <see cref="P:log4net.Appender.AppenderSkeleton.ErrorHandler" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.UdpAppender.RemoteAddress">
      <summary>
            Gets or sets the IP address of the remote host or multicast group to which
            the underlying <see cref="T:System.Net.Sockets.UdpClient" /> should sent the logging event.
            </summary>
      <value>
            The IP address of the remote host or multicast group to which the logging event 
            will be sent.
            </value>
      <remarks>
        <para>
            Multicast addresses are identified by IP class <b>D</b> addresses (in the range 224.0.0.0 to
            239.255.255.255).  Multicast packets can pass across different networks through routers, so
            it is possible to use multicasts in an Internet scenario as long as your network provider 
            supports multicasting.
            </para>
        <para>
            Hosts that want to receive particular multicast messages must register their interest by joining
            the multicast group.  Multicast messages are not sent to networks where no host has joined
            the multicast group.  Class <b>D</b> IP addresses are used for multicast groups, to differentiate
            them from normal host addresses, allowing nodes to easily detect if a message is of interest.
            </para>
        <para>
            Static multicast addresses that are needed globally are assigned by IANA.  A few examples are listed in the table below:
            </para>
        <para>
          <list type="table">
            <listheader>
              <term>IP Address</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>224.0.0.1</term>
              <description>
                <para>
                        Sends a message to all system on the subnet.
                        </para>
              </description>
            </item>
            <item>
              <term>224.0.0.2</term>
              <description>
                <para>
                        Sends a message to all routers on the subnet.
                        </para>
              </description>
            </item>
            <item>
              <term>224.0.0.12</term>
              <description>
                <para>
                        The DHCP server answers messages on the IP address 224.0.0.12, but only on a subnet.
                        </para>
              </description>
            </item>
          </list>
        </para>
        <para>
            A complete list of actually reserved multicast addresses and their owners in the ranges
            defined by RFC 3171 can be found at the <A href="http://www.iana.org/assignments/multicast-addresses">IANA web site</A>. 
            </para>
        <para>
            The address range 239.0.0.0 to 239.255.255.255 is reserved for administrative scope-relative 
            addresses.  These addresses can be reused with other local groups.  Routers are typically 
            configured with filters to prevent multicast traffic in this range from flowing outside
            of the local network.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.UdpAppender.RemotePort">
      <summary>
            Gets or sets the TCP port number of the remote host or multicast group to which 
            the underlying <see cref="T:System.Net.Sockets.UdpClient" /> should sent the logging event.
            </summary>
      <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number of the remote host or multicast group to which the logging event 
            will be sent.
            </value>
      <remarks>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> will send messages to this TCP port number
            on the remote host or multicast group.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
    </member>
    <member name="P:log4net.Appender.UdpAppender.LocalPort">
      <summary>
            Gets or sets the TCP port number from which the underlying <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </summary>
      <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number from which the underlying <see cref="T:System.Net.Sockets.UdpClient" /> will communicate.
            </value>
      <remarks>
        <para>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" /> will bind to this port for sending messages.
            </para>
        <para>
            Setting the value to 0 (the default) will cause the udp client not to bind to
            a local port.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
    </member>
    <member name="P:log4net.Appender.UdpAppender.Encoding">
      <summary>
            Gets or sets <see cref="P:log4net.Appender.UdpAppender.Encoding" /> used to write the packets.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.UdpAppender.Encoding" /> used to write the packets.
            </value>
      <remarks>
        <para>
            The <see cref="P:log4net.Appender.UdpAppender.Encoding" /> used to write the packets.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.UdpAppender.Client">
      <summary>
            Gets or sets the underlying <see cref="T:System.Net.Sockets.UdpClient" />.
            </summary>
      <value>
            The underlying <see cref="T:System.Net.Sockets.UdpClient" />.
            </value>
      <remarks>
        <see cref="T:log4net.Appender.UdpAppender" /> creates a <see cref="T:System.Net.Sockets.UdpClient" /> to send logging events 
            over a network.  Classes deriving from <see cref="T:log4net.Appender.UdpAppender" /> can use this
            property to get or set this <see cref="T:System.Net.Sockets.UdpClient" />.  Use the underlying <see cref="T:System.Net.Sockets.UdpClient" />
            returned from <see cref="P:log4net.Appender.UdpAppender.Client" /> if you require access beyond that which 
            <see cref="T:log4net.Appender.UdpAppender" /> provides.
            </remarks>
    </member>
    <member name="P:log4net.Appender.UdpAppender.RemoteEndPoint">
      <summary>
            Gets or sets the cached remote endpoint to which the logging events should be sent.
            </summary>
      <value>
            The cached remote endpoint to which the logging events will be sent.
            </value>
      <remarks>
            The <see cref="M:log4net.Appender.UdpAppender.ActivateOptions" /> method will initialize the remote endpoint 
            with the values of the <see cref="P:log4net.Appender.UdpAppender.RemoteAddress" /> and <see cref="P:log4net.Appender.UdpAppender.RemotePort" />
            properties.
            </remarks>
    </member>
    <member name="P:log4net.Appender.UdpAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RemoteSyslogAppender">
      <summary>
            Logs events to a remote syslog daemon.
            </summary>
      <remarks>
        <para>
            The BSD syslog protocol is used to remotely log to
            a syslog daemon. The syslogd listens for for messages
            on UDP port 514.
            </para>
        <para>
            The syslog UDP protocol is not authenticated. Most syslog daemons
            do not accept remote log messages because of the security implications.
            You may be able to use the LocalSyslogAppender to talk to a local
            syslog service.
            </para>
        <para>
            There is an RFC 3164 that claims to document the BSD Syslog Protocol.
            This RFC can be seen here: http://www.faqs.org/rfcs/rfc3164.html.
            This appender generates what the RFC calls an "Original Device Message",
            i.e. does not include the TIMESTAMP or HOSTNAME fields. By observation
            this format of message will be accepted by all current syslog daemon
            implementations. The daemon will attach the current time and the source
            hostname or IP address to any messages received.
            </para>
        <para>
            Syslog messages must have a facility and and a severity. The severity
            is derived from the Level of the logging event.
            The facility must be chosen from the set of defined syslog 
            <see cref="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility" /> values. The facilities list is predefined
            and cannot be extended.
            </para>
        <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.RemoteSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Core.LoggingEvent.Domain" />).
            </para>
      </remarks>
      <author>Rob Lyon</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.RemoteSyslogAppender.SyslogSeverity">
      <summary>
            syslog severities
            </summary>
      <remarks>
        <para>
            The syslog severities.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility">
      <summary>
            syslog facilities
            </summary>
      <remarks>
        <para>
            The syslog facilities
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RemoteSyslogAppender.LevelSeverity">
      <summary>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </summary>
      <remarks>
        <para>
            A class to act as a mapping between the level that a logging call is made at and
            the syslog severity that is should be logged at.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RemoteSyslogAppender.LevelSeverity.Severity">
      <summary>
            The mapped syslog severity for the specified level
            </summary>
      <remarks>
        <para>
            Required property.
            The mapped syslog severity for the specified level
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.RemoteSyslogAppender.DefaultSyslogPort">
      <summary>
            Syslog port 514
            </summary>
    </member>
    <member name="F:log4net.Appender.RemoteSyslogAppender.m_facility">
      <summary>
            The facility. The default facility is <see cref="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.User" />.
            </summary>
    </member>
    <member name="F:log4net.Appender.RemoteSyslogAppender.m_identity">
      <summary>
            The message identity
            </summary>
    </member>
    <member name="F:log4net.Appender.RemoteSyslogAppender.m_levelMapping">
      <summary>
            Mapping from level object to syslog severity
            </summary>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RemoteSyslogAppender" /> class.
            </summary>
      <remarks>
            This instance of the <see cref="T:log4net.Appender.RemoteSyslogAppender" /> class is set up to write 
            to a remote syslog daemon.
            </remarks>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.AddMapping(log4net.Appender.RemoteSyslogAppender.LevelSeverity)">
      <summary>
            Add a mapping of level to severity
            </summary>
      <param name="mapping">The mapping to add</param>
      <remarks>
        <para>
            Add a <see cref="T:log4net.Appender.RemoteSyslogAppender.LevelSeverity" /> mapping to this appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            This method is called by the <see cref="M:log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the event to a remote syslog daemon.
            </para>
        <para>
            The format of the output will depend on the appender's layout.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.ActivateOptions">
      <summary>
            Initialize the options for this appender
            </summary>
      <remarks>
        <para>
            Initialize the level to syslog severity mappings set on this appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.GetSeverity(log4net.Core.Level)">
      <summary>
            Translates a log4net level to a syslog severity.
            </summary>
      <param name="level">A log4net level.</param>
      <returns>A syslog severity.</returns>
      <remarks>
        <para>
            Translates a log4net level to a syslog severity.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemoteSyslogAppender.GeneratePriority(log4net.Appender.RemoteSyslogAppender.SyslogFacility,log4net.Appender.RemoteSyslogAppender.SyslogSeverity)">
      <summary>
            Generate a syslog priority.
            </summary>
      <param name="facility">The syslog facility.</param>
      <param name="severity">The syslog severity.</param>
      <returns>A syslog priority.</returns>
      <remarks>
        <para>
            Generate a syslog priority.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RemoteSyslogAppender.Identity">
      <summary>
            Message identity
            </summary>
      <remarks>
        <para>
            An identifier is specified with each log message. This can be specified
            by setting the <see cref="P:log4net.Appender.RemoteSyslogAppender.Identity" /> property. The identity (also know 
            as the tag) must not contain white space. The default value for the
            identity is the application name (from <see cref="P:log4net.Core.LoggingEvent.Domain" />).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RemoteSyslogAppender.Facility">
      <summary>
            Syslog facility
            </summary>
      <remarks>
            Set to one of the <see cref="T:log4net.Appender.RemoteSyslogAppender.SyslogFacility" /> values. The list of
            facilities is predefined and cannot be extended. The default value
            is <see cref="F:log4net.Appender.RemoteSyslogAppender.SyslogFacility.User" />.
            </remarks>
    </member>
    <member name="T:log4net.Appender.RemotingAppender">
      <summary>
            Delivers logging events to a remote logging sink. 
            </summary>
      <remarks>
        <para>
            This Appender is designed to deliver events to a remote sink. 
            That is any object that implements the <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" />
            interface. It delivers the events using .NET remoting. The
            object to deliver events to is specified by setting the
            appenders <see cref="P:log4net.Appender.RemotingAppender.Sink" /> property.</para>
        <para>
            The RemotingAppender buffers events before sending them. This allows it to 
            make more efficient use of the remoting infrastructure.</para>
        <para>
            Once the buffer is full the events are still not sent immediately. 
            They are scheduled to be sent using a pool thread. The effect is that 
            the send occurs asynchronously. This is very important for a 
            number of non obvious reasons. The remoting infrastructure will 
            flow thread local variables (stored in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />),
            if they are marked as <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />, across the 
            remoting boundary. If the server is not contactable then
            the remoting infrastructure will clear the <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
            objects from the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />. To prevent a logging failure from
            having side effects on the calling application the remoting call must be made
            from a separate thread to the one used by the application. A <see cref="T:System.Threading.ThreadPool" />
            thread is used for this. If no <see cref="T:System.Threading.ThreadPool" /> thread is available then
            the events will block in the thread pool manager until a thread is available.</para>
        <para>
            Because the events are sent asynchronously using pool threads it is possible to close 
            this appender before all the queued events have been sent.
            When closing the appender attempts to wait until all the queued events have been sent, but 
            this will timeout after 30 seconds regardless.</para>
        <para>
            If this appender is being closed because the <see cref="E:System.AppDomain.ProcessExit" />
            event has fired it may not be possible to send all the queued events. During process
            exit the runtime limits the time that a <see cref="E:System.AppDomain.ProcessExit" />
            event handler is allowed to run for. If the runtime terminates the threads before
            the queued events have been sent then they will be lost. To ensure that all events
            are sent the appender must be closed before the application exits. See 
            <see cref="M:log4net.Core.LoggerManager.Shutdown" /> for details on how to shutdown
            log4net programmatically.</para>
      </remarks>
      <seealso cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Daniel Cazzulino</author>
    </member>
    <member name="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink">
      <summary>
            Interface used to deliver <see cref="T:log4net.Core.LoggingEvent" /> objects to a remote sink.
            </summary>
      <remarks>
            This interface must be implemented by a remoting sink
            if the <see cref="T:log4net.Appender.RemotingAppender" /> is to be used
            to deliver logging events to the sink.
            </remarks>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.IRemoteLoggingSink.LogEvents(log4net.Core.LoggingEvent[])">
      <summary>
            Delivers logging events to the remote sink
            </summary>
      <param name="events">Array of events to log.</param>
      <remarks>
        <para>
            Delivers logging events to the remote sink
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.RemotingAppender.m_sinkUrl">
      <summary>
            The URL of the remote sink.
            </summary>
    </member>
    <member name="F:log4net.Appender.RemotingAppender.m_sinkObj">
      <summary>
            The local proxy (.NET remoting) for the remote logging sink.
            </summary>
    </member>
    <member name="F:log4net.Appender.RemotingAppender.m_queuedCallbackCount">
      <summary>
            The number of queued callbacks currently waiting or executing
            </summary>
    </member>
    <member name="F:log4net.Appender.RemotingAppender.m_workQueueEmptyEvent">
      <summary>
            Event used to signal when there are no queued work items
            </summary>
      <remarks>
            This event is set when there are no queued work items. In this
            state it is safe to close the appender.
            </remarks>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RemotingAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.RemotingAppender.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Send the contents of the buffer to the remote sink.
            </summary>
      <remarks>
            The events are not sent immediately. They are scheduled to be sent
            using a pool thread. The effect is that the send occurs asynchronously.
            This is very important for a number of non obvious reasons. The remoting
            infrastructure will flow thread local variables (stored in the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />),
            if they are marked as <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />, across the 
            remoting boundary. If the server is not contactable then
            the remoting infrastructure will clear the <see cref="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
            objects from the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />. To prevent a logging failure from
            having side effects on the calling application the remoting call must be made
            from a separate thread to the one used by the application. A <see cref="T:System.Threading.ThreadPool" />
            thread is used for this. If no <see cref="T:System.Threading.ThreadPool" /> thread is available then
            the events will block in the thread pool manager until a thread is available.
            </remarks>
      <param name="events">The events to send.</param>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.OnClose">
      <summary>
            Override base class close.
            </summary>
      <remarks>
        <para>
            This method waits while there are queued work items. The events are
            sent asynchronously using <see cref="T:System.Threading.ThreadPool" /> work items. These items
            will be sent once a thread pool thread is available to send them, therefore
            it is possible to close the appender before all the queued events have been
            sent.</para>
        <para>
            This method attempts to wait until all the queued events have been sent, but this 
            method will timeout after 30 seconds regardless.</para>
        <para>
            If the appender is being closed because the <see cref="E:System.AppDomain.ProcessExit" />
            event has fired it may not be possible to send all the queued events. During process
            exit the runtime limits the time that a <see cref="E:System.AppDomain.ProcessExit" />
            event handler is allowed to run for.</para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.BeginAsyncSend">
      <summary>
            A work item is being queued into the thread pool
            </summary>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.EndAsyncSend">
      <summary>
            A work item from the thread pool has completed
            </summary>
    </member>
    <member name="M:log4net.Appender.RemotingAppender.SendBufferCallback(System.Object)">
      <summary>
            Send the contents of the buffer to the remote sink.
            </summary>
      <remarks>
            This method is designed to be used with the <see cref="T:System.Threading.ThreadPool" />.
            This method expects to be passed an array of <see cref="T:log4net.Core.LoggingEvent" />
            objects in the state param.
            </remarks>
      <param name="state">the logging events to send</param>
    </member>
    <member name="P:log4net.Appender.RemotingAppender.Sink">
      <summary>
            Gets or sets the URL of the well-known object that will accept 
            the logging events.
            </summary>
      <value>
            The well-known URL of the remote sink.
            </value>
      <remarks>
        <para>
            The URL of the remoting sink that will accept logging events.
            The sink must implement the <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" />
            interface.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RollingFileAppender">
      <summary>
            Appender that rolls log files based on size or date or both.
            </summary>
      <remarks>
        <para>
            RollingFileAppender can roll log files based on size or date or both
            depending on the setting of the <see cref="P:log4net.Appender.RollingFileAppender.RollingStyle" /> property.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Size" /> the log file will be rolled
            once its size exceeds the <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize" />.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Date" /> the log file will be rolled
            once the date boundary specified in the <see cref="P:log4net.Appender.RollingFileAppender.DatePattern" /> property
            is crossed.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Composite" /> the log file will be
            rolled once the date boundary specified in the <see cref="P:log4net.Appender.RollingFileAppender.DatePattern" /> property
            is crossed, but within a date boundary the file will also be rolled
            once its size exceeds the <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize" />.
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Once" /> the log file will be rolled when
            the appender is configured. This effectively means that the log file can be
            rolled once per program execution.
            </para>
        <para>
            A of few additional optional features have been added:
            <list type="bullet"><item>Attach date pattern for current log file <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /></item><item>Backup number increments for newer files <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /></item><item>Infinite number of backups by file size <see cref="P:log4net.Appender.RollingFileAppender.MaxSizeRollBackups" /></item></list></para>
        <note>
          <para>
            For large or infinite numbers of backup files a <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> 
            greater than zero is highly recommended, otherwise all the backup files need
            to be renamed each time a new backup is created.
            </para>
          <para>
            When Date/Time based rolling is used setting <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /> 
            to <see langword="true" /> will reduce the number of file renamings to few or none.
            </para>
        </note>
        <note type="caution">
          <para>
            Changing <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /> or <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> without clearing
            the log file directory of backup files will cause unexpected and unwanted side effects.  
            </para>
        </note>
        <para>
            If Date/Time based rolling is enabled this appender will attempt to roll existing files
            in the directory without a Date/Time tag based on the last write date of the base log file.
            The appender only rolls the log file when a message is logged. If Date/Time based rolling 
            is enabled then the appender will not roll the log file at the Date/Time boundary but
            at the point when the next message is logged after the boundary has been crossed.
            </para>
        <para>
            The <see cref="T:log4net.Appender.RollingFileAppender" /> extends the <see cref="T:log4net.Appender.FileAppender" /> and
            has the same behavior when opening the log file.
            The appender will first try to open the file for writing when <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" />
            is called. This will typically be during configuration.
            If the file cannot be opened for writing the appender will attempt
            to open the file again each time a message is logged to the appender.
            If the file cannot be opened for writing when a message is logged then
            the message will be discarded by this appender.
            </para>
        <para>
            When rolling a backup file necessitates deleting an older backup file the
            file to be deleted is moved to a temporary name before being deleted.
            </para>
        <note type="caution">
          <para>
            A maximum number of backup files when rolling on date/time boundaries is not supported.
            </para>
        </note>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Aspi Havewala</author>
      <author>Douglas de la Torre</author>
      <author>Edward Smit</author>
    </member>
    <member name="T:log4net.Appender.RollingFileAppender.RollingMode">
      <summary>
            Style of rolling to use
            </summary>
      <remarks>
        <para>
            Style of rolling to use
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RollingFileAppender.RollPoint">
      <summary>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </summary>
      <remarks>
        <para>
            The code assumes that the following 'time' constants are in a increasing sequence.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RollingFileAppender.IDateTime">
      <summary>
            This interface is used to supply Date/Time information to the <see cref="T:log4net.Appender.RollingFileAppender" />.
            </summary>
      <remarks>
            This interface is used to supply Date/Time information to the <see cref="T:log4net.Appender.RollingFileAppender" />.
            Used primarily to allow test classes to plug themselves in so they can
            supply test date/times.
            </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.IDateTime.Now">
      <summary>
            Gets the <i>current</i> time.
            </summary>
      <value>The <i>current</i> time.</value>
      <remarks>
        <para>
            Gets the <i>current</i> time.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.RollingFileAppender.DefaultDateTime">
      <summary>
            Default implementation of <see cref="T:log4net.Appender.RollingFileAppender.IDateTime" /> that returns the current time.
            </summary>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.DefaultDateTime.Now">
      <summary>
            Gets the <b>current</b> time.
            </summary>
      <value>The <b>current</b> time.</value>
      <remarks>
        <para>
            Gets the <b>current</b> time.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_dateTime">
      <summary>
            This object supplies the current date/time.  Allows test code to plug in
            a method to control this class when testing date/time based rolling.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_datePattern">
      <summary>
            The date pattern. By default, the pattern is set to <c>".yyyy-MM-dd"</c> 
            meaning daily rollover.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_scheduledFilename">
      <summary>
            The actual formatted filename that is currently being written to
            or will be the file transferred to on roll over
            (based on staticLogFileName).
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_nextCheck">
      <summary>
            The timestamp when we shall next recompute the filename.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_now">
      <summary>
            Holds date of last roll over
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_rollPoint">
      <summary>
            The type of rolling done
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_maxFileSize">
      <summary>
            The default maximum file size is 10MB
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_maxSizeRollBackups">
      <summary>
            There is zero backup files by default
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_curSizeRollBackups">
      <summary>
            How many sized based backups have been made so far
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_countDirection">
      <summary>
            The rolling file count direction. 
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_rollingStyle">
      <summary>
            The rolling mode used in this appender.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_rollDate">
      <summary>
            Cache flag set if we are rolling by date.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_rollSize">
      <summary>
            Cache flag set if we are rolling by size.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_staticLogFileName">
      <summary>
            Value indicating whether to always log to the same file.
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.m_baseFileName">
      <summary>
            FileName provided in configuration.  Used for rolling properly
            </summary>
    </member>
    <member name="F:log4net.Appender.RollingFileAppender.s_date1970">
      <summary>
            The 1st of January 1970 in UTC
            </summary>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.RollingFileAppender" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.SetQWForFiles(System.IO.TextWriter)">
      <summary>
            Sets the quiet writer being used.
            </summary>
      <remarks>
            This method can be overridden by sub classes.
            </remarks>
      <param name="writer">the writer to set</param>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Write out a logging event.
            </summary>
      <param name="loggingEvent">the event to write to file.</param>
      <remarks>
        <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.Append(log4net.Core.LoggingEvent[])">
      <summary>
            Write out an array of logging events.
            </summary>
      <param name="loggingEvents">the events to write to file.</param>
      <remarks>
        <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.AdjustFileBeforeAppend">
      <summary>
            Performs any required rolling before outputting the next event
            </summary>
      <remarks>
        <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.OpenFile(System.String,System.Boolean)">
      <summary>
            Creates and opens the file for logging.  If <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" />
            is false then the fully qualified name is determined and used.
            </summary>
      <param name="fileName">the name of the file to open</param>
      <param name="append">true to append to existing file</param>
      <remarks>
        <para>This method will ensure that the directory structure
            for the <paramref name="fileName" /> specified exists.</para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.GetNextOutputFileName(System.String)">
      <summary>
            Get the current output file name
            </summary>
      <param name="fileName">the base file name</param>
      <returns>the output file name</returns>
      <remarks>
            The output file name is based on the base fileName specified.
            If <see cref="P:log4net.Appender.RollingFileAppender.StaticLogFileName" /> is set then the output 
            file name is the same as the base file passed in. Otherwise
            the output file depends on the date pattern, on the count
            direction or both.
            </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.DetermineCurSizeRollBackups">
      <summary>
            Determines curSizeRollBackups (only within the current roll point)
            </summary>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.GetWildcardPatternForFile(System.String)">
      <summary>
            Generates a wildcard pattern that can be used to find all files
            that are similar to the base file name.
            </summary>
      <param name="baseFileName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.GetExistingFiles(System.String)">
      <summary>
            Builds a list of filenames for all files matching the base filename plus a file
            pattern.
            </summary>
      <param name="baseFilePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.RollOverIfDateBoundaryCrossing">
      <summary>
            Initiates a roll over if needed for crossing a date boundary since the last run.
            </summary>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.ExistingInit">
      <summary>
            Initializes based on existing conditions at time of <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" />.
            </summary>
      <remarks>
        <para>
            Initializes based on existing conditions at time of <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" />.
            The following is done
            <list type="bullet"><item>determine curSizeRollBackups (only within the current roll point)</item><item>initiates a roll over if needed for crossing a date boundary since the last run.</item></list></para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.InitializeFromOneFile(System.String,System.String)">
      <summary>
            Does the work of bumping the 'current' file counter higher
            to the highest count when an incremental file name is seen.
            The highest count is either the first file (when count direction
            is greater than 0) or the last file (when count direction less than 0).
            In either case, we want to know the highest count that is present.
            </summary>
      <param name="baseFile">
      </param>
      <param name="curFileName">
      </param>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.InitializeRollBackups(System.String,System.Collections.ArrayList)">
      <summary>
            Takes a list of files and a base file name, and looks for 
            'incremented' versions of the base file.  Bumps the max
            count up to the highest count seen.
            </summary>
      <param name="baseFile">
      </param>
      <param name="arrayFiles">
      </param>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.ComputeCheckPeriod(System.String)">
      <summary>
            Calculates the RollPoint for the datePattern supplied.
            </summary>
      <param name="datePattern">the date pattern to calculate the check period for</param>
      <returns>The RollPoint that is most accurate for the date pattern supplied</returns>
      <remarks>
            Essentially the date pattern is examined to determine what the
            most suitable roll point is. The roll point chosen is the roll point
            with the smallest period that can be detected using the date pattern
            supplied. i.e. if the date pattern only outputs the year, month, day 
            and hour then the smallest roll point that can be detected would be
            and hourly roll point as minutes could not be detected.
            </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.RollingFileAppender.ActivateOptions" /> must be called again.
            </para>
        <para>
            Sets initial conditions including date/time roll over information, first check,
            scheduledFilename, and calls <see cref="M:log4net.Appender.RollingFileAppender.ExistingInit" /> to initialize
            the current number of backups.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.RollOverTime(System.Boolean)">
      <summary>
            Rollover the file(s) to date/time tagged file(s).
            </summary>
      <param name="fileIsOpen">set to true if the file to be rolled is currently open</param>
      <remarks>
        <para>
            Rollover the file(s) to date/time tagged file(s).
            Resets curSizeRollBackups. 
            If fileIsOpen is set then the new file is opened (through SafeOpenFile).
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.RollFile(System.String,System.String)">
      <summary>
            Renames file <paramref name="fromFile" /> to file <paramref name="toFile" />.
            </summary>
      <param name="fromFile">Name of existing file to roll.</param>
      <param name="toFile">New name for file.</param>
      <remarks>
        <para>
            Renames file <paramref name="fromFile" /> to file <paramref name="toFile" />. It
            also checks for existence of target file and deletes if it does.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.FileExists(System.String)">
      <summary>
            Test if a file exists at a specified path
            </summary>
      <param name="path">the path to the file</param>
      <returns>true if the file exists</returns>
      <remarks>
        <para>
            Test if a file exists at a specified path
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.DeleteFile(System.String)">
      <summary>
            Deletes the specified file if it exists.
            </summary>
      <param name="fileName">The file to delete.</param>
      <remarks>
        <para>
            Delete a file if is exists.
            The file is first moved to a new filename then deleted.
            This allows the file to be removed even when it cannot
            be deleted, but it still can be moved.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.RollOverSize">
      <summary>
            Implements file roll base on file size.
            </summary>
      <remarks>
        <para>
            If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- its index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}. Moreover, <c>File</c> is
            renamed <c>File.1</c> and closed.
            </para>
        <para>
            A new file is created to receive further log output.
            </para>
        <para>
            If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.
            </para>
        <para>
            If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.RollOverRenameFiles(System.String)">
      <summary>
            Implements file roll.
            </summary>
      <param name="baseFileName">the base name to rename</param>
      <remarks>
        <para>
            If the maximum number of size based backups is reached
            (<c>curSizeRollBackups == maxSizeRollBackups</c>) then the oldest
            file is deleted -- its index determined by the sign of countDirection.
            If <c>countDirection</c> &lt; 0, then files
            {<c>File.1</c>, ..., <c>File.curSizeRollBackups -1</c>}
            are renamed to {<c>File.2</c>, ...,
            <c>File.curSizeRollBackups</c>}. 
            </para>
        <para>
            If <c>maxSizeRollBackups</c> is equal to zero, then the
            <c>File</c> is truncated with no backup files created.
            </para>
        <para>
            If <c>maxSizeRollBackups</c> &lt; 0, then <c>File</c> is
            renamed if needed and no files are deleted.
            </para>
        <para>
            This is called by <see cref="M:log4net.Appender.RollingFileAppender.RollOverSize" /> to rename the files.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.RollingFileAppender.NextCheckDate(System.DateTime,log4net.Appender.RollingFileAppender.RollPoint)">
      <summary>
            Get the start time of the next window for the current rollpoint
            </summary>
      <param name="currentDateTime">the current date</param>
      <param name="rollPoint">the type of roll point we are working with</param>
      <returns>the start time for the next roll point an interval after the currentDateTime date</returns>
      <remarks>
        <para>
            Returns the date of the next roll point after the currentDateTime date passed to the method.
            </para>
        <para>
            The basic strategy is to subtract the time parts that are less significant
            than the rollpoint from the current time. This should roll the time back to
            the start of the time window for the current rollpoint. Then we add 1 window
            worth of time and get the start time of the next window for the rollpoint.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.DatePattern">
      <summary>
            Gets or sets the date pattern to be used for generating file names
            when rolling over on date.
            </summary>
      <value>
            The date pattern to be used for generating file names when rolling 
            over on date.
            </value>
      <remarks>
        <para>
            Takes a string in the same format as expected by 
            <see cref="T:log4net.DateFormatter.SimpleDateFormatter" />.
            </para>
        <para>
            This property determines the rollover schedule when rolling over
            on date.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.MaxSizeRollBackups">
      <summary>
            Gets or sets the maximum number of backup files that are kept before
            the oldest is erased.
            </summary>
      <value>
            The maximum number of backup files that are kept before the oldest is
            erased.
            </value>
      <remarks>
        <para>
            If set to zero, then there will be no backup files and the log file 
            will be truncated when it reaches <see cref="P:log4net.Appender.RollingFileAppender.MaxFileSize" />.  
            </para>
        <para>
            If a negative number is supplied then no deletions will be made.  Note 
            that this could result in very slow performance as a large number of 
            files are rolled over unless <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> is used.
            </para>
        <para>
            The maximum applies to <b>each</b> time based group of files and 
            <b>not</b> the total.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.MaxFileSize">
      <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
      <value>
            The maximum size in bytes that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
      <remarks>
        <para>
            This property is equivalent to <see cref="P:log4net.Appender.RollingFileAppender.MaximumFileSize" /> except
            that it is required for differentiating the setter taking a
            <see cref="T:System.Int64" /> argument from the setter taking a <see cref="T:System.String" /> 
            argument.
            </para>
        <para>
            The default maximum file size is 10MB (10*1024*1024).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.MaximumFileSize">
      <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
      <value>
            The maximum size that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
      <remarks>
        <para>
            This property allows you to specify the maximum size with the
            suffixes "KB", "MB" or "GB" so that the size is interpreted being 
            expressed respectively in kilobytes, megabytes or gigabytes. 
            </para>
        <para>
            For example, the value "10KB" will be interpreted as 10240 bytes.
            </para>
        <para>
            The default maximum file size is 10MB.
            </para>
        <para>
            If you have the option to set the maximum file size programmatically
            consider using the <see cref="P:log4net.Appender.RollingFileAppender.MaxFileSize" /> property instead as this
            allows you to set the size in bytes as a <see cref="T:System.Int64" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.CountDirection">
      <summary>
            Gets or sets the rolling file count direction. 
            </summary>
      <value>
            The rolling file count direction.
            </value>
      <remarks>
        <para>
            Indicates if the current file is the lowest numbered file or the
            highest numbered file.
            </para>
        <para>
            By default newer files have lower numbers (<see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &lt; 0),
            i.e. log.1 is most recent, log.5 is the 5th backup, etc...
            </para>
        <para>
          <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &gt;= 0 does the opposite i.e.
            log.1 is the first backup made, log.5 is the 5th backup made, etc.
            For infinite backups use <see cref="P:log4net.Appender.RollingFileAppender.CountDirection" /> &gt;= 0 to reduce 
            rollover costs.
            </para>
        <para>The default file count direction is -1.</para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.RollingStyle">
      <summary>
            Gets or sets the rolling style.
            </summary>
      <value>The rolling style.</value>
      <remarks>
        <para>
            The default rolling style is <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Composite" />.
            </para>
        <para>
            When set to <see cref="F:log4net.Appender.RollingFileAppender.RollingMode.Once" /> this appender's
            <see cref="P:log4net.Appender.FileAppender.AppendToFile" /> property is set to <c>false</c>, otherwise
            the appender would append to a single file rather than rolling
            the file each time it is opened.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.RollingFileAppender.StaticLogFileName">
      <summary>
            Gets or sets a value indicating whether to always log to
            the same file.
            </summary>
      <value>
        <c>true</c> if always should be logged to the same file, otherwise <c>false</c>.
            </value>
      <remarks>
        <para>
            By default file.log is always the current file.  Optionally
            file.log.yyyy-mm-dd for current formatted datePattern can by the currently
            logging file (or file.log.curSizeRollBackup or even
            file.log.yyyy-mm-dd.curSizeRollBackup).
            </para>
        <para>
            This will make time based rollovers with a large number of backups 
            much faster as the appender it won't have to rename all the backups!
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.SmtpAppender">
      <summary>
            Send an e-mail when a specific logging event occurs, typically on errors 
            or fatal errors.
            </summary>
      <remarks>
        <para>
            The number of logging events delivered in this e-mail depend on
            the value of <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> option. The
            <see cref="T:log4net.Appender.SmtpAppender" /> keeps only the last
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> logging events in its 
            cyclic buffer. This keeps memory requirements at a reasonable level while 
            still delivering useful application context.
            </para>
        <note type="caution">
            Authentication and setting the server Port are only available on the MS .NET 1.1 runtime.
            For these features to be enabled you need to ensure that you are using a version of
            the log4net assembly that is built against the MS .NET 1.1 framework and that you are
            running the your application on the MS .NET 1.1 runtime. On all other platforms only sending
            unauthenticated messages to a server listening on port 25 (the default) is supported.
            </note>
        <para>
            Authentication is supported by setting the <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> property to
            either <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" /> or <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm" />.
            If using <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" /> authentication then the <see cref="P:log4net.Appender.SmtpAppender.Username" />
            and <see cref="P:log4net.Appender.SmtpAppender.Password" /> properties must also be set.
            </para>
        <para>
            To set the SMTP server port use the <see cref="P:log4net.Appender.SmtpAppender.Port" /> property. The default port is 25.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Appender.SmtpAppender.SmtpAuthentication">
      <summary>
            Values for the <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> property.
            </summary>
      <remarks>
        <para>
            SMTP authentication modes.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.SmtpAppender.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.SmtpAppender.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Sends the contents of the cyclic buffer as an e-mail message.
            </summary>
      <param name="events">The logging events to send.</param>
    </member>
    <member name="M:log4net.Appender.SmtpAppender.SendEmail(System.String)">
      <summary>
            Send the email message
            </summary>
      <param name="messageBody">the body text to include in the mail</param>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.To">
      <summary>
            Gets or sets a semicolon-delimited list of recipient e-mail addresses.
            </summary>
      <value>
            A semicolon-delimited list of e-mail addresses.
            </value>
      <remarks>
        <para>
            A semicolon-delimited list of recipient e-mail addresses.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.From">
      <summary>
            Gets or sets the e-mail address of the sender.
            </summary>
      <value>
            The e-mail address of the sender.
            </value>
      <remarks>
        <para>
            The e-mail address of the sender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Subject">
      <summary>
            Gets or sets the subject line of the e-mail message.
            </summary>
      <value>
            The subject line of the e-mail message.
            </value>
      <remarks>
        <para>
            The subject line of the e-mail message.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.SmtpHost">
      <summary>
            Gets or sets the name of the SMTP relay mail server to use to send 
            the e-mail messages.
            </summary>
      <value>
            The name of the e-mail relay server. If SmtpServer is not set, the 
            name of the local SMTP server is used.
            </value>
      <remarks>
        <para>
            The name of the e-mail relay server. If SmtpServer is not set, the 
            name of the local SMTP server is used.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.LocationInfo">
      <summary>
            Obsolete
            </summary>
      <remarks>
            Use the BufferingAppenderSkeleton Fix methods instead 
            </remarks>
      <remarks>
        <para>
            Obsolete property.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Authentication">
      <summary>
            The mode to use to authentication with the SMTP server
            </summary>
      <remarks>
        <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
        <para>
            Valid Authentication mode values are: <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.None" />, 
            <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" />, and <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm" />. 
            The default value is <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.None" />. When using 
            <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" /> you must specify the <see cref="P:log4net.Appender.SmtpAppender.Username" /> 
            and <see cref="P:log4net.Appender.SmtpAppender.Password" /> to use to authenticate.
            When using <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Ntlm" /> the Windows credentials for the current
            thread, if impersonating, or the process will be used to authenticate. 
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Username">
      <summary>
            The username to use to authenticate with the SMTP server
            </summary>
      <remarks>
        <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
        <para>
            A <see cref="P:log4net.Appender.SmtpAppender.Username" /> and <see cref="P:log4net.Appender.SmtpAppender.Password" /> must be specified when 
            <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> is set to <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" />, 
            otherwise the username will be ignored. 
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Password">
      <summary>
            The password to use to authenticate with the SMTP server
            </summary>
      <remarks>
        <note type="caution">Authentication is only available on the MS .NET 1.1 runtime.</note>
        <para>
            A <see cref="P:log4net.Appender.SmtpAppender.Username" /> and <see cref="P:log4net.Appender.SmtpAppender.Password" /> must be specified when 
            <see cref="P:log4net.Appender.SmtpAppender.Authentication" /> is set to <see cref="F:log4net.Appender.SmtpAppender.SmtpAuthentication.Basic" />, 
            otherwise the password will be ignored. 
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Port">
      <summary>
            The port on which the SMTP server is listening
            </summary>
      <remarks>
        <note type="caution">Server Port is only available on the MS .NET 1.1 runtime.</note>
        <para>
            The port on which the SMTP server is listening. The default
            port is <c>25</c>. The Port can only be changed when running on
            the MS .NET 1.1 runtime.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.Priority">
      <summary>
            Gets or sets the priority of the e-mail message
            </summary>
      <value>
            One of the <see cref="T:System.Net.Mail.MailPriority" /> values.
            </value>
      <remarks>
        <para>
            Sets the priority of the e-mails generated by this
            appender. The default priority is <see cref="F:System.Net.Mail.MailPriority.Normal" />.
            </para>
        <para>
            If you are using this appender to report errors then
            you may want to set the priority to <see cref="F:System.Net.Mail.MailPriority.High" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.SmtpPickupDirAppender">
      <summary>
            Send an email when a specific logging event occurs, typically on errors 
            or fatal errors. Rather than sending via smtp it writes a file into the
            directory specified by <see cref="P:log4net.Appender.SmtpPickupDirAppender.PickupDir" />. This allows services such
            as the IIS SMTP agent to manage sending the messages.
            </summary>
      <remarks>
        <para>
            The configuration for this appender is identical to that of the <c>SMTPAppender</c>,
            except that instead of specifying the <c>SMTPAppender.SMTPHost</c> you specify
            <see cref="P:log4net.Appender.SmtpPickupDirAppender.PickupDir" />.
            </para>
        <para>
            The number of logging events delivered in this e-mail depend on
            the value of <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> option. The
            <see cref="T:log4net.Appender.SmtpPickupDirAppender" /> keeps only the last
            <see cref="P:log4net.Appender.BufferingAppenderSkeleton.BufferSize" /> logging events in its 
            cyclic buffer. This keeps memory requirements at a reasonable level while 
            still delivering useful application context.
            </para>
      </remarks>
      <author>Niall Daley</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Appender.SmtpPickupDirAppender.m_securityContext">
      <summary>
            The security context to use for privileged calls
            </summary>
    </member>
    <member name="M:log4net.Appender.SmtpPickupDirAppender.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.SmtpPickupDirAppender.SendBuffer(log4net.Core.LoggingEvent[])">
      <summary>
            Sends the contents of the cyclic buffer as an e-mail message.
            </summary>
      <param name="events">The logging events to send.</param>
      <remarks>
        <para>
            Sends the contents of the cyclic buffer as an e-mail message.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions">
      <summary>
            Activate the options on this appender. 
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.SmtpPickupDirAppender.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.SmtpPickupDirAppender.ConvertToFullPath(System.String)">
      <summary>
            Convert a path into a fully qualified path.
            </summary>
      <param name="path">The path to convert.</param>
      <returns>The fully qualified path.</returns>
      <remarks>
        <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.To">
      <summary>
            Gets or sets a semicolon-delimited list of recipient e-mail addresses.
            </summary>
      <value>
            A semicolon-delimited list of e-mail addresses.
            </value>
      <remarks>
        <para>
            A semicolon-delimited list of e-mail addresses.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.From">
      <summary>
            Gets or sets the e-mail address of the sender.
            </summary>
      <value>
            The e-mail address of the sender.
            </value>
      <remarks>
        <para>
            The e-mail address of the sender.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.Subject">
      <summary>
            Gets or sets the subject line of the e-mail message.
            </summary>
      <value>
            The subject line of the e-mail message.
            </value>
      <remarks>
        <para>
            The subject line of the e-mail message.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.PickupDir">
      <summary>
            Gets or sets the path to write the messages to.
            </summary>
      <remarks>
        <para>
            Gets or sets the path to write the messages to. This should be the same
            as that used by the agent sending the messages.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext">
      <summary>
            Gets or sets the <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext" /> used to write to the pickup directory.
            </summary>
      <value>
            The <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext" /> used to write to the pickup directory.
            </value>
      <remarks>
        <para>
            Unless a <see cref="P:log4net.Appender.SmtpPickupDirAppender.SecurityContext" /> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.SmtpPickupDirAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.TelnetAppender">
      <summary>
            Appender that allows clients to connect via Telnet to receive log messages
            </summary>
      <remarks>
        <para>
            The TelnetAppender accepts socket connections and streams logging messages
            back to the client.  
            The output is provided in a telnet-friendly way so that a log can be monitored 
            over a TCP/IP socket.
            This allows simple remote monitoring of application logging.
            </para>
        <para>
            The default <see cref="P:log4net.Appender.TelnetAppender.Port" /> is 23 (the telnet port).
            </para>
      </remarks>
      <author>Keith Long</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Appender.TelnetAppender.SocketHandler">
      <summary>
            Helper class to manage connected clients
            </summary>
      <remarks>
        <para>
            The SocketHandler class is used to accept connections from
            clients.  It is threaded so that clients can connect/disconnect
            asynchronously.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.TelnetAppender.SocketHandler.SocketClient">
      <summary>
            Class that represents a client connected to this handler
            </summary>
      <remarks>
        <para>
            Class that represents a client connected to this handler
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.#ctor(System.Net.Sockets.Socket)">
      <summary>
            Create this <see cref="T:log4net.Appender.TelnetAppender.SocketHandler.SocketClient" /> for the specified <see cref="T:System.Net.Sockets.Socket" /></summary>
      <param name="socket">the client's socket</param>
      <remarks>
        <para>
            Opens a stream writer on the socket.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.Send(System.String)">
      <summary>
            Write a string to the client
            </summary>
      <param name="message">string to send</param>
      <remarks>
        <para>
            Write a string to the client
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.SocketClient.Dispose">
      <summary>
            Cleanup the clients connection
            </summary>
      <remarks>
        <para>
            Close the socket connection.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.#ctor(System.Int32)">
      <summary>
            Opens a new server port on <paramref ref="port" /></summary>
      <param name="port">the local port to listen on for connections</param>
      <remarks>
        <para>
            Creates a socket handler on the specified local server port.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.Send(System.String)">
      <summary>
            Sends a string message to each of the connected clients
            </summary>
      <param name="message">the text to send</param>
      <remarks>
        <para>
            Sends a string message to each of the connected clients
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.AddClient(log4net.Appender.TelnetAppender.SocketHandler.SocketClient)">
      <summary>
            Add a client to the internal clients list
            </summary>
      <param name="client">client to add</param>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.RemoveClient(log4net.Appender.TelnetAppender.SocketHandler.SocketClient)">
      <summary>
            Remove a client from the internal clients list
            </summary>
      <param name="client">client to remove</param>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.OnConnect(System.IAsyncResult)">
      <summary>
            Callback used to accept a connection on the server socket
            </summary>
      <param name="asyncResult">The result of the asynchronous operation</param>
      <remarks>
        <para>
            On connection adds to the list of connections 
            if there are two many open connections you will be disconnected
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.SocketHandler.Dispose">
      <summary>
            Close all network connections
            </summary>
      <remarks>
        <para>
            Make sure we close all network connections
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TelnetAppender.SocketHandler.HasConnections">
      <summary>
            Test if this handler has active connections
            </summary>
      <value>
        <c>true</c> if this handler has active connections
            </value>
      <remarks>
        <para>
            This property will be <c>true</c> while this handler has
            active connections, that is at least one connection that 
            the handler will attempt to send a message to.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.OnClose">
      <summary>
            Overrides the parent method to close the socket handler
            </summary>
      <remarks>
        <para>
            Closes all the outstanding connections.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.ActivateOptions">
      <summary>
            Initialize the appender based on the options set.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Appender.TelnetAppender.ActivateOptions" /> must be called again.
            </para>
        <para>
            Create the socket handler and wait for connections
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TelnetAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Writes the logging event to each connected client.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the logging event to each connected client.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TelnetAppender.Port">
      <summary>
            Gets or sets the TCP port number on which this <see cref="T:log4net.Appender.TelnetAppender" /> will listen for connections.
            </summary>
      <value>
            An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> 
            indicating the TCP port number on which this <see cref="T:log4net.Appender.TelnetAppender" /> will listen for connections.
            </value>
      <remarks>
        <para>
            The default value is 23 (the telnet port).
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The value specified is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> 
            or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
    </member>
    <member name="P:log4net.Appender.TelnetAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Appender.TraceAppender">
      <summary>
            Appends log events to the <see cref="T:System.Diagnostics.Trace" /> system.
            </summary>
      <remarks>
        <para>
            The application configuration file can be used to control what listeners 
            are actually used. See the MSDN documentation for the 
            <see cref="T:System.Diagnostics.Trace" /> class for details on configuring the
            trace system.
            </para>
        <para>
            Events are written using the <c>System.Diagnostics.Trace.Write(string,string)</c>
            method. The event's logger name is passed as the value for the category name to the Write method.
            </para>
        <para>
          <b>Compact Framework</b>
          <br />
            The Compact Framework does not support the <see cref="T:System.Diagnostics.Trace" />
            class for any operation except <c>Assert</c>. When using the Compact Framework this
            appender will write to the <see cref="T:System.Diagnostics.Debug" /> system rather than
            the Trace system. This appender will therefore behave like the <see cref="T:log4net.Appender.DebugAppender" />.
            </para>
      </remarks>
      <author>Douglas de la Torre</author>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Appender.TraceAppender.m_immediateFlush">
      <summary>
            Immediate flush means that the underlying writer or output stream
            will be flushed at the end of each append operation.
            </summary>
      <remarks>
        <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.TraceAppender.ImmediateFlush" /> is set to
            <c>false</c>, then there is a good chance that the last few
            logs events are not actually written to persistent media if and
            when the application crashes.
            </para>
        <para>
            The default value is <c>true</c>.</para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TraceAppender.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TraceAppender" />.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TraceAppender.#ctor(log4net.Layout.ILayout)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TraceAppender" /> 
            with a specified layout.
            </summary>
      <param name="layout">The layout to use with this appender.</param>
      <remarks>
        <para>
            Obsolete constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Appender.TraceAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Writes the logging event to the <see cref="T:System.Diagnostics.Trace" /> system.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Writes the logging event to the <see cref="T:System.Diagnostics.Trace" /> system.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TraceAppender.ImmediateFlush">
      <summary>
            Gets or sets a value that indicates whether the appender will 
            flush at the end of each write.
            </summary>
      <remarks>
        <para>The default behavior is to flush at the end of each 
            write. If the option is set to<c>false</c>, then the underlying 
            stream can defer writing to physical medium to a later time. 
            </para>
        <para>
            Avoiding the flush operation at the end of each append results 
            in a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Appender.TraceAppender.RequiresLayout">
      <summary>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            This appender requires a <see cref="N:log4net.Layout" /> to be set.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.AliasRepositoryAttribute">
      <summary>
            Assembly level attribute that specifies a repository to alias to this assembly's repository.
            </summary>
      <remarks>
        <para>
            An assembly's logger repository is defined by its <see cref="T:log4net.Config.RepositoryAttribute" />,
            however this can be overridden by an assembly loaded before the target assembly.
            </para>
        <para>
            An assembly can alias another assembly's repository to its repository by
            specifying this attribute with the name of the target repository.
            </para>
        <para>
            This attribute can only be specified on the assembly and may be used
            as many times as necessary to alias all the required repositories.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.AliasRepositoryAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasRepositoryAttribute" /> class with 
            the specified repository to alias to this assembly's repository.
            </summary>
      <param name="name">The repository to alias to this assemby's repository.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasRepositoryAttribute" /> class with 
            the specified repository to alias to this assembly's repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.AliasRepositoryAttribute.Name">
      <summary>
            Gets or sets the repository to alias to this assemby's repository.
            </summary>
      <value>
            The repository to alias to this assemby's repository.
            </value>
      <remarks>
        <para>
            The name of the repository to alias to this assemby's repository.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.AliasDomainAttribute">
      <summary>
            Assembly level attribute that specifies a domain to alias to this assembly's repository.
            </summary>
      <remarks>
        <para>
          <b>AliasDomainAttribute is obsolete. Use AliasRepositoryAttribute instead of AliasDomainAttribute.</b>
        </para>
        <para>
            An assembly's logger repository is defined by its <see cref="T:log4net.Config.DomainAttribute" />,
            however this can be overridden by an assembly loaded before the target assembly.
            </para>
        <para>
            An assembly can alias another assembly's domain to its repository by
            specifying this attribute with the name of the target domain.
            </para>
        <para>
            This attribute can only be specified on the assembly and may be used
            as many times as necessary to alias all the required domains.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.AliasDomainAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.AliasDomainAttribute" /> class with 
            the specified domain to alias to this assembly's repository.
            </summary>
      <param name="name">The domain to alias to this assemby's repository.</param>
      <remarks>
        <para>
            Obsolete. Use <see cref="T:log4net.Config.AliasRepositoryAttribute" /> instead of <see cref="T:log4net.Config.AliasDomainAttribute" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.BasicConfigurator">
      <summary>
            Use this class to quickly configure a <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </summary>
      <remarks>
        <para>
            Allows very simple programmatic configuration of log4net.
            </para>
        <para>
            Only one appender can be configured using this configurator.
            The appender is set at the root of the hierarchy and all logging
            events will be delivered to that appender.
            </para>
        <para>
            Appenders can also implement the <see cref="T:log4net.Core.IOptionHandler" /> interface. Therefore
            they would require that the <see cref="M:log4net.Core.IOptionHandler.ActivateOptions" /> method
            be called after the appenders properties have been configured.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.BasicConfigurator" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.Configure">
      <summary>
            Initializes the log4net system with a default configuration.
            </summary>
      <remarks>
        <para>
            Initializes the log4net logging system using a <see cref="T:log4net.Appender.ConsoleAppender" />
            that will write to <c>Console.Out</c>. The log messages are
            formatted using the <see cref="T:log4net.Layout.PatternLayout" /> layout object
            with the <see cref="F:log4net.Layout.PatternLayout.DetailConversionPattern" />
            layout style.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Appender.IAppender)">
      <summary>
            Initializes the log4net system using the specified appender.
            </summary>
      <param name="appender">The appender to use to log all logging events.</param>
      <remarks>
        <para>
            Initializes the log4net system using the specified appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Repository.ILoggerRepository)">
      <summary>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> with a default configuration.
            </summary>
      <param name="repository">The repository to configure.</param>
      <remarks>
        <para>
            Initializes the specified repository using a <see cref="T:log4net.Appender.ConsoleAppender" />
            that will write to <c>Console.Out</c>. The log messages are
            formatted using the <see cref="T:log4net.Layout.PatternLayout" /> layout object
            with the <see cref="F:log4net.Layout.PatternLayout.DetailConversionPattern" />
            layout style.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.BasicConfigurator.Configure(log4net.Repository.ILoggerRepository,log4net.Appender.IAppender)">
      <summary>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified appender.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="appender">The appender to use to log all logging events.</param>
      <remarks>
        <para>
            Initializes the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified appender.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.ConfiguratorAttribute">
      <summary>
            Base class for all log4net configuration attributes.
            </summary>
      <remarks>
            This is an abstract class that must be extended by 
            specific configurators. This attribute allows the
            configurator to be parameterized by an assembly level
            attribute.
            </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.ConfiguratorAttribute.#ctor(System.Int32)">
      <summary>
            Constructor used by subclasses.
            </summary>
      <param name="priority">the ordering priority for this configurator</param>
      <remarks>
        <para>
            The <paramref name="priority" /> is used to order the configurator
            attributes before they are invoked. Higher priority configurators are executed
            before lower priority ones.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.ConfiguratorAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
      <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
      <param name="targetRepository">The repository to configure.</param>
      <remarks>
        <para>
            Abstract method implemented by a subclass. When this method is called
            the subclass should configure the <paramref name="targetRepository" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.ConfiguratorAttribute.CompareTo(System.Object)">
      <summary>
            Compare this instance to another ConfiguratorAttribute
            </summary>
      <param name="obj">the object to compare to</param>
      <returns>see <see cref="M:System.IComparable.CompareTo(System.Object)" /></returns>
      <remarks>
        <para>
            Compares the priorities of the two <see cref="T:log4net.Config.ConfiguratorAttribute" /> instances.
            Sorts by priority in descending order. Objects with the same priority are
            randomly ordered.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.RepositoryAttribute">
      <summary>
            Assembly level attribute that specifies the logging repository for the assembly.
            </summary>
      <remarks>
        <para>
            Assemblies are mapped to logging repository. This attribute specified 
            on the assembly controls
            the configuration of the repository. The <see cref="P:log4net.Config.RepositoryAttribute.Name" /> property specifies the name
            of the repository that this assembly is a part of. The <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType" />
            specifies the type of the <see cref="T:log4net.Repository.ILoggerRepository" /> object 
            to create for the assembly. If this attribute is not specified or a <see cref="P:log4net.Config.RepositoryAttribute.Name" /> 
            is not specified then the assembly will be part of the default shared logging repository.
            </para>
        <para>
            This attribute can only be specified on the assembly and may only be used
            once per assembly.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.RepositoryAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.RepositoryAttribute" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.RepositoryAttribute.#ctor(System.String)">
      <summary>
            Initialize a new instance of the <see cref="T:log4net.Config.RepositoryAttribute" /> class 
            with the name of the repository.
            </summary>
      <param name="name">The name of the repository.</param>
      <remarks>
        <para>
            Initialize the attribute with the name for the assembly's repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.RepositoryAttribute.Name">
      <summary>
            Gets or sets the name of the logging repository.
            </summary>
      <value>
            The string name to use as the name of the repository associated with this
            assembly.
            </value>
      <remarks>
        <para>
            This value does not have to be unique. Several assemblies can share the
            same repository. They will share the logging configuration of the repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.RepositoryAttribute.RepositoryType">
      <summary>
            Gets or sets the type of repository to create for this assembly.
            </summary>
      <value>
            The type of repository to create for this assembly.
            </value>
      <remarks>
        <para>
            The type of the repository to create for the assembly.
            The type must implement the <see cref="T:log4net.Repository.ILoggerRepository" />
            interface.
            </para>
        <para>
            This will be the type of repository created when 
            the repository is created. If multiple assemblies reference the
            same repository then the repository is only created once using the
            <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType" /> of the first assembly to call into the 
            repository.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.DomainAttribute">
      <summary>
            Assembly level attribute that specifies the logging domain for the assembly.
            </summary>
      <remarks>
        <para>
          <b>DomainAttribute is obsolete. Use RepositoryAttribute instead of DomainAttribute.</b>
        </para>
        <para>
            Assemblies are mapped to logging domains. Each domain has its own
            logging repository. This attribute specified on the assembly controls
            the configuration of the domain. The <see cref="P:log4net.Config.RepositoryAttribute.Name" /> property specifies the name
            of the domain that this assembly is a part of. The <see cref="P:log4net.Config.RepositoryAttribute.RepositoryType" />
            specifies the type of the repository objects to create for the domain. If 
            this attribute is not specified and a <see cref="P:log4net.Config.RepositoryAttribute.Name" /> is not specified
            then the assembly will be part of the default shared logging domain.
            </para>
        <para>
            This attribute can only be specified on the assembly and may only be used
            once per assembly.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.DomainAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.DomainAttribute" /> class.
            </summary>
      <remarks>
        <para>
            Obsolete. Use RepositoryAttribute instead of DomainAttribute.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.DomainAttribute.#ctor(System.String)">
      <summary>
            Initialize a new instance of the <see cref="T:log4net.Config.DomainAttribute" /> class 
            with the name of the domain.
            </summary>
      <param name="name">The name of the domain.</param>
      <remarks>
        <para>
            Obsolete. Use RepositoryAttribute instead of DomainAttribute.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.DOMConfigurator">
      <summary>
            Use this class to initialize the log4net environment using an Xml tree.
            </summary>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            Configures a <see cref="T:log4net.Repository.ILoggerRepository" /> using an Xml tree.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.#ctor">
      <summary>
            Private constructor
            </summary>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure">
      <summary>
            Automatically configures the log4net system based on the 
            application's configuration settings.
            </summary>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </remarks>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository)">
      <summary>
            Automatically configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using settings
            stored in the application's configuration file.
            </summary>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </remarks>
      <param name="repository">The repository to configure.</param>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(System.Xml.XmlElement)">
      <summary>
            Configures log4net using a <c>log4net</c> element
            </summary>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </remarks>
      <param name="element">The element to parse.</param>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified XML 
            element.
            </summary>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </remarks>
      <param name="repository">The repository to configure.</param>
      <param name="element">The element to parse.</param>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)">
      <summary>
            Configures log4net using the specified configuration file.
            </summary>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
        <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
        <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
        <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            DOMConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
        <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
        <code lang="XML" escaped="true">
          <configuration>
            <appSettings>
              <add key="log4net-config-file" value="log.config" />
            </appSettings>
          </configuration>
        </code>
      </remarks>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(System.IO.Stream)">
      <summary>
            Configures log4net using the specified configuration file.
            </summary>
      <param name="configStream">A stream to load the XML configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
        <para>
            Note that this method will NOT close the stream parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
        <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
        <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            DOMConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
        <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
        <code lang="XML" escaped="true">
          <configuration>
            <appSettings>
              <add key="log4net-config-file" value="log.config" />
            </appSettings>
          </configuration>
        </code>
      </remarks>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.Stream)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configStream">The stream to load the XML configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            Note that this method will NOT close the stream parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(System.IO.FileInfo)">
      <summary>
            Configures log4net using the file specified, monitors the file for changes 
            and reloads the configuration if a change is detected.
            </summary>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
        <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)" />.
            </para>
      </remarks>
      <seealso cref="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)" />
    </member>
    <member name="M:log4net.Config.DOMConfigurator.ConfigureAndWatch(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the file specified, 
            monitors the file for changes and reloads the configuration if a change 
            is detected.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
          <b>DOMConfigurator is obsolete. Use XmlConfigurator instead of DOMConfigurator.</b>
        </para>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
        <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)" />.
            </para>
      </remarks>
      <seealso cref="M:log4net.Config.DOMConfigurator.Configure(System.IO.FileInfo)" />
    </member>
    <member name="T:log4net.Config.XmlConfiguratorAttribute">
      <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />.
            </summary>
      <remarks>
        <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
        <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />
            without calling one of the <see cref="M:log4net.Config.XmlConfigurator.Configure" />
            methods.
            </para>
        <para>
            If neither of the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> or <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" />
            properties are set the configuration is loaded from the application's .config file.
            If set the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> property takes priority over the
            <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> property. The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> property
            specifies a path to a file to load the config from. The path is relative to the
            application's base directory; <see cref="P:System.AppDomain.BaseDirectory" />.
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> property is used as a postfix to the assembly file name.
            The config file must be located in the  application's base directory; <see cref="P:System.AppDomain.BaseDirectory" />.
            For example in a console application setting the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> to
            <c>config</c> has the same effect as not specifying the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> or 
            <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> properties.
            </para>
        <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.Watch" /> property can be set to cause the <see cref="T:log4net.Config.XmlConfigurator" />
            to watch the configuration file for changes.
            </para>
        <note>
          <para>
            Log4net will only look for assembly level configuration attributes once.
            When using the log4net assembly level attributes to control the configuration 
            of log4net you must ensure that the first call to any of the 
            <see cref="T:log4net.Core.LoggerManager" /> methods is made from the assembly with the configuration
            attributes. 
            </para>
          <para>
            If you cannot guarantee the order in which log4net calls will be made from 
            different assemblies you must use programmatic configuration instead, i.e.
            call the <see cref="M:log4net.Config.XmlConfigurator.Configure" /> method directly.
            </para>
        </note>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.XmlConfiguratorAttribute.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfiguratorAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
      <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
      <param name="targetRepository">The repository to configure.</param>
      <remarks>
        <para>
            Configure the repository using the <see cref="T:log4net.Config.XmlConfigurator" />.
            The <paramref name="targetRepository" /> specified must extend the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />
            class otherwise the <see cref="T:log4net.Config.XmlConfigurator" /> will not be able to
            configure it.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="repository" /> does not extend <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.</exception>
    </member>
    <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromFile(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Attempt to load configuration from the local file system
            </summary>
      <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
      <param name="targetRepository">The repository to configure.</param>
    </member>
    <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromFile(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Configure the specified repository using a <see cref="T:System.IO.FileInfo" /></summary>
      <param name="targetRepository">The repository to configure.</param>
      <param name="configFile">the FileInfo pointing to the config file</param>
    </member>
    <member name="M:log4net.Config.XmlConfiguratorAttribute.ConfigureFromUri(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Attempt to load configuration from a URI
            </summary>
      <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
      <param name="targetRepository">The repository to configure.</param>
    </member>
    <member name="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile">
      <summary>
            Gets or sets the filename of the configuration file.
            </summary>
      <value>
            The filename of the configuration file.
            </value>
      <remarks>
        <para>
            If specified, this is the name of the configuration file to use with
            the <see cref="T:log4net.Config.XmlConfigurator" />. This file path is relative to the
            <b>application base</b> directory (<see cref="P:System.AppDomain.BaseDirectory" />).
            </para>
        <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> takes priority over the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension">
      <summary>
            Gets or sets the extension of the configuration file.
            </summary>
      <value>
            The extension of the configuration file.
            </value>
      <remarks>
        <para>
            If specified this is the extension for the configuration file.
            The path to the config file is built by using the <b>application 
            base</b> directory (<see cref="P:System.AppDomain.BaseDirectory" />),
            the <b>assembly file name</b> and the config file extension.
            </para>
        <para>
            If the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" /> is set to <c>MyExt</c> then
            possible config file names would be: <c>MyConsoleApp.exe.MyExt</c> or
            <c>MyClassLibrary.dll.MyExt</c>.
            </para>
        <para>
            The <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFile" /> takes priority over the <see cref="P:log4net.Config.XmlConfiguratorAttribute.ConfigFileExtension" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.XmlConfiguratorAttribute.Watch">
      <summary>
            Gets or sets a value indicating whether to watch the configuration file.
            </summary>
      <value>
        <c>true</c> if the configuration should be watched, <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            If this flag is specified and set to <c>true</c> then the framework
            will watch the configuration file and will reload the config each time 
            the file is modified.
            </para>
        <para>
            The config file can only be watched if it is loaded from local disk.
            In a No-Touch (Smart Client) deployment where the application is downloaded
            from a web server the config file may not reside on the local disk
            and therefore it may not be able to watch it.
            </para>
        <note>
            Watching configuration is not supported on the SSCLI.
            </note>
      </remarks>
    </member>
    <member name="T:log4net.Config.DOMConfiguratorAttribute">
      <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />.
            </summary>
      <remarks>
        <para>
          <b>AliasDomainAttribute is obsolete. Use AliasRepositoryAttribute instead of AliasDomainAttribute.</b>
        </para>
        <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
        <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />
            without calling one of the <see cref="M:log4net.Config.XmlConfigurator.Configure" />
            methods.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Config.Log4NetConfigurationSectionHandler">
      <summary>
            Class to register for the log4net section of the configuration file
            </summary>
      <remarks>
            The log4net section of the configuration file needs to have a section
            handler registered. This is the section handler used. It simply returns
            the XML element that is the root of the section.
            </remarks>
      <example>
            Example of registering the log4net section handler :
            <code lang="XML" escaped="true"><configuration><configSections><section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" /></configSections><log4net>
            		log4net configuration XML goes here
            	</log4net></configuration></code></example>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> class.
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.Log4NetConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>
            Parses the configuration section.
            </summary>
      <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
      <param name="configContext">The configuration context when called from the ASP.NET configuration system. Otherwise, this parameter is reserved and is a null reference.</param>
      <param name="section">The <see cref="T:System.Xml.XmlNode" /> for the log4net section.</param>
      <returns>The <see cref="T:System.Xml.XmlNode" /> for the log4net section.</returns>
      <remarks>
        <para>
            Returns the <see cref="T:System.Xml.XmlNode" /> containing the configuration data,
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Plugin.IPluginFactory">
      <summary>
            Interface used to create plugins.
            </summary>
      <remarks>
        <para>
            Interface used to create  a plugin.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Plugin.IPluginFactory.CreatePlugin">
      <summary>
            Creates the plugin object.
            </summary>
      <returns>the new plugin instance</returns>
      <remarks>
        <para>
            Create and return a new plugin instance.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.PluginAttribute">
      <summary>
            Assembly level attribute that specifies a plugin to attach to 
            the repository.
            </summary>
      <remarks>
        <para>
            Specifies the type of a plugin to create and attach to the
            assembly's repository. The plugin type must implement the
            <see cref="T:log4net.Plugin.IPlugin" /> interface.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Config.PluginAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.PluginAttribute" /> class
            with the specified type.
            </summary>
      <param name="typeName">The type name of plugin to create.</param>
      <remarks>
        <para>
            Create the attribute with the plugin type specified.
            </para>
        <para>
            Where possible use the constructor that takes a <see cref="T:System.Type" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.PluginAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.PluginAttribute" /> class
            with the specified type.
            </summary>
      <param name="type">The type of plugin to create.</param>
      <remarks>
        <para>
            Create the attribute with the plugin type specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.PluginAttribute.CreatePlugin">
      <summary>
            Creates the plugin object defined by this attribute.
            </summary>
      <remarks>
        <para>
            Creates the instance of the <see cref="T:log4net.Plugin.IPlugin" /> object as 
            specified by this attribute.
            </para>
      </remarks>
      <returns>The plugin object.</returns>
    </member>
    <member name="M:log4net.Config.PluginAttribute.ToString">
      <summary>
            Returns a representation of the properties of this object.
            </summary>
      <remarks>
        <para>
            Overrides base class <see cref="M:System.Object.ToString" /> method to 
            return a representation of the properties of this object.
            </para>
      </remarks>
      <returns>A representation of the properties of this object</returns>
    </member>
    <member name="P:log4net.Config.PluginAttribute.Type">
      <summary>
            Gets or sets the type for the plugin.
            </summary>
      <value>
            The type for the plugin.
            </value>
      <remarks>
        <para>
            The type for the plugin.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.PluginAttribute.TypeName">
      <summary>
            Gets or sets the type name for the plugin.
            </summary>
      <value>
            The type name for the plugin.
            </value>
      <remarks>
        <para>
            The type name for the plugin.
            </para>
        <para>
            Where possible use the <see cref="P:log4net.Config.PluginAttribute.Type" /> property instead.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.SecurityContextProviderAttribute">
      <summary>
            Assembly level attribute to configure the <see cref="T:log4net.Core.SecurityContextProvider" />.
            </summary>
      <remarks>
        <para>
            This attribute may only be used at the assembly scope and can only
            be used once per assembly.
            </para>
        <para>
            Use this attribute to configure the <see cref="T:log4net.Config.XmlConfigurator" />
            without calling one of the <see cref="M:log4net.Config.XmlConfigurator.Configure" />
            methods.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Config.SecurityContextProviderAttribute.#ctor(System.Type)">
      <summary>
            Construct provider attribute with type specified
            </summary>
      <param name="providerType">the type of the provider to use</param>
      <remarks>
        <para>
            The provider specified must subclass the <see cref="T:log4net.Core.SecurityContextProvider" />
            class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.SecurityContextProviderAttribute.Configure(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Configures the SecurityContextProvider
            </summary>
      <param name="sourceAssembly">The assembly that this attribute was defined on.</param>
      <param name="targetRepository">The repository to configure.</param>
      <remarks>
        <para>
            Creates a provider instance from the <see cref="P:log4net.Config.SecurityContextProviderAttribute.ProviderType" /> specified.
            Sets this as the default security context provider <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Config.SecurityContextProviderAttribute.ProviderType">
      <summary>
            Gets or sets the type of the provider to use.
            </summary>
      <value>
            the type of the provider to use.
            </value>
      <remarks>
        <para>
            The provider specified must subclass the <see cref="T:log4net.Core.SecurityContextProvider" />
            class.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Config.XmlConfigurator">
      <summary>
            Use this class to initialize the log4net environment using an Xml tree.
            </summary>
      <remarks>
        <para>
            Configures a <see cref="T:log4net.Repository.ILoggerRepository" /> using an Xml tree.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler">
      <summary>
            Class used to watch config files.
            </summary>
      <remarks>
        <para>
            Uses the <see cref="T:System.IO.FileSystemWatcher" /> to monitor
            changes to a specified file. Because multiple change notifications
            may be raised when the file is modified, a timer is used to
            compress the notifications into a single event. The timer
            waits for <see cref="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.TimeoutMillis" /> time before delivering
            the event notification. If any further <see cref="T:System.IO.FileSystemWatcher" />
            change notifications arrive while the timer is waiting it
            is reset and waits again for <see cref="F:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.TimeoutMillis" /> to
            elapse.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.StartWatching(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Watch a specified config file used to configure a repository
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configFile">The configuration file to watch.</param>
      <remarks>
        <para>
            Watch a specified config file used to configure a repository
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.#ctor(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" /> class.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configFile">The configuration file to watch.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
      <summary>
            Event handler used by <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" />.
            </summary>
      <param name="source">The <see cref="T:System.IO.FileSystemWatcher" /> firing the event.</param>
      <param name="e">The argument indicates the file that caused the event to be fired.</param>
      <remarks>
        <para>
            This handler reloads the configuration from the file when the event is fired.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
      <summary>
            Event handler used by <see cref="T:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler" />.
            </summary>
      <param name="source">The <see cref="T:System.IO.FileSystemWatcher" /> firing the event.</param>
      <param name="e">The argument indicates the file that caused the event to be fired.</param>
      <remarks>
        <para>
            This handler reloads the configuration from the file when the event is fired.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatchHandler.OnWatchedFileChange(System.Object)">
      <summary>
            Called by the timer when the configuration has been updated.
            </summary>
      <param name="state">null</param>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.#ctor">
      <summary>
            Private constructor
            </summary>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure">
      <summary>
            Automatically configures the log4net system based on the 
            application's configuration settings.
            </summary>
      <remarks>
        <para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </para>
        <para>
            To use this method to configure log4net you must specify 
            the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> section
            handler for the <c>log4net</c> configuration section. See the
            <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> for an example.
            </para>
      </remarks>
      <seealso cref="T:log4net.Config.Log4NetConfigurationSectionHandler" />
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository)">
      <summary>
            Automatically configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using settings
            stored in the application's configuration file.
            </summary>
      <remarks>
        <para>
            Each application has a configuration file. This has the
            same name as the application with '.config' appended.
            This file is XML and calling this function prompts the
            configurator to look in that file for a section called
            <c>log4net</c> that contains the configuration data.
            </para>
        <para>
            To use this method to configure log4net you must specify 
            the <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> section
            handler for the <c>log4net</c> configuration section. See the
            <see cref="T:log4net.Config.Log4NetConfigurationSectionHandler" /> for an example.
            </para>
      </remarks>
      <param name="repository">The repository to configure.</param>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(System.Xml.XmlElement)">
      <summary>
            Configures log4net using a <c>log4net</c> element
            </summary>
      <remarks>
        <para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </para>
      </remarks>
      <param name="element">The element to parse.</param>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified XML 
            element.
            </summary>
      <remarks>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </remarks>
      <param name="repository">The repository to configure.</param>
      <param name="element">The element to parse.</param>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)">
      <summary>
            Configures log4net using the specified configuration file.
            </summary>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
        <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
        <para>
            The first element matching <c>&lt;configuration&gt;</c> will be read as the 
            configuration. If this file is also a .NET .config file then you must specify 
            a configuration section for the <c>log4net</c> element otherwise .NET will 
            complain. Set the type for the section handler to <see cref="T:System.Configuration.IgnoreSectionHandler" />, for example:
            <code lang="XML" escaped="true"><configSections><section name="log4net" type="System.Configuration.IgnoreSectionHandler" /></configSections></code></para>
        <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
        <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            XmlConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
        <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
        <code lang="XML" escaped="true">
          <configuration>
            <appSettings>
              <add key="log4net-config-file" value="log.config" />
            </appSettings>
          </configuration>
        </code>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(System.Uri)">
      <summary>
            Configures log4net using the specified configuration URI.
            </summary>
      <param name="configUri">A URI to load the XML configuration from.</param>
      <remarks>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
        <para>
            The <see cref="T:System.Net.WebRequest" /> must support the URI scheme specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(System.IO.Stream)">
      <summary>
            Configures log4net using the specified configuration data stream.
            </summary>
      <param name="configStream">A stream to load the XML configuration from.</param>
      <remarks>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the log4net configuration data.
            </para>
        <para>
            Note that this method will NOT close the stream parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The log4net configuration file can possible be specified in the application's
            configuration file (either <c>MyAppName.exe.config</c> for a
            normal application on <c>Web.config</c> for an ASP.NET application).
            </para>
        <para>
            The first element matching <c>&lt;configuration&gt;</c> will be read as the 
            configuration. If this file is also a .NET .config file then you must specify 
            a configuration section for the <c>log4net</c> element otherwise .NET will 
            complain. Set the type for the section handler to <see cref="T:System.Configuration.IgnoreSectionHandler" />, for example:
            <code lang="XML" escaped="true"><configSections><section name="log4net" type="System.Configuration.IgnoreSectionHandler" /></configSections></code></para>
        <example>
            The following example configures log4net using a configuration file, of which the 
            location is stored in the application's configuration file :
            </example>
        <code lang="C#">
            using log4net.Config;
            using System.IO;
            using System.Configuration;
            
            ...
            
            XmlConfigurator.Configure(new FileInfo(ConfigurationSettings.AppSettings["log4net-config-file"]));
            </code>
        <para>
            In the <c>.config</c> file, the path to the log4net can be specified like this :
            </para>
        <code lang="XML" escaped="true">
          <configuration>
            <appSettings>
              <add key="log4net-config-file" value="log.config" />
            </appSettings>
          </configuration>
        </code>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.Uri)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            URI.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configUri">A URI to load the XML configuration from.</param>
      <remarks>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The <see cref="T:System.Net.WebRequest" /> must support the URI scheme specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.Configure(log4net.Repository.ILoggerRepository,System.IO.Stream)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the specified configuration 
            file.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configStream">The stream to load the XML configuration from.</param>
      <remarks>
        <para>
            The configuration data must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            Note that this method will NOT close the stream parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)">
      <summary>
            Configures log4net using the file specified, monitors the file for changes 
            and reloads the configuration if a change is detected.
            </summary>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
        <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)" />.
            </para>
      </remarks>
      <seealso cref="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)" />
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(log4net.Repository.ILoggerRepository,System.IO.FileInfo)">
      <summary>
            Configures the <see cref="T:log4net.Repository.ILoggerRepository" /> using the file specified, 
            monitors the file for changes and reloads the configuration if a change 
            is detected.
            </summary>
      <param name="repository">The repository to configure.</param>
      <param name="configFile">The XML file to load the configuration from.</param>
      <remarks>
        <para>
            The configuration file must be valid XML. It must contain
            at least one element called <c>log4net</c> that holds
            the configuration data.
            </para>
        <para>
            The configuration file will be monitored using a <see cref="T:System.IO.FileSystemWatcher" />
            and depends on the behavior of that class.
            </para>
        <para>
            For more information on how to configure log4net using
            a separate configuration file, see <see cref="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)" />.
            </para>
      </remarks>
      <seealso cref="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)" />
    </member>
    <member name="M:log4net.Config.XmlConfigurator.ConfigureFromXml(log4net.Repository.ILoggerRepository,System.Xml.XmlElement)">
      <summary>
            Configures the specified repository using a <c>log4net</c> element.
            </summary>
      <param name="repository">The hierarchy to configure.</param>
      <param name="element">The element to parse.</param>
      <remarks>
        <para>
            Loads the log4net configuration from the XML element
            supplied as <paramref name="element" />.
            </para>
        <para>
            This method is ultimately called by one of the Configure methods 
            to load the configuration from an <see cref="T:System.Xml.XmlElement" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.IRepositorySelector">
      <summary>
            Interface used by the <see cref="T:log4net.LogManager" /> to select the <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.LogManager" /> uses a <see cref="T:log4net.Core.IRepositorySelector" /> 
            to specify the policy for selecting the correct <see cref="T:log4net.Repository.ILoggerRepository" /> 
            to return to the caller.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.GetRepository(System.Reflection.Assembly)">
      <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
      <param name="assembly">The assembly to use to lookup to the <see cref="T:log4net.Repository.ILoggerRepository" /></param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> for the assembly.</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </para>
        <para>
            How the association between <see cref="T:System.Reflection.Assembly" /> and <see cref="T:log4net.Repository.ILoggerRepository" />
            is made is not defined. The implementation may choose any method for
            this association. The results of this method must be repeatable, i.e.
            when called again with the same arguments the result must be the
            save value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.GetRepository(System.String)">
      <summary>
            Gets the named <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
      <param name="repositoryName">The name to use to lookup to the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <returns>The named <see cref="T:log4net.Repository.ILoggerRepository" /></returns>
      <remarks>
            Lookup a named <see cref="T:log4net.Repository.ILoggerRepository" />. This is the repository created by
            calling <see cref="M:log4net.Core.IRepositorySelector.CreateRepository(System.String,System.Type)" />.
            </remarks>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
      <summary>
            Creates a new repository for the assembly specified.
            </summary>
      <param name="assembly">The assembly to use to create the domain to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <returns>The repository created.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the domain
            specified such that a call to <see cref="M:log4net.Core.IRepositorySelector.GetRepository(System.Reflection.Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
        <para>
            How the association between <see cref="T:System.Reflection.Assembly" /> and <see cref="T:log4net.Repository.ILoggerRepository" />
            is made is not defined. The implementation may choose any method for
            this association.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.CreateRepository(System.String,System.Type)">
      <summary>
            Creates a new repository with the name specified.
            </summary>
      <param name="repositoryName">The name to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <returns>The repository created.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the name
            specified such that a call to <see cref="M:log4net.Core.IRepositorySelector.GetRepository(System.String)" /> with the
            same name will return the same repository instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.ExistsRepository(System.String)">
      <summary>
            Test if a named repository exists
            </summary>
      <param name="repositoryName">the named repository to check</param>
      <returns>
        <c>true</c> if the repository exists</returns>
      <remarks>
        <para>
            Test if a named repository exists. Use <see cref="M:log4net.Core.IRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)" />
            to create a new repository and <see cref="M:log4net.Core.IRepositorySelector.GetRepository(System.Reflection.Assembly)" /> to retrieve 
            a repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IRepositorySelector.GetAllRepositories">
      <summary>
            Gets an array of all currently defined repositories.
            </summary>
      <returns>
            An array of the <see cref="T:log4net.Repository.ILoggerRepository" /> instances created by 
            this <see cref="T:log4net.Core.IRepositorySelector" />.</returns>
      <remarks>
        <para>
            Gets an array of all of the repositories created by this selector.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent">
      <summary>
            Event to notify that a logger repository has been created.
            </summary>
      <value>
            Event to notify that a logger repository has been created.
            </value>
      <remarks>
        <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.CompactRepositorySelector">
      <summary>
            The implementation of the <see cref="T:log4net.Core.IRepositorySelector" /> interface suitable
            for use with the compact framework
            </summary>
      <remarks>
        <para>
            This <see cref="T:log4net.Core.IRepositorySelector" /> implementation is a simple
            mapping between repository name and <see cref="T:log4net.Repository.ILoggerRepository" />
            object.
            </para>
        <para>
            The .NET Compact Framework 1.0 does not support retrieving assembly
            level attributes therefore unlike the <c>DefaultRepositorySelector</c>
            this selector does not examine the calling assembly for attributes.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.#ctor(System.Type)">
      <summary>
            Create a new repository selector
            </summary>
      <param name="defaultRepositoryType">the type of the repositories to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" /></param>
      <remarks>
        <para>
            Create an new compact repository selector.
            The default type for repositories must be specified,
            an appropriate value would be <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">throw if <paramref name="defaultRepositoryType" /> is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">throw if <paramref name="defaultRepositoryType" /> does not implement <see cref="T:log4net.Repository.ILoggerRepository" /></exception>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.GetRepository(System.Reflection.Assembly)">
      <summary>
            Get the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly
            </summary>
      <param name="assembly">not used</param>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /></returns>
      <remarks>
        <para>
            The <paramref name="assembly" /> argument is not used. This selector does not create a
            separate repository for each assembly. 
            </para>
        <para>
            As a named repository is not specified the default repository is 
            returned. The default repository is named <c>log4net-default-repository</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.GetRepository(System.String)">
      <summary>
            Get the named <see cref="T:log4net.Repository.ILoggerRepository" /></summary>
      <param name="repositoryName">the name of the repository to lookup</param>
      <returns>The named <see cref="T:log4net.Repository.ILoggerRepository" /></returns>
      <remarks>
        <para>
            Get the named <see cref="T:log4net.Repository.ILoggerRepository" />. The default 
            repository is <c>log4net-default-repository</c>. Other repositories 
            must be created using the <see cref="M:log4net.Core.CompactRepositorySelector.CreateRepository(System.String,System.Type)" />.
            If the named repository does not exist an exception is thrown.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">throw if <paramref name="repositoryName" /> is null</exception>
      <exception cref="T:log4net.Core.LogException">throw if the <paramref name="repositoryName" /> does not exist</exception>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
      <summary>
            Create a new repository for the assembly specified 
            </summary>
      <param name="assembly">not used</param>
      <param name="repositoryType">the type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" /></param>
      <returns>the repository created</returns>
      <remarks>
        <para>
            The <paramref name="assembly" /> argument is not used. This selector does not create a
            separate repository for each assembly. 
            </para>
        <para>
            If the <paramref name="repositoryType" /> is <c>null</c> then the
            default repository type specified to the constructor is used.
            </para>
        <para>
            As a named repository is not specified the default repository is 
            returned. The default repository is named <c>log4net-default-repository</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.CreateRepository(System.String,System.Type)">
      <summary>
            Create a new repository for the repository specified
            </summary>
      <param name="repositoryName">the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" /></param>
      <param name="repositoryType">the type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.
            If this param is null then the default repository type is used.</param>
      <returns>the repository created</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.CompactRepositorySelector.GetRepository(System.String)" /> with the
            same repository specified will return the same repository instance.
            </para>
        <para>
            If the named repository already exists an exception will be thrown.
            </para>
        <para>
            If <paramref name="repositoryType" /> is <c>null</c> then the default 
            repository type specified to the constructor is used.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">throw if <paramref name="repositoryName" /> is null</exception>
      <exception cref="T:log4net.Core.LogException">throw if the <paramref name="repositoryName" /> already exists</exception>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.ExistsRepository(System.String)">
      <summary>
            Test if a named repository exists
            </summary>
      <param name="repositoryName">the named repository to check</param>
      <returns>
        <c>true</c> if the repository exists</returns>
      <remarks>
        <para>
            Test if a named repository exists. Use <see cref="M:log4net.Core.CompactRepositorySelector.CreateRepository(System.String,System.Type)" />
            to create a new repository and <see cref="M:log4net.Core.CompactRepositorySelector.GetRepository(System.String)" /> to retrieve 
            a repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.GetAllRepositories">
      <summary>
            Gets a list of <see cref="T:log4net.Repository.ILoggerRepository" /> objects
            </summary>
      <returns>an array of all known <see cref="T:log4net.Repository.ILoggerRepository" /> objects</returns>
      <remarks>
        <para>
            Gets an array of all of the repositories created by this selector.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.CompactRepositorySelector.OnLoggerRepositoryCreatedEvent(log4net.Repository.ILoggerRepository)">
      <summary>
            Notify the registered listeners that the repository has been created
            </summary>
      <param name="repository">The repository that has been created</param>
      <remarks>
        <para>
            Raises the <event cref="E:log4net.Core.CompactRepositorySelector.LoggerRepositoryCreatedEvent">LoggerRepositoryCreatedEvent</event>
            event.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Core.CompactRepositorySelector.LoggerRepositoryCreatedEvent">
      <summary>
            Event to notify that a logger repository has been created.
            </summary>
      <value>
            Event to notify that a logger repository has been created.
            </value>
      <remarks>
        <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.DefaultRepositorySelector">
      <summary>
            The default implementation of the <see cref="T:log4net.Core.IRepositorySelector" /> interface.
            </summary>
      <remarks>
        <para>
            Uses attributes defined on the calling assembly to determine how to
            configure the hierarchy for the repository.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.#ctor(System.Type)">
      <summary>
            Creates a new repository selector.
            </summary>
      <param name="defaultRepositoryType">The type of the repositories to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" /></param>
      <remarks>
        <para>
            Create an new repository selector.
            The default type for repositories must be specified,
            an appropriate value would be <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="defaultRepositoryType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="defaultRepositoryType" /> does not implement <see cref="T:log4net.Repository.ILoggerRepository" />.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.Reflection.Assembly)">
      <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified assembly.
            </summary>
      <param name="repositoryAssembly">The assembly use to lookup the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <remarks>
        <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository" /> created and the repository 
            to create can be overridden by specifying the <see cref="T:log4net.Config.RepositoryAttribute" /> 
            attribute on the <paramref name="repositoryAssembly" />.
            </para>
        <para>
            The default values are to use the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> 
            implementation of the <see cref="T:log4net.Repository.ILoggerRepository" /> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name" /> as the name of the repository.
            </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be automatically configured using 
            any <see cref="T:log4net.Config.ConfiguratorAttribute" /> attributes defined on
            the <paramref name="repositoryAssembly" />.
            </para>
      </remarks>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> for the assembly</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="repositoryAssembly" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.String)">
      <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified repository.
            </summary>
      <param name="repositoryName">The repository to use to lookup the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> for the specified repository.</returns>
      <remarks>
        <para>
            Returns the named repository. If <paramref name="repositoryName" /> is <c>null</c>
            a <see cref="T:System.ArgumentNullException" /> is thrown. If the repository 
            does not exist a <see cref="T:log4net.Core.LogException" /> is thrown.
            </para>
        <para>
            Use <see cref="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.String,System.Type)" /> to create a repository.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="repositoryName" /> is <see langword="null" />.</exception>
      <exception cref="T:log4net.Core.LogException">
        <paramref name="repositoryName" /> does not exist.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
      <summary>
            Create a new repository for the assembly specified 
            </summary>
      <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <returns>The repository created.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.Reflection.Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
        <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository" /> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the 
            <paramref name="repositoryAssembly" />.  The default values are to use the 
            <paramref name="repositoryType" /> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository" /> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name" /> as the name of the repository.
            </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute" /> 
            attributes defined on the <paramref name="repositoryAssembly" />.
            </para>
        <para>
            If a repository for the <paramref name="repositoryAssembly" /> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType" />.
            Also the <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType" />.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="repositoryAssembly" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type,System.String,System.Boolean)">
      <summary>
            Creates a new repository for the assembly specified.
            </summary>
      <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryName">The name to assign to the created repository</param>
      <param name="readAssemblyAttributes">Set to <c>true</c> to read and apply the assembly attributes</param>
      <returns>The repository created.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.Reflection.Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
        <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository" /> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the 
            <paramref name="repositoryAssembly" />.  The default values are to use the 
            <paramref name="repositoryType" /> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository" /> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name" /> as the name of the repository.
            </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute" /> 
            attributes defined on the <paramref name="repositoryAssembly" />.
            </para>
        <para>
            If a repository for the <paramref name="repositoryAssembly" /> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType" />.
            Also the <see cref="T:log4net.Config.RepositoryAttribute" /> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType" />.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="repositoryAssembly" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.String,System.Type)">
      <summary>
            Creates a new repository for the specified repository.
            </summary>
      <param name="repositoryName">The repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository" />.</param>
      <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository" />.
            If this param is <see langword="null" /> then the default repository type is used.</param>
      <returns>The new repository.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.String)" /> with the
            same repository specified will return the same repository instance.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="repositoryName" /> is <see langword="null" />.</exception>
      <exception cref="T:log4net.Core.LogException">
        <paramref name="repositoryName" /> already exists.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.ExistsRepository(System.String)">
      <summary>
            Test if a named repository exists
            </summary>
      <param name="repositoryName">the named repository to check</param>
      <returns>
        <c>true</c> if the repository exists</returns>
      <remarks>
        <para>
            Test if a named repository exists. Use <see cref="M:log4net.Core.DefaultRepositorySelector.CreateRepository(System.String,System.Type)" />
            to create a new repository and <see cref="M:log4net.Core.DefaultRepositorySelector.GetRepository(System.String)" /> to retrieve 
            a repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.GetAllRepositories">
      <summary>
            Gets a list of <see cref="T:log4net.Repository.ILoggerRepository" /> objects
            </summary>
      <returns>an array of all known <see cref="T:log4net.Repository.ILoggerRepository" /> objects</returns>
      <remarks>
        <para>
            Gets an array of all of the repositories created by this selector.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.AliasRepository(System.String,log4net.Repository.ILoggerRepository)">
      <summary>
            Aliases a repository to an existing repository.
            </summary>
      <param name="repositoryAlias">The repository to alias.</param>
      <param name="repositoryTarget">The repository that the repository is aliased to.</param>
      <remarks>
        <para>
            The repository specified will be aliased to the repository when created. 
            The repository must not already exist.
            </para>
        <para>
            When the repository is created it must utilize the same repository type as 
            the repository it is aliased to, otherwise the aliasing will fail.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="repositoryAlias" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="repositoryTarget" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.OnLoggerRepositoryCreatedEvent(log4net.Repository.ILoggerRepository)">
      <summary>
            Notifies the registered listeners that the repository has been created.
            </summary>
      <param name="repository">The repository that has been created.</param>
      <remarks>
        <para>
            Raises the <see cref="E:log4net.Core.DefaultRepositorySelector.LoggerRepositoryCreatedEvent" /> event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.GetInfoForAssembly(System.Reflection.Assembly,System.String@,System.Type@)">
      <summary>
            Gets the repository name and repository type for the specified assembly.
            </summary>
      <param name="assembly">The assembly that has a <see cref="T:log4net.Config.RepositoryAttribute" />.</param>
      <param name="repositoryName">in/out param to hold the repository name to use for the assembly, caller should set this to the default value before calling.</param>
      <param name="repositoryType">in/out param to hold the type of the repository to create for the assembly, caller should set this to the default value before calling.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.ConfigureRepository(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Configures the repository using information from the assembly.
            </summary>
      <param name="assembly">The assembly containing <see cref="T:log4net.Config.ConfiguratorAttribute" />
            attributes which define the configuration for the repository.</param>
      <param name="repository">The repository to configure.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="assembly" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="repository" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.LoadPlugins(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Loads the attribute defined plugins on the assembly.
            </summary>
      <param name="assembly">The assembly that contains the attributes.</param>
      <param name="repository">The repository to add the plugins to.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="assembly" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="repository" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.DefaultRepositorySelector.LoadAliases(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
      <summary>
            Loads the attribute defined aliases on the assembly.
            </summary>
      <param name="assembly">The assembly that contains the attributes.</param>
      <param name="repository">The repository to alias to.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="assembly" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="repository" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="E:log4net.Core.DefaultRepositorySelector.LoggerRepositoryCreatedEvent">
      <summary>
            Event to notify that a logger repository has been created.
            </summary>
      <value>
            Event to notify that a logger repository has been created.
            </value>
      <remarks>
        <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.ErrorCode">
      <summary>
            Defined error codes that can be passed to the <see cref="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)" /> method.
            </summary>
      <remarks>
        <para>
            Values passed to the <see cref="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)" /> method.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.ErrorCode.GenericFailure">
      <summary>
            A general error
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.WriteFailure">
      <summary>
            Error while writing output
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.FlushFailure">
      <summary>
            Failed to flush file
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.CloseFailure">
      <summary>
            Failed to close file
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.FileOpenFailure">
      <summary>
            Unable to open output file
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.MissingLayout">
      <summary>
            No layout specified
            </summary>
    </member>
    <member name="F:log4net.Core.ErrorCode.AddressParseFailure">
      <summary>
            Failed to parse address
            </summary>
    </member>
    <member name="T:log4net.Core.IErrorHandler">
      <summary>
            Appenders may delegate their error handling to an <see cref="T:log4net.Core.IErrorHandler" />.
            </summary>
      <remarks>
        <para>
            Error handling is a particularly tedious to get right because by
            definition errors are hard to predict and to reproduce. 
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)">
      <summary>
            Handles the error and information about the error condition is passed as 
            a parameter.
            </summary>
      <param name="message">The message associated with the error.</param>
      <param name="e">The <see cref="T:System.Exception" /> that was thrown when the error occurred.</param>
      <param name="errorCode">The error code associated with the error.</param>
      <remarks>
        <para>
            Handles the error and information about the error condition is passed as 
            a parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception)">
      <summary>
            Prints the error message passed as a parameter.
            </summary>
      <param name="message">The message associated with the error.</param>
      <param name="e">The <see cref="T:System.Exception" /> that was thrown when the error occurred.</param>
      <remarks>
        <para>
            See <see cref="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.IErrorHandler.Error(System.String)">
      <summary>
            Prints the error message passed as a parameter.
            </summary>
      <param name="message">The message associated with the error.</param>
      <remarks>
        <para>
            See <see cref="M:log4net.Core.IErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.IFixingRequired">
      <summary>
            Interface for objects that require fixing.
            </summary>
      <remarks>
        <para>
            Interface that indicates that the object requires fixing before it
            can be taken outside the context of the appender's 
            <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method.
            </para>
        <para>
            When objects that implement this interface are stored 
            in the context properties maps <see cref="T:log4net.GlobalContext" /><see cref="P:log4net.GlobalContext.Properties" /> and <see cref="T:log4net.ThreadContext" /><see cref="P:log4net.ThreadContext.Properties" /> are fixed 
            (see <see cref="P:log4net.Core.LoggingEvent.Fix" />) the <see cref="M:log4net.Core.IFixingRequired.GetFixedObject" />
            method will be called.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Core.IFixingRequired.GetFixedObject">
      <summary>
            Get a portable version of this object
            </summary>
      <returns>the portable instance of this object</returns>
      <remarks>
        <para>
            Get a portable instance object that represents the current
            state of this object. The portable object can be stored
            and logged from any thread with identical results.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.ILogger">
      <summary>
            Interface that all loggers implement
            </summary>
      <remarks>
        <para>
            This interface supports logging events and testing if a level
            is enabled for logging.
            </para>
        <para>
            These methods will not throw exceptions. Note to implementor, ensure
            that the implementation of these methods cannot allow an exception
            to be thrown to the caller.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Core.ILogger.Log(System.Type,log4net.Core.Level,System.Object,System.Exception)">
      <summary>
            This generic form is intended to be used by wrappers.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="level">The level of the message to be logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">the exception to log, including its stack trace. Pass <c>null</c> to not log an exception.</param>
      <remarks>
        <para>
            Generates a logging event for the specified <paramref name="level" /> using
            the <paramref name="message" /> and <paramref name="exception" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.ILogger.Log(log4net.Core.LoggingEvent)">
      <summary>
            This is the most generic printing method that is intended to be used 
            by wrappers.
            </summary>
      <param name="logEvent">The event being logged.</param>
      <remarks>
        <para>
            Logs the specified logging event through this logger.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.ILogger.IsEnabledFor(log4net.Core.Level)">
      <summary>
            Checks if this logger is enabled for a given <see cref="T:log4net.Core.Level" /> passed as parameter.
            </summary>
      <param name="level">The level to check.</param>
      <returns>
        <c>true</c> if this logger is enabled for <c>level</c>, otherwise <c>false</c>.
            </returns>
      <remarks>
        <para>
            Test if this logger is going to log events of the specified <paramref name="level" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.ILogger.Name">
      <summary>
            Gets the name of the logger.
            </summary>
      <value>
            The name of the logger.
            </value>
      <remarks>
        <para>
            The name of this logger
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.ILogger.Repository">
      <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </summary>
      <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this logger belongs to.
            </value>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.ILoggerWrapper">
      <summary>
            Base interface for all wrappers
            </summary>
      <remarks>
        <para>
            Base interface for all wrappers.
            </para>
        <para>
            All wrappers must implement this interface.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="P:log4net.Core.ILoggerWrapper.Logger">
      <summary>
            Get the implementation behind this wrapper object.
            </summary>
      <value>
            The <see cref="T:log4net.Core.ILogger" /> object that in implementing this object.
            </value>
      <remarks>
        <para>
            The <see cref="T:log4net.Core.ILogger" /> object that in implementing this
            object. The <c>Logger</c> object may not 
            be the same object as this object because of logger decorators.
            This gets the actual underlying objects that is used to process
            the log events.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LoggerRepositoryCreationEventHandler">
      <summary>
            Delegate used to handle logger repository creation event notifications
            </summary>
      <param name="sender">The <see cref="T:log4net.Core.IRepositorySelector" /> which created the repository.</param>
      <param name="e">The <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs" /> event args
            that holds the <see cref="T:log4net.Repository.ILoggerRepository" /> instance that has been created.</param>
      <remarks>
        <para>
            Delegate used to handle logger repository creation event notifications.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LoggerRepositoryCreationEventArgs">
      <summary>
            Provides data for the <see cref="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent" /> event.
            </summary>
      <remarks>
        <para>
            A <see cref="E:log4net.Core.IRepositorySelector.LoggerRepositoryCreatedEvent" /> 
            event is raised every time a <see cref="T:log4net.Repository.ILoggerRepository" /> is created.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggerRepositoryCreationEventArgs.m_repository">
      <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created
            </summary>
    </member>
    <member name="M:log4net.Core.LoggerRepositoryCreationEventArgs.#ctor(log4net.Repository.ILoggerRepository)">
      <summary>
            Construct instance using <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            </summary>
      <param name="repository">the <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created</param>
      <remarks>
        <para>
            Construct instance using <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggerRepositoryCreationEventArgs.LoggerRepository">
      <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created
            </summary>
      <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created
            </value>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that has been created
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.ITriggeringEventEvaluator">
      <summary>
            Test if an <see cref="T:log4net.Core.LoggingEvent" /> triggers an action
            </summary>
      <remarks>
        <para>
            Implementations of this interface allow certain appenders to decide
            when to perform an appender specific action.
            </para>
        <para>
            The action or behavior triggered is defined by the implementation.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Core.ITriggeringEventEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
      <summary>
            Test if this event triggers the action
            </summary>
      <param name="loggingEvent">The event to check</param>
      <returns>
        <c>true</c> if this event triggers the action, otherwise <c>false</c></returns>
      <remarks>
        <para>
            Return <c>true</c> if this event triggers the action
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.Level">
      <summary>
            Defines the default set of levels recognized by the system.
            </summary>
      <remarks>
        <para>
            Each <see cref="T:log4net.Core.LoggingEvent" /> has an associated <see cref="T:log4net.Core.Level" />.
            </para>
        <para>
            Levels have a numeric <see cref="P:log4net.Core.Level.Value" /> that defines the relative 
            ordering between levels. Two Levels with the same <see cref="P:log4net.Core.Level.Value" /> 
            are deemed to be equivalent.
            </para>
        <para>
            The levels that are recognized by log4net are set for each <see cref="T:log4net.Repository.ILoggerRepository" />
            and each repository can have different levels defined. The levels are stored
            in the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" /> on the repository. Levels are
            looked up by name from the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />.
            </para>
        <para>
            When logging at level INFO the actual level used is not <see cref="F:log4net.Core.Level.Info" /> but
            the value of <c>LoggerRepository.LevelMap["INFO"]</c>. The default value for this is
            <see cref="F:log4net.Core.Level.Info" />, but this can be changed by reconfiguring the level map.
            </para>
        <para>
            Each level has a <see cref="P:log4net.Core.Level.DisplayName" /> in addition to its <see cref="P:log4net.Core.Level.Name" />. The 
            <see cref="P:log4net.Core.Level.DisplayName" /> is the string that is written into the output log. By default
            the display name is the same as the level name, but this can be used to alias levels
            or to localize the log output.
            </para>
        <para>
            Some of the predefined levels recognized by the system are:
            </para>
        <list type="bullet">
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Off" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Fatal" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Error" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Warn" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Info" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.Debug" />.</description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.Level.All" />.</description>
          </item>
        </list>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.Level.Off">
      <summary>
            The <see cref="F:log4net.Core.Level.Off" /> level designates a higher level than all the rest.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Emergency">
      <summary>
            The <see cref="F:log4net.Core.Level.Emergency" /> level designates very severe error events. 
            System unusable, emergencies.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Fatal">
      <summary>
            The <see cref="F:log4net.Core.Level.Fatal" /> level designates very severe error events 
            that will presumably lead the application to abort.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Alert">
      <summary>
            The <see cref="F:log4net.Core.Level.Alert" /> level designates very severe error events. 
            Take immediate action, alerts.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Critical">
      <summary>
            The <see cref="F:log4net.Core.Level.Critical" /> level designates very severe error events. 
            Critical condition, critical.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Severe">
      <summary>
            The <see cref="F:log4net.Core.Level.Severe" /> level designates very severe error events.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Error">
      <summary>
            The <see cref="F:log4net.Core.Level.Error" /> level designates error events that might 
            still allow the application to continue running.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Warn">
      <summary>
            The <see cref="F:log4net.Core.Level.Warn" /> level designates potentially harmful 
            situations.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Notice">
      <summary>
            The <see cref="F:log4net.Core.Level.Notice" /> level designates informational messages 
            that highlight the progress of the application at the highest level.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Info">
      <summary>
            The <see cref="F:log4net.Core.Level.Info" /> level designates informational messages that 
            highlight the progress of the application at coarse-grained level.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Debug">
      <summary>
            The <see cref="F:log4net.Core.Level.Debug" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Fine">
      <summary>
            The <see cref="F:log4net.Core.Level.Fine" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Trace">
      <summary>
            The <see cref="F:log4net.Core.Level.Trace" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Finer">
      <summary>
            The <see cref="F:log4net.Core.Level.Finer" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Verbose">
      <summary>
            The <see cref="F:log4net.Core.Level.Verbose" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.Finest">
      <summary>
            The <see cref="F:log4net.Core.Level.Finest" /> level designates fine-grained informational 
            events that are most useful to debug an application.
            </summary>
    </member>
    <member name="F:log4net.Core.Level.All">
      <summary>
            The <see cref="F:log4net.Core.Level.All" /> level designates the lowest level possible.
            </summary>
    </member>
    <member name="M:log4net.Core.Level.#ctor(System.Int32,System.String,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="level">Integer value for this level, higher values represent more severe levels.</param>
      <param name="levelName">The string name of this level.</param>
      <param name="displayName">The display name for this level. This may be localized or otherwise different from the name</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.Level" /> class with
            the specified level name and value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.#ctor(System.Int32,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="level">Integer value for this level, higher values represent more severe levels.</param>
      <param name="levelName">The string name of this level.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.Level" /> class with
            the specified level name and value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.ToString">
      <summary>
            Returns the <see cref="T:System.String" /> representation of the current 
            <see cref="T:log4net.Core.Level" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> representation of the current <see cref="T:log4net.Core.Level" />.
            </returns>
      <remarks>
        <para>
            Returns the level <see cref="P:log4net.Core.Level.Name" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.Equals(System.Object)">
      <summary>
            Compares levels.
            </summary>
      <param name="o">The object to compare against.</param>
      <returns>
        <c>true</c> if the objects are equal.</returns>
      <remarks>
        <para>
            Compares the levels of <see cref="T:log4net.Core.Level" /> instances, and 
            defers to base class if the target object is not a <see cref="T:log4net.Core.Level" />
            instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.GetHashCode">
      <summary>
            Returns a hash code
            </summary>
      <returns>A hash code for the current <see cref="T:log4net.Core.Level" />.</returns>
      <remarks>
        <para>
            Returns a hash code suitable for use in hashing algorithms and data 
            structures like a hash table.
            </para>
        <para>
            Returns the hash code of the level <see cref="P:log4net.Core.Level.Value" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.CompareTo(System.Object)">
      <summary>
            Compares this instance to a specified object and returns an 
            indication of their relative values.
            </summary>
      <param name="r">A <see cref="T:log4net.Core.Level" /> instance or <see langword="null" /> to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the 
            values compared. The return value has these meanings:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description>This instance is less than <paramref name="r" />.</description></item><item><term>Zero</term><description>This instance is equal to <paramref name="r" />.</description></item><item><term>Greater than zero</term><description><para>This instance is greater than <paramref name="r" />.</para><para>-or-</para><para><paramref name="r" /> is <see langword="null" />.</para></description></item></list></returns>
      <remarks>
        <para>
          <paramref name="r" /> must be an instance of <see cref="T:log4net.Core.Level" /> 
            or <see langword="null" />; otherwise, an exception is thrown.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <paramref name="r" /> is not a <see cref="T:log4net.Core.Level" />.</exception>
    </member>
    <member name="M:log4net.Core.Level.op_GreaterThan(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is greater than another specified <see cref="T:log4net.Core.Level" />.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /></param>
      <param name="r">A <see cref="T:log4net.Core.Level" /></param>
      <returns>
        <c>true</c> if <paramref name="l" /> is greater than 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.op_LessThan(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is less than another specified <see cref="T:log4net.Core.Level" />.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /></param>
      <param name="r">A <see cref="T:log4net.Core.Level" /></param>
      <returns>
        <c>true</c> if <paramref name="l" /> is less than 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.op_GreaterThanOrEqual(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is greater than or equal to another specified <see cref="T:log4net.Core.Level" />.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /></param>
      <param name="r">A <see cref="T:log4net.Core.Level" /></param>
      <returns>
        <c>true</c> if <paramref name="l" /> is greater than or equal to 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.op_LessThanOrEqual(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether a specified <see cref="T:log4net.Core.Level" /> 
            is less than or equal to another specified <see cref="T:log4net.Core.Level" />.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /></param>
      <param name="r">A <see cref="T:log4net.Core.Level" /></param>
      <returns>
        <c>true</c> if <paramref name="l" /> is less than or equal to 
            <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.op_Equality(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether two specified <see cref="T:log4net.Core.Level" /> 
            objects have the same value.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
      <param name="r">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
      <returns>
        <c>true</c> if the value of <paramref name="l" /> is the same as the 
            value of <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.op_Inequality(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Returns a value indicating whether two specified <see cref="T:log4net.Core.Level" /> 
            objects have different values.
            </summary>
      <param name="l">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
      <param name="r">A <see cref="T:log4net.Core.Level" /> or <see langword="null" />.</param>
      <returns>
        <c>true</c> if the value of <paramref name="l" /> is different from
            the value of <paramref name="r" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.Level.Compare(log4net.Core.Level,log4net.Core.Level)">
      <summary>
            Compares two specified <see cref="T:log4net.Core.Level" /> instances.
            </summary>
      <param name="l">The first <see cref="T:log4net.Core.Level" /> to compare.</param>
      <param name="r">The second <see cref="T:log4net.Core.Level" /> to compare.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the 
            two values compared. The return value has these meanings:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>Less than zero</term><description><paramref name="l" /> is less than <paramref name="r" />.</description></item><item><term>Zero</term><description><paramref name="l" /> is equal to <paramref name="r" />.</description></item><item><term>Greater than zero</term><description><paramref name="l" /> is greater than <paramref name="r" />.</description></item></list></returns>
      <remarks>
        <para>
            Compares two levels.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.Level.Name">
      <summary>
            Gets the name of this level.
            </summary>
      <value>
            The name of this level.
            </value>
      <remarks>
        <para>
            Gets the name of this level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.Level.Value">
      <summary>
            Gets the value of this level.
            </summary>
      <value>
            The value of this level.
            </value>
      <remarks>
        <para>
            Gets the value of this level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.Level.DisplayName">
      <summary>
            Gets the display name of this level.
            </summary>
      <value>
            The display name of this level.
            </value>
      <remarks>
        <para>
            Gets the display name of this level.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LevelCollection">
      <summary>
            A strongly-typed collection of <see cref="T:log4net.Core.Level" /> objects.
            </summary>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Core.LevelCollection.ILevelCollectionEnumerator">
      <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Core.LevelCollection" />.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.ILevelCollectionEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.ILevelCollectionEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Core.LevelCollection.ILevelCollectionEnumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
    </member>
    <member name="T:log4net.Core.LevelCollection.Tag">
      <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
    </member>
    <member name="T:log4net.Core.LevelCollection.Enumerator">
      <summary>
            Supports simple iteration over a <see cref="T:log4net.Core.LevelCollection" />.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.Enumerator.#ctor(log4net.Core.LevelCollection)">
      <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
      <param name="tc">
      </param>
    </member>
    <member name="M:log4net.Core.LevelCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Core.LevelCollection.Enumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.ReadOnly(log4net.Core.LevelCollection)">
      <summary>
            Creates a read-only wrapper for a <c>LevelCollection</c> instance.
            </summary>
      <param name="list">list to create a readonly wrapper arround</param>
      <returns>
            A <c>LevelCollection</c> wrapper that is read-only.
            </returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor">
      <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that has the specified initial capacity.
            </summary>
      <param name="capacity">
            The number of elements that the new <c>LevelCollection</c> is initially capable of storing.
            </param>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.LevelCollection)">
      <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <c>LevelCollection</c>.
            </summary>
      <param name="c">The <c>LevelCollection</c> whose elements are copied to the new collection.</param>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.Level[])">
      <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Core.Level" /> array.
            </summary>
      <param name="a">The <see cref="T:log4net.Core.Level" /> array whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Core.Level" /> collection.
            </summary>
      <param name="col">The <see cref="T:log4net.Core.Level" /> collection whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Core.LevelCollection.#ctor(log4net.Core.LevelCollection.Tag)">
      <summary>
            Allow subclasses to avoid our default constructors
            </summary>
      <param name="tag">
      </param>
    </member>
    <member name="M:log4net.Core.LevelCollection.CopyTo(log4net.Core.Level[])">
      <summary>
            Copies the entire <c>LevelCollection</c> to a one-dimensional
            <see cref="T:log4net.Core.Level" /> array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Core.Level" /> array to copy to.</param>
    </member>
    <member name="M:log4net.Core.LevelCollection.CopyTo(log4net.Core.Level[],System.Int32)">
      <summary>
            Copies the entire <c>LevelCollection</c> to a one-dimensional
            <see cref="T:log4net.Core.Level" /> array, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Core.Level" /> array to copy to.</param>
      <param name="start">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:log4net.Core.LevelCollection.Add(log4net.Core.Level)">
      <summary>
            Adds a <see cref="T:log4net.Core.Level" /> to the end of the <c>LevelCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Core.Level" /> to be added to the end of the <c>LevelCollection</c>.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.Clear">
      <summary>
            Removes all elements from the <c>LevelCollection</c>.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.Clone">
      <summary>
            Creates a shallow copy of the <see cref="T:log4net.Core.LevelCollection" />.
            </summary>
      <returns>A new <see cref="T:log4net.Core.LevelCollection" /> with a shallow copy of the collection data.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.Contains(log4net.Core.Level)">
      <summary>
            Determines whether a given <see cref="T:log4net.Core.Level" /> is in the <c>LevelCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Core.Level" /> to check for.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> is found in the <c>LevelCollection</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.IndexOf(log4net.Core.Level)">
      <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Core.Level" />
            in the <c>LevelCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Core.Level" /> to locate in the <c>LevelCollection</c>.</param>
      <returns>
            The zero-based index of the first occurrence of <paramref name="item" /> 
            in the entire <c>LevelCollection</c>, if found; otherwise, -1.
            </returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.Insert(System.Int32,log4net.Core.Level)">
      <summary>
            Inserts an element into the <c>LevelCollection</c> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:log4net.Core.Level" /> to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.Remove(log4net.Core.Level)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Core.Level" /> from the <c>LevelCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Core.Level" /> to remove from the <c>LevelCollection</c>.</param>
      <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Core.Level" /> was not found in the <c>LevelCollection</c>.
            </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <c>LevelCollection</c>.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the <c>LevelCollection</c>.
            </summary>
      <returns>An <see cref="T:log4net.Core.LevelCollection.Enumerator" /> for the entire <c>LevelCollection</c>.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.AddRange(log4net.Core.LevelCollection)">
      <summary>
            Adds the elements of another <c>LevelCollection</c> to the current <c>LevelCollection</c>.
            </summary>
      <param name="x">The <c>LevelCollection</c> whose elements should be added to the end of the current <c>LevelCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Core.LevelCollection.Count" /> of the <c>LevelCollection</c>.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.AddRange(log4net.Core.Level[])">
      <summary>
            Adds the elements of a <see cref="T:log4net.Core.Level" /> array to the current <c>LevelCollection</c>.
            </summary>
      <param name="x">The <see cref="T:log4net.Core.Level" /> array whose elements should be added to the end of the <c>LevelCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Core.LevelCollection.Count" /> of the <c>LevelCollection</c>.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of a <see cref="T:log4net.Core.Level" /> collection to the current <c>LevelCollection</c>.
            </summary>
      <param name="col">The <see cref="T:log4net.Core.Level" /> collection whose elements should be added to the end of the <c>LevelCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Core.LevelCollection.Count" /> of the <c>LevelCollection</c>.</returns>
    </member>
    <member name="M:log4net.Core.LevelCollection.TrimToSize">
      <summary>
            Sets the capacity to the actual number of elements.
            </summary>
    </member>
    <member name="M:log4net.Core.LevelCollection.ValidateIndex(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Core.LevelCollection.ValidateIndex(System.Int32,System.Boolean)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Core.LevelCollection.Count">
      <summary>
            Gets the number of elements actually contained in the <c>LevelCollection</c>.
            </summary>
    </member>
    <member name="P:log4net.Core.LevelCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
      <value>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</value>
    </member>
    <member name="P:log4net.Core.LevelCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
    </member>
    <member name="P:log4net.Core.LevelCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:log4net.Core.Level" /> at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Core.LevelCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Core.LevelCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
      <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
    </member>
    <member name="P:log4net.Core.LevelCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
      <value>true if the collection is read-only; otherwise, false. The default is false</value>
    </member>
    <member name="P:log4net.Core.LevelCollection.Capacity">
      <summary>
            Gets or sets the number of elements the <c>LevelCollection</c> can contain.
            </summary>
    </member>
    <member name="T:log4net.Core.LevelEvaluator">
      <summary>
            An evaluator that triggers at a threshold level
            </summary>
      <remarks>
        <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:log4net.Core.LevelEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.LevelEvaluator.m_threshold">
      <summary>
            The threshold for triggering
            </summary>
    </member>
    <member name="M:log4net.Core.LevelEvaluator.#ctor">
      <summary>
            Create a new evaluator using the <see cref="F:log4net.Core.Level.Off" /> threshold.
            </summary>
      <remarks>
        <para>
            Create a new evaluator using the <see cref="F:log4net.Core.Level.Off" /> threshold.
            </para>
        <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:log4net.Core.LevelEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelEvaluator.#ctor(log4net.Core.Level)">
      <summary>
            Create a new evaluator using the specified <see cref="T:log4net.Core.Level" /> threshold.
            </summary>
      <param name="threshold">the threshold to trigger at</param>
      <remarks>
        <para>
            Create a new evaluator using the specified <see cref="T:log4net.Core.Level" /> threshold.
            </para>
        <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:log4net.Core.LevelEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)">
      <summary>
            Is this <paramref name="loggingEvent" /> the triggering event?
            </summary>
      <param name="loggingEvent">The event to check</param>
      <returns>This method returns <c>true</c>, if the event level
            is equal or higher than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />. 
            Otherwise it returns <c>false</c></returns>
      <remarks>
        <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:log4net.Core.LevelEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LevelEvaluator.Threshold">
      <summary>
            the threshold to trigger at
            </summary>
      <value>
            The <see cref="T:log4net.Core.Level" /> that will cause this evaluator to trigger
            </value>
      <remarks>
        <para>
            This evaluator will trigger if the level of the event
            passed to <see cref="M:log4net.Core.LevelEvaluator.IsTriggeringEvent(log4net.Core.LoggingEvent)" />
            is equal to or greater than the <see cref="P:log4net.Core.LevelEvaluator.Threshold" />
            level.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LevelMap">
      <summary>
            Mapping between string name and Level object
            </summary>
      <remarks>
        <para>
            Mapping between string name and <see cref="T:log4net.Core.Level" /> object.
            This mapping is held separately for each <see cref="T:log4net.Repository.ILoggerRepository" />.
            The level name is case insensitive.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.LevelMap.m_mapName2Level">
      <summary>
            Mapping from level name to Level object. The
            level name is case insensitive
            </summary>
    </member>
    <member name="M:log4net.Core.LevelMap.#ctor">
      <summary>
            Construct the level map
            </summary>
      <remarks>
        <para>
            Construct the level map.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelMap.Clear">
      <summary>
            Clear the internal maps of all levels
            </summary>
      <remarks>
        <para>
            Clear the internal maps of all levels
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelMap.Add(System.String,System.Int32)">
      <summary>
            Create a new Level and add it to the map
            </summary>
      <param name="name">the string to display for the Level</param>
      <param name="value">the level value to give to the Level</param>
      <remarks>
        <para>
            Create a new Level and add it to the map
            </para>
      </remarks>
      <seealso cref="M:log4net.Core.LevelMap.Add(System.String,System.Int32,System.String)" />
    </member>
    <member name="M:log4net.Core.LevelMap.Add(System.String,System.Int32,System.String)">
      <summary>
            Create a new Level and add it to the map
            </summary>
      <param name="name">the string to display for the Level</param>
      <param name="value">the level value to give to the Level</param>
      <param name="displayName">the display name to give to the Level</param>
      <remarks>
        <para>
            Create a new Level and add it to the map
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelMap.Add(log4net.Core.Level)">
      <summary>
            Add a Level to the map
            </summary>
      <param name="level">the Level to add</param>
      <remarks>
        <para>
            Add a Level to the map
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LevelMap.LookupWithDefault(log4net.Core.Level)">
      <summary>
            Lookup a named level from the map
            </summary>
      <param name="defaultLevel">the name of the level to lookup is taken from this level. 
            If the level is not set on the map then this level is added</param>
      <returns>the level in the map with the name specified</returns>
      <remarks>
        <para>
            Lookup a named level from the map. The name of the level to lookup is taken
            from the <see cref="P:log4net.Core.Level.Name" /> property of the <paramref name="defaultLevel" />
            argument.
            </para>
        <para>
            If no level with the specified name is found then the 
            <paramref name="defaultLevel" /> argument is added to the level map
            and returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LevelMap.Item(System.String)">
      <summary>
            Lookup a <see cref="T:log4net.Core.Level" /> by name
            </summary>
      <param name="name">The name of the Level to lookup</param>
      <returns>a Level from the map with the name specified</returns>
      <remarks>
        <para>
            Returns the <see cref="T:log4net.Core.Level" /> from the
            map with the name specified. If the no level is
            found then <c>null</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LevelMap.AllLevels">
      <summary>
            Return all possible levels as a list of Level objects.
            </summary>
      <returns>all possible levels as a list of Level objects</returns>
      <remarks>
        <para>
            Return all possible levels as a list of Level objects.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LocationInfo">
      <summary>
            The internal representation of caller location information.
            </summary>
      <remarks>
        <para>
            This class uses the <c>System.Diagnostics.StackTrace</c> class to generate
            a call stack. The caller's information is then extracted from this stack.
            </para>
        <para>
            The <c>System.Diagnostics.StackTrace</c> class is not supported on the 
            .NET Compact Framework 1.0 therefore caller location information is not
            available on that framework.
            </para>
        <para>
            The <c>System.Diagnostics.StackTrace</c> class has this to say about Release builds:
            </para>
        <para>
            "StackTrace information will be most informative with Debug build configurations. 
            By default, Debug builds include debug symbols, while Release builds do not. The 
            debug symbols contain most of the file, method name, line number, and column 
            information used in constructing StackFrame and StackTrace objects. StackTrace 
            might not report as many method calls as expected, due to code transformations 
            that occur during optimization."
            </para>
        <para>
            This means that in a Release build the caller information may be incomplete or may 
            not exist at all! Therefore caller location information cannot be relied upon in a Release build.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.LocationInfo.NA">
      <summary>
            When location information is not available the constant
            <c>NA</c> is returned. Current value of this string
            constant is <b>?</b>.
            </summary>
    </member>
    <member name="M:log4net.Core.LocationInfo.#ctor(System.Type)">
      <summary>
            Constructor
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LocationInfo" />
            class based on the current thread.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LocationInfo.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
            Constructor
            </summary>
      <param name="className">The fully qualified class name.</param>
      <param name="methodName">The method name.</param>
      <param name="fileName">The file name.</param>
      <param name="lineNumber">The line number of the method within the file.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LocationInfo" />
            class with the specified data.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LocationInfo.ClassName">
      <summary>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </summary>
      <value>
            The fully qualified class name of the caller making the logging 
            request.
            </value>
      <remarks>
        <para>
            Gets the fully qualified class name of the caller making the logging 
            request.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LocationInfo.FileName">
      <summary>
            Gets the file name of the caller.
            </summary>
      <value>
            The file name of the caller.
            </value>
      <remarks>
        <para>
            Gets the file name of the caller.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LocationInfo.LineNumber">
      <summary>
            Gets the line number of the caller.
            </summary>
      <value>
            The line number of the caller.
            </value>
      <remarks>
        <para>
            Gets the line number of the caller.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LocationInfo.MethodName">
      <summary>
            Gets the method name of the caller.
            </summary>
      <value>
            The method name of the caller.
            </value>
      <remarks>
        <para>
            Gets the method name of the caller.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LocationInfo.FullInfo">
      <summary>
            Gets all available caller information
            </summary>
      <value>
            All available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c></value>
      <remarks>
        <para>
            Gets all available caller information, in the format
            <c>fully.qualified.classname.of.caller.methodName(Filename:line)</c></para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LoggerManager">
      <summary>
            Static manager that controls the creation of repositories
            </summary>
      <remarks>
        <para>
            Static manager that controls the creation of repositories
            </para>
        <para>
            This class is used by the wrapper managers (e.g. <see cref="T:log4net.LogManager" />)
            to provide access to the <see cref="T:log4net.Core.ILogger" /> objects.
            </para>
        <para>
            This manager also holds the <see cref="T:log4net.Core.IRepositorySelector" /> that is used to
            lookup and create repositories. The selector can be set either programmatically using
            the <see cref="P:log4net.Core.LoggerManager.RepositorySelector" /> property, or by setting the <c>log4net.RepositorySelector</c>
            AppSetting in the applications config file to the fully qualified type name of the
            selector to use. 
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.LoggerManager.s_repositorySelector">
      <summary>
            Initialize the default repository selector
            </summary>
    </member>
    <member name="M:log4net.Core.LoggerManager.#ctor">
      <summary>
            Private constructor to prevent instances. Only static methods should be used.
            </summary>
      <remarks>
        <para>
            Private constructor to prevent instances. Only static methods should be used.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.RegisterAppDomainEvents">
      <summary>
            Register for ProcessExit and DomainUnload events on the AppDomain
            </summary>
      <remarks>
        <para>
            This needs to be in a separate method because the events make
            a LinkDemand for the ControlAppDomain SecurityPermission. Because
            this is a LinkDemand it is demanded at JIT time. Therefore we cannot
            catch the exception in the method itself, we have to catch it in the
            caller.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLoggerRepository(System.String)">
      <summary>
            Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <param name="repository">the repository to lookup in</param>
      <returns>Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLoggerRepository(System.Reflection.Assembly)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetRepository(System.String)">
      <summary>
            Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <param name="repository">the repository to lookup in</param>
      <returns>Return the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetRepository(System.Reflection.Assembly)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
      <remarks>
        <para>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.Exists(System.String,System.String)">
      <summary>
            Returns the named logger if it exists.
            </summary>
      <param name="repository">The repository to lookup in.</param>
      <param name="name">The fully qualified logger name to look for.</param>
      <returns>
            The logger found, or <c>null</c> if the named logger does not exist in the
            specified repository.
            </returns>
      <remarks>
        <para>
            If the named logger exists (in the specified repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.Exists(System.Reflection.Assembly,System.String)">
      <summary>
            Returns the named logger if it exists.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <param name="name">The fully qualified logger name to look for.</param>
      <returns>
            The logger found, or <c>null</c> if the named logger does not exist in the
            specified assembly's repository.
            </returns>
      <remarks>
        <para>
            If the named logger exists (in the specified assembly's repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetCurrentLoggers(System.String)">
      <summary>
            Returns all the currently defined loggers in the specified repository.
            </summary>
      <param name="repository">The repository to lookup in.</param>
      <returns>All the defined loggers.</returns>
      <remarks>
        <para>
            The root logger is <b>not</b> included in the returned array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetCurrentLoggers(System.Reflection.Assembly)">
      <summary>
            Returns all the currently defined loggers in the specified assembly's repository.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <returns>All the defined loggers.</returns>
      <remarks>
        <para>
            The root logger is <b>not</b> included in the returned array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLogger(System.String,System.String)">
      <summary>
            Retrieves or creates a named logger.
            </summary>
      <param name="repository">The repository to lookup in.</param>
      <param name="name">The name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
      <remarks>
        <para>
            Retrieves a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
        <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLogger(System.Reflection.Assembly,System.String)">
      <summary>
            Retrieves or creates a named logger.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <param name="name">The name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
      <remarks>
        <para>
            Retrieves a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
        <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLogger(System.String,System.Type)">
      <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)" />.
            </summary>
      <param name="repository">The repository to lookup in.</param>
      <param name="type">The <paramref name="type" /> of which the fullname will be used as the name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
      <remarks>
        <para>
            Gets the logger for the fully qualified name of the type specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetLogger(System.Reflection.Assembly,System.Type)">
      <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)" />.
            </summary>
      <param name="repositoryAssembly">the assembly to use to lookup the repository</param>
      <param name="type">The <paramref name="type" /> of which the fullname will be used as the name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
      <remarks>
        <para>
            Gets the logger for the fully qualified name of the type specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.Shutdown">
      <summary>
            Shuts down the log4net system.
            </summary>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in all the
            default repositories.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.ShutdownRepository(System.String)">
      <summary>
            Shuts down the repository for the repository specified.
            </summary>
      <param name="repository">The repository to shutdown.</param>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository for the <paramref name="repository" /> specified.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.ShutdownRepository(System.Reflection.Assembly)">
      <summary>
            Shuts down the repository for the repository specified.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository for the repository. The repository is looked up using
            the <paramref name="repositoryAssembly" /> specified.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.ResetConfiguration(System.String)">
      <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
      <param name="repository">The repository to reset.</param>
      <remarks>
        <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set its default "off" value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.ResetConfiguration(System.Reflection.Assembly)">
      <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository to reset.</param>
      <remarks>
        <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set its default "off" value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateDomain(System.String)">
      <summary>
            Creates a repository with the specified name.
            </summary>
      <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateRepository(System.String)">
      <summary>
            Creates a repository with the specified name.
            </summary>
      <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateDomain(System.String,System.Type)">
      <summary>
            Creates a repository with the specified name and repository type.
            </summary>
      <param name="repository">The name of the repository, this must be unique to the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An Exception will be thrown if the repository already exists.
            </para>
      </remarks>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateRepository(System.String,System.Type)">
      <summary>
            Creates a repository with the specified name and repository type.
            </summary>
      <param name="repository">The name of the repository, this must be unique to the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An Exception will be thrown if the repository already exists.
            </para>
      </remarks>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateDomain(System.Reflection.Assembly,System.Type)">
      <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
      <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.LoggerManager.GetRepository(System.Reflection.Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.CreateRepository(System.Reflection.Assembly,System.Type)">
      <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
      <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.LoggerManager.GetRepository(System.Reflection.Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetAllRepositories">
      <summary>
            Gets an array of all currently defined repositories.
            </summary>
      <returns>An array of all the known <see cref="T:log4net.Repository.ILoggerRepository" /> objects.</returns>
      <remarks>
        <para>
            Gets an array of all currently defined repositories.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.GetVersionInfo">
      <summary>
            Internal method to get pertinent version info.
            </summary>
      <returns>A string of version info.</returns>
    </member>
    <member name="M:log4net.Core.LoggerManager.OnDomainUnload(System.Object,System.EventArgs)">
      <summary>
            Called when the <see cref="E:System.AppDomain.DomainUnload" /> event fires
            </summary>
      <param name="sender">the <see cref="T:System.AppDomain" /> that is exiting</param>
      <param name="e">null</param>
      <remarks>
        <para>
            Called when the <see cref="E:System.AppDomain.DomainUnload" /> event fires.
            </para>
        <para>
            When the event is triggered the log4net system is <see cref="M:log4net.Core.LoggerManager.Shutdown" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggerManager.OnProcessExit(System.Object,System.EventArgs)">
      <summary>
            Called when the <see cref="E:System.AppDomain.ProcessExit" /> event fires
            </summary>
      <param name="sender">the <see cref="T:System.AppDomain" /> that is exiting</param>
      <param name="e">null</param>
      <remarks>
        <para>
            Called when the <see cref="E:System.AppDomain.ProcessExit" /> event fires.
            </para>
        <para>
            When the event is triggered the log4net system is <see cref="M:log4net.Core.LoggerManager.Shutdown" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggerManager.RepositorySelector">
      <summary>
            Gets or sets the repository selector used by the <see cref="T:log4net.LogManager" />.
            </summary>
      <value>
            The repository selector used by the <see cref="T:log4net.LogManager" />.
            </value>
      <remarks>
        <para>
            The repository selector (<see cref="T:log4net.Core.IRepositorySelector" />) is used by 
            the <see cref="T:log4net.LogManager" /> to create and select repositories 
            (<see cref="T:log4net.Repository.ILoggerRepository" />).
            </para>
        <para>
            The caller to <see cref="T:log4net.LogManager" /> supplies either a string name 
            or an assembly (if not supplied the assembly is inferred using 
            <see cref="M:System.Reflection.Assembly.GetCallingAssembly" />).
            </para>
        <para>
            This context is used by the selector to lookup a specific repository.
            </para>
        <para>
            For the full .NET Framework, the default repository is <c>DefaultRepositorySelector</c>;
            for the .NET Compact Framework <c>CompactRepositorySelector</c> is the default
            repository.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LoggerWrapperImpl">
      <summary>
            Implementation of the <see cref="T:log4net.Core.ILoggerWrapper" /> interface.
            </summary>
      <remarks>
        <para>
            This class should be used as the base for all wrapper implementations.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.LoggerWrapperImpl.m_logger">
      <summary>
            The logger that this object is wrapping
            </summary>
    </member>
    <member name="M:log4net.Core.LoggerWrapperImpl.#ctor(log4net.Core.ILogger)">
      <summary>
            Constructs a new wrapper for the specified logger.
            </summary>
      <param name="logger">The logger to wrap.</param>
      <remarks>
        <para>
            Constructs a new wrapper for the specified logger.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggerWrapperImpl.Logger">
      <summary>
            Gets the implementation behind this wrapper object.
            </summary>
      <value>
            The <see cref="T:log4net.Core.ILogger" /> object that this object is implementing.
            </value>
      <remarks>
        <para>
            The <c>Logger</c> object may not be the same object as this object 
            because of logger decorators.
            </para>
        <para>
            This gets the actual underlying objects that is used to process
            the log events.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.LoggingEventData">
      <summary>
            Portable data structure used by <see cref="T:log4net.Core.LoggingEvent" /></summary>
      <remarks>
        <para>
            Portable data structure used by <see cref="T:log4net.Core.LoggingEvent" /></para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.LoggingEventData.LoggerName">
      <summary>
            The logger name.
            </summary>
      <remarks>
        <para>
            The logger name.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.Level">
      <summary>
            Level of logging event.
            </summary>
      <remarks>
        <para>
            Level of logging event. Level cannot be Serializable
            because it is a flyweight.  Due to its special serialization it
            cannot be declared final either.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.Message">
      <summary>
            The application supplied message.
            </summary>
      <remarks>
        <para>
            The application supplied message of logging event.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.ThreadName">
      <summary>
            The name of thread
            </summary>
      <remarks>
        <para>
            The name of thread in which this logging event was generated
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.TimeStamp">
      <summary>
            The time the event was logged
            </summary>
      <remarks>
        <para>
            The TimeStamp is stored in the local time zone for this computer.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.LocationInfo">
      <summary>
            Location information for the caller.
            </summary>
      <remarks>
        <para>
            Location information for the caller.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.UserName">
      <summary>
            String representation of the user
            </summary>
      <remarks>
        <para>
            String representation of the user's windows name,
            like DOMAIN\username
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.Identity">
      <summary>
            String representation of the identity.
            </summary>
      <remarks>
        <para>
            String representation of the current thread's principal identity.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.ExceptionString">
      <summary>
            The string representation of the exception
            </summary>
      <remarks>
        <para>
            The string representation of the exception
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.Domain">
      <summary>
            String representation of the AppDomain.
            </summary>
      <remarks>
        <para>
            String representation of the AppDomain.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEventData.Properties">
      <summary>
            Additional event specific properties
            </summary>
      <remarks>
        <para>
            A logger or an appender may attach additional
            properties to specific events. These properties
            have a string key and an object value.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.FixFlags">
      <summary>
            Flags passed to the <see cref="P:log4net.Core.LoggingEvent.Fix" /> property
            </summary>
      <remarks>
        <para>
            Flags passed to the <see cref="P:log4net.Core.LoggingEvent.Fix" /> property
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.FixFlags.Mdc">
      <summary>
            Fix the MDC
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.Ndc">
      <summary>
            Fix the NDC
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.Message">
      <summary>
            Fix the rendered message
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.ThreadName">
      <summary>
            Fix the thread name
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.LocationInfo">
      <summary>
            Fix the callers location information
            </summary>
      <remarks>
            CAUTION: Very slow to generate
            </remarks>
    </member>
    <member name="F:log4net.Core.FixFlags.UserName">
      <summary>
            Fix the callers windows user name
            </summary>
      <remarks>
            CAUTION: Slow to generate
            </remarks>
    </member>
    <member name="F:log4net.Core.FixFlags.Domain">
      <summary>
            Fix the domain friendly name
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.Identity">
      <summary>
            Fix the callers principal name
            </summary>
      <remarks>
            CAUTION: May be slow to generate
            </remarks>
    </member>
    <member name="F:log4net.Core.FixFlags.Exception">
      <summary>
            Fix the exception text
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.Properties">
      <summary>
            Fix the event properties
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.None">
      <summary>
            No fields fixed
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.All">
      <summary>
            All fields fixed
            </summary>
    </member>
    <member name="F:log4net.Core.FixFlags.Partial">
      <summary>
            Partial fields fixed
            </summary>
      <remarks>
        <para>
            This set of partial fields gives good performance. The following fields are fixed:
            </para>
        <list type="bullet">
          <item>
            <description>
              <see cref="F:log4net.Core.FixFlags.Message" />
            </description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.FixFlags.ThreadName" />
            </description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.FixFlags.Exception" />
            </description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.FixFlags.Domain" />
            </description>
          </item>
          <item>
            <description>
              <see cref="F:log4net.Core.FixFlags.Properties" />
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:log4net.Core.LoggingEvent">
      <summary>
            The internal representation of logging events. 
            </summary>
      <remarks>
        <para>
            When an affirmative decision is made to log then a 
            <see cref="T:log4net.Core.LoggingEvent" /> instance is created. This instance 
            is passed around to the different log4net components.
            </para>
        <para>
            This class is of concern to those wishing to extend log4net.
            </para>
        <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent" />
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:log4net.Core.LoggingEvent.FixVolatileData" />. There is a performance penalty
            for incurred by calling <see cref="M:log4net.Core.LoggingEvent.FixVolatileData" /> but it
            is essential to maintaining data consistency.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Douglas de la Torre</author>
      <author>Daniel Cazzulino</author>
    </member>
    <member name="F:log4net.Core.LoggingEvent.HostNameProperty">
      <summary>
            The key into the Properties map for the host name value.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.IdentityProperty">
      <summary>
            The key into the Properties map for the thread identity value.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.UserNameProperty">
      <summary>
            The key into the Properties map for the user name value.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_data">
      <summary>
            The internal logging event data.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_compositeProperties">
      <summary>
            The internal logging event data.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_eventProperties">
      <summary>
            The internal logging event data.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_callerStackBoundaryDeclaringType">
      <summary>
            The fully qualified Type of the calling 
            logger class in the stack frame (i.e. the declaring type of the method).
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_message">
      <summary>
            The application supplied message of logging event.
            </summary>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_thrownException">
      <summary>
            The exception that was thrown.
            </summary>
      <remarks>
            This is not serialized. The string representation
            is serialized instead.
            </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_repository">
      <summary>
            The repository that generated the logging event
            </summary>
      <remarks>
            This is not serialized.
            </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_fixFlags">
      <summary>
            The fix state for this event
            </summary>
      <remarks>
            These flags indicate which fields have been fixed.
            Not serialized.
            </remarks>
    </member>
    <member name="F:log4net.Core.LoggingEvent.m_cacheUpdatable">
      <summary>
            Indicated that the internal cache is updateable (ie not fixed)
            </summary>
      <remarks>
            This is a seperate flag to m_fixFlags as it allows incrementel fixing and simpler
            changes in the caching strategy.
            </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,System.String,log4net.Core.Level,System.Object,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class
            from the supplied parameters.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="repository">The repository this event is logged in.</param>
      <param name="loggerName">The name of the logger of this event.</param>
      <param name="level">The level of this event.</param>
      <param name="message">The message of this event.</param>
      <param name="exception">The exception for this event.</param>
      <remarks>
        <para>
            Except <see cref="P:log4net.Core.LoggingEvent.TimeStamp" />, <see cref="P:log4net.Core.LoggingEvent.Level" /> and <see cref="P:log4net.Core.LoggingEvent.LoggerName" />, 
            all fields of <c>LoggingEvent</c> are filled when actually needed. Call
            <see cref="M:log4net.Core.LoggingEvent.FixVolatileData" /> to cache all data locally
            to prevent inconsistencies.
            </para>
        <para>This method is called by the log4net framework
            to create a logging event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,log4net.Core.LoggingEventData,log4net.Core.FixFlags)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="repository">The repository this event is logged in.</param>
      <param name="data">Data used to initialize the logging event.</param>
      <param name="fixedData">The fields in the <paranref name="data" /> struct that have already been fixed.</param>
      <remarks>
        <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
        <para>
            Use the <see cref="M:log4net.Core.LoggingEvent.GetLoggingEventData(log4net.Core.FixFlags)" /> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData" /> class.
            </para>
        <para>
            The <paramref name="fixedData" /> parameter should be used to specify which fields in the
            <paramref name="data" /> struct have been preset. Fields not specified in the <paramref name="fixedData" />
            will be captured from the environment if requested or fixed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.#ctor(System.Type,log4net.Repository.ILoggerRepository,log4net.Core.LoggingEventData)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="repository">The repository this event is logged in.</param>
      <param name="data">Data used to initialize the logging event.</param>
      <remarks>
        <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
        <para>
            Use the <see cref="M:log4net.Core.LoggingEvent.GetLoggingEventData(log4net.Core.FixFlags)" /> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData" /> class.
            </para>
        <para>
            This constructor sets this objects <see cref="P:log4net.Core.LoggingEvent.Fix" /> flags to <see cref="F:log4net.Core.FixFlags.All" />,
            this assumes that all the data relating to this event is passed in via the <paramref name="data" />
            parameter and no other data should be captured from the environment.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.#ctor(log4net.Core.LoggingEventData)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            using specific data.
            </summary>
      <param name="data">Data used to initialize the logging event.</param>
      <remarks>
        <para>
            This constructor is provided to allow a <see cref="T:log4net.Core.LoggingEvent" />
            to be created independently of the log4net framework. This can
            be useful if you require a custom serialization scheme.
            </para>
        <para>
            Use the <see cref="M:log4net.Core.LoggingEvent.GetLoggingEventData(log4net.Core.FixFlags)" /> method to obtain an 
            instance of the <see cref="T:log4net.Core.LoggingEventData" /> class.
            </para>
        <para>
            This constructor sets this objects <see cref="P:log4net.Core.LoggingEvent.Fix" /> flags to <see cref="F:log4net.Core.FixFlags.All" />,
            this assumes that all the data relating to this event is passed in via the <paramref name="data" />
            parameter and no other data should be captured from the environment.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serialization constructor
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.LoggingEvent" /> class 
            with serialized data.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.EnsureRepository(log4net.Repository.ILoggerRepository)">
      <summary>
            Ensure that the repository is set.
            </summary>
      <param name="repository">the value for the repository</param>
    </member>
    <member name="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)">
      <summary>
            Write the rendered message to a TextWriter
            </summary>
      <param name="writer">the writer to write the message to</param>
      <remarks>
        <para>
            Unlike the <see cref="P:log4net.Core.LoggingEvent.RenderedMessage" /> property this method
            does store the message data in the internal cache. Therefore 
            if called only once this method should be faster than the
            <see cref="P:log4net.Core.LoggingEvent.RenderedMessage" /> property, however if the message is
            to be accessed multiple times then the property will be more efficient.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
      <remarks>
        <para>
            The data in this event must be fixed before it can be serialized.
            </para>
        <para>
            The <see cref="M:log4net.Core.LoggingEvent.FixVolatileData" /> method must be called during the
            <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method call if this event 
            is to be used outside that method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetLoggingEventData">
      <summary>
            Gets the portable data for this <see cref="T:log4net.Core.LoggingEvent" />.
            </summary>
      <returns>The <see cref="T:log4net.Core.LoggingEventData" /> for this event.</returns>
      <remarks>
        <para>
            A new <see cref="T:log4net.Core.LoggingEvent" /> can be constructed using a
            <see cref="T:log4net.Core.LoggingEventData" /> instance.
            </para>
        <para>
            Does a <see cref="F:log4net.Core.FixFlags.Partial" /> fix of the data
            in the logging event before returning the event data.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetLoggingEventData(log4net.Core.FixFlags)">
      <summary>
            Gets the portable data for this <see cref="T:log4net.Core.LoggingEvent" />.
            </summary>
      <param name="fixFlags">The set of data to ensure is fixed in the LoggingEventData</param>
      <returns>The <see cref="T:log4net.Core.LoggingEventData" /> for this event.</returns>
      <remarks>
        <para>
            A new <see cref="T:log4net.Core.LoggingEvent" /> can be constructed using a
            <see cref="T:log4net.Core.LoggingEventData" /> instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetExceptionStrRep">
      <summary>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
      <returns>
            This event's exception's rendered using the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </returns>
      <remarks>
        <para>
          <b>Obsolete. Use <see cref="M:log4net.Core.LoggingEvent.GetExceptionString" /> instead.</b>
        </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetExceptionString">
      <summary>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
      <returns>
            This event's exception's rendered using the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </returns>
      <remarks>
        <para>
            Returns this event's exception's rendered using the 
            <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.FixVolatileData">
      <summary>
            Fix instance fields that hold volatile data.
            </summary>
      <remarks>
        <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent" />
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:log4net.Core.LoggingEvent.FixVolatileData" />. There is a performance penalty
            incurred by calling <see cref="M:log4net.Core.LoggingEvent.FixVolatileData" /> but it
            is essential to maintaining data consistency.
            </para>
        <para>
            Calling <see cref="M:log4net.Core.LoggingEvent.FixVolatileData" /> is equivalent to
            calling <see cref="M:log4net.Core.LoggingEvent.FixVolatileData(System.Boolean)" /> passing the parameter
            <c>false</c>.
            </para>
        <para>
            See <see cref="M:log4net.Core.LoggingEvent.FixVolatileData(System.Boolean)" /> for more
            information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.FixVolatileData(System.Boolean)">
      <summary>
            Fixes instance fields that hold volatile data.
            </summary>
      <param name="fastButLoose">Set to <c>true</c> to not fix data that takes a long time to fix.</param>
      <remarks>
        <para>
            Some of the values in instances of <see cref="T:log4net.Core.LoggingEvent" />
            are considered volatile, that is the values are correct at the
            time the event is delivered to appenders, but will not be consistent
            at any time afterwards. If an event is to be stored and then processed
            at a later time these volatile values must be fixed by calling
            <see cref="M:log4net.Core.LoggingEvent.FixVolatileData" />. There is a performance penalty
            for incurred by calling <see cref="M:log4net.Core.LoggingEvent.FixVolatileData" /> but it
            is essential to maintaining data consistency.
            </para>
        <para>
            The <paramref name="fastButLoose" /> param controls the data that
            is fixed. Some of the data that can be fixed takes a long time to 
            generate, therefore if you do not require those settings to be fixed
            they can be ignored by setting the <paramref name="fastButLoose" /> param
            to <c>true</c>. This setting will ignore the <see cref="P:log4net.Core.LoggingEvent.LocationInformation" />
            and <see cref="P:log4net.Core.LoggingEvent.UserName" /> settings.
            </para>
        <para>
            Set <paramref name="fastButLoose" /> to <c>false</c> to ensure that all 
            settings are fixed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.FixVolatileData(log4net.Core.FixFlags)">
      <summary>
            Fix the fields specified by the <see cref="T:log4net.Core.FixFlags" /> parameter
            </summary>
      <param name="flags">the fields to fix</param>
      <remarks>
        <para>
            Only fields specified in the <paramref name="flags" /> will be fixed.
            Fields will not be fixed if they have previously been fixed.
            It is not possible to 'unfix' a field.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.LookupProperty(System.String)">
      <summary>
            Lookup a composite property in this event
            </summary>
      <param name="key">the key for the property to lookup</param>
      <returns>the value for the property</returns>
      <remarks>
        <para>
            This event has composite properties that combine together properties from
            several different contexts in the following order:
            <list type="definition"><item><term>this events properties</term><description>
            		This event has <see cref="P:log4net.Core.LoggingEvent.Properties" /> that can be set. These 
            		properties are specific to this event only.
            		</description></item><item><term>the thread properties</term><description>
            		The <see cref="P:log4net.ThreadContext.Properties" /> that are set on the current
            		thread. These properties are shared by all events logged on this thread.
            		</description></item><item><term>the global properties</term><description>
            		The <see cref="P:log4net.GlobalContext.Properties" /> that are set globally. These 
            		properties are shared by all the threads in the AppDomain.
            		</description></item></list></para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LoggingEvent.GetProperties">
      <summary>
            Get all the composite properties in this event
            </summary>
      <returns>the <see cref="T:log4net.Util.PropertiesDictionary" /> containing all the properties</returns>
      <remarks>
        <para>
            See <see cref="M:log4net.Core.LoggingEvent.LookupProperty(System.String)" /> for details of the composite properties 
            stored by the event.
            </para>
        <para>
            This method returns a single <see cref="T:log4net.Util.PropertiesDictionary" /> containing all the
            properties defined for this event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.StartTime">
      <summary>
            Gets the time when the current process started.
            </summary>
      <value>
            This is the time when this process started.
            </value>
      <remarks>
        <para>
            The TimeStamp is stored in the local time zone for this computer.
            </para>
        <para>
            Tries to get the start time for the current process.
            Failing that it returns the time of the first call to
            this property.
            </para>
        <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating and therefore
            without the process start time being reset.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Level">
      <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </summary>
      <value>
            The <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </value>
      <remarks>
        <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.Level" /> of the logging event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.TimeStamp">
      <summary>
            Gets the time of the logging event.
            </summary>
      <value>
            The time of the logging event.
            </value>
      <remarks>
        <para>
            The TimeStamp is stored in the local time zone for this computer.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.LoggerName">
      <summary>
            Gets the name of the logger that logged the event.
            </summary>
      <value>
            The name of the logger that logged the event.
            </value>
      <remarks>
        <para>
            Gets the name of the logger that logged the event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.LocationInformation">
      <summary>
            Gets the location information for this logging event.
            </summary>
      <value>
            The location information for this logging event.
            </value>
      <remarks>
        <para>
            The collected information is cached for future use.
            </para>
        <para>
            See the <see cref="T:log4net.Core.LocationInfo" /> class for more information on
            supported frameworks and the different behavior in Debug and
            Release builds.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.MessageObject">
      <summary>
            Gets the message object used to initialize this event.
            </summary>
      <value>
            The message object used to initialize this event.
            </value>
      <remarks>
        <para>
            Gets the message object used to initialize this event.
            Note that this event may not have a valid message object.
            If the event is serialized the message object will not 
            be transferred. To get the text of the message the
            <see cref="P:log4net.Core.LoggingEvent.RenderedMessage" /> property must be used 
            not this property.
            </para>
        <para>
            If there is no defined message object for this event then
            null will be returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.ExceptionObject">
      <summary>
            Gets the exception object used to initialize this event.
            </summary>
      <value>
            The exception object used to initialize this event.
            </value>
      <remarks>
        <para>
            Gets the exception object used to initialize this event.
            Note that this event may not have a valid exception object.
            If the event is serialized the exception object will not 
            be transferred. To get the text of the exception the
            <see cref="M:log4net.Core.LoggingEvent.GetExceptionString" /> method must be used 
            not this property.
            </para>
        <para>
            If there is no defined exception object for this event then
            null will be returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Repository">
      <summary>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this event was created in.
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this event was created in.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.RenderedMessage">
      <summary>
            Gets the message, rendered through the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </summary>
      <value>
            The message rendered through the <see cref="P:log4net.Repository.ILoggerRepository.RendererMap" />.
            </value>
      <remarks>
        <para>
            The collected information is cached for future use.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.ThreadName">
      <summary>
            Gets the name of the current thread.  
            </summary>
      <value>
            The name of the current thread, or the thread ID when 
            the name is not available.
            </value>
      <remarks>
        <para>
            The collected information is cached for future use.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.UserName">
      <summary>
            Gets the name of the current user.
            </summary>
      <value>
            The name of the current user, or <c>NOT AVAILABLE</c> when the 
            underlying runtime has no support for retrieving the name of the 
            current user.
            </value>
      <remarks>
        <para>
            Calls <c>WindowsIdentity.GetCurrent().Name</c> to get the name of
            the current windows user.
            </para>
        <para>
            To improve performance, we could cache the string representation of 
            the name, and reuse that as long as the identity stayed constant.  
            Once the identity changed, we would need to re-assign and re-render 
            the string.
            </para>
        <para>
            However, the <c>WindowsIdentity.GetCurrent()</c> call seems to 
            return different objects every time, so the current implementation 
            doesn't do this type of caching.
            </para>
        <para>
            Timing for these operations:
            </para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Results</description>
          </listheader>
          <item>
            <term>
              <c>WindowsIdentity.GetCurrent()</c>
            </term>
            <description>10000 loops, 00:00:00.2031250 seconds</description>
          </item>
          <item>
            <term>
              <c>WindowsIdentity.GetCurrent().Name</c>
            </term>
            <description>10000 loops, 00:00:08.0468750 seconds</description>
          </item>
        </list>
        <para>
            This means we could speed things up almost 40 times by caching the 
            value of the <c>WindowsIdentity.GetCurrent().Name</c> property, since 
            this takes (8.04-0.20) = 7.84375 seconds.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Identity">
      <summary>
            Gets the identity of the current thread principal.
            </summary>
      <value>
            The string name of the identity of the current thread principal.
            </value>
      <remarks>
        <para>
            Calls <c>System.Threading.Thread.CurrentPrincipal.Identity.Name</c> to get
            the name of the current thread principal.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Domain">
      <summary>
            Gets the AppDomain friendly name.
            </summary>
      <value>
            The AppDomain friendly name.
            </value>
      <remarks>
        <para>
            Gets the AppDomain friendly name.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Properties">
      <summary>
            Additional event specific properties.
            </summary>
      <value>
            Additional event specific properties.
            </value>
      <remarks>
        <para>
            A logger or an appender may attach additional
            properties to specific events. These properties
            have a string key and an object value.
            </para>
        <para>
            This property is for events that have been added directly to
            this event. The aggregate properties (which include these
            event properties) can be retrieved using <see cref="M:log4net.Core.LoggingEvent.LookupProperty(System.String)" />
            and <see cref="M:log4net.Core.LoggingEvent.GetProperties" />.
            </para>
        <para>
            Once the properties have been fixed <see cref="P:log4net.Core.LoggingEvent.Fix" /> this property
            returns the combined cached properties. This ensures that updates to
            this property are always reflected in the underlying storage. When
            returning the combined properties there may be more keys in the
            Dictionary than expected.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LoggingEvent.Fix">
      <summary>
            The fixed fields in this event
            </summary>
      <value>
            The set of fields that are fixed in this event
            </value>
      <remarks>
        <para>
            Fields will not be fixed if they have previously been fixed.
            It is not possible to 'unfix' a field.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.ILog">
      <summary>
            The ILog interface is use by application to log messages into
            the log4net framework.
            </summary>
      <remarks>
        <para>
            Use the <see cref="T:log4net.LogManager" /> to obtain logger instances
            that implement this interface. The <see cref="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.Type)" />
            static method is used to get logger instances.
            </para>
        <para>
            This class contains methods for logging at different levels and also
            has properties for determining if those logging levels are
            enabled in the current configuration.
            </para>
        <para>
            This interface can be implemented in different ways. This documentation
            specifies reasonable behavior that a caller can expect from the actual
            implementation, however different implementations reserve the right to
            do things differently.
            </para>
      </remarks>
      <example>Simple example of logging messages
            <code lang="C#">
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code></example>
      <seealso cref="T:log4net.LogManager" />
      <seealso cref="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.Type)" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.ILog.Debug(System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.</overloads>
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>DEBUG</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Debug" /> level. If this logger is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Debug(System.Object,System.Exception)" /> form instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.Debug(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.ILog.Debug(System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.DebugFormat(System.String,System.Object[])">
      <overloads>Log a formatted string with the <see cref="F:log4net.Core.Level.Debug" /> level.</overloads>
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Debug(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.DebugFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Debug(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.DebugFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Debug(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.DebugFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Debug(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Debug(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="M:log4net.ILog.Info(System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Info" /> level.</overloads>
      <summary>
            Logs a message object with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <remarks>
        <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Info" /> level. If this logger is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Info(System.Object,System.Exception)" /> form instead.
            </para>
      </remarks>
      <param name="message">The message object to log.</param>
      <seealso cref="M:log4net.ILog.Info(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.Info(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>INFO</c> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.ILog.Info(System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.InfoFormat(System.String,System.Object[])">
      <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.</overloads>
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Info(System.Object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.InfoFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Info(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.InfoFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Info(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.InfoFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Info(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Info(System.Object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsInfoEnabled" />
    </member>
    <member name="M:log4net.ILog.Warn(System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.</overloads>
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <remarks>
        <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Warn" /> level. If this logger is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Warn(System.Object,System.Exception)" /> form instead.
            </para>
      </remarks>
      <param name="message">The message object to log.</param>
      <seealso cref="M:log4net.ILog.Warn(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.Warn(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.ILog.Warn(System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.WarnFormat(System.String,System.Object[])">
      <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.</overloads>
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Warn(System.Object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.WarnFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Warn(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.WarnFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Warn(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.WarnFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Warn(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Warn(System.Object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsWarnEnabled" />
    </member>
    <member name="M:log4net.ILog.Error(System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level.</overloads>
      <summary>
            Logs a message object with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Error" /> level. If this logger is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Error(System.Object,System.Exception)" /> form instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.Error(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Error" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.ILog.Error(System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object[])">
      <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.</overloads>
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Error(System.Object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Error(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Error(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Error(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Error(System.Object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsErrorEnabled" />
    </member>
    <member name="M:log4net.ILog.Fatal(System.Object)">
      <overloads>Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.</overloads>
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <remarks>
        <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by comparing the level of this logger with the 
            <see cref="F:log4net.Core.Level.Fatal" /> level. If this logger is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.ILog.Fatal(System.Object,System.Exception)" /> form instead.
            </para>
      </remarks>
      <param name="message">The message object to log.</param>
      <seealso cref="M:log4net.ILog.Fatal(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.Fatal(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            See the <see cref="M:log4net.ILog.Fatal(System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.FatalFormat(System.String,System.Object[])">
      <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.</overloads>
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Fatal(System.Object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.FatalFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Fatal(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.FatalFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Fatal(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.FatalFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Fatal(System.Object,System.Exception)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="M:log4net.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:System.String.Format(System.String,System.Object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.ILog.Fatal(System.Object)" />
            methods instead.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object,System.Exception)" />
      <seealso cref="P:log4net.ILog.IsFatalEnabled" />
    </member>
    <member name="P:log4net.ILog.IsDebugEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Debug" /> events, <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            This function is intended to lessen the computational cost of
            disabled log debug statements.
            </para>
        <para> For some ILog interface <c>log</c>, when you write:</para>
        <code lang="C#">
            log.Debug("This is entry number: " + i );
            </code>
        <para>
            You incur the cost constructing the message, string construction and concatenation in
            this case, regardless of whether the message is logged or not.
            </para>
        <para>
            If you are worried about speed (who isn't), then you should write:
            </para>
        <code lang="C#">
            if (log.IsDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
        <para>
            This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>log</c>. On
            the other hand, if the <c>log</c> is debug enabled, you
            will incur the cost of evaluating whether the logger is debug
            enabled twice. Once in <see cref="P:log4net.ILog.IsDebugEnabled" /> and once in
            the <see cref="M:log4net.ILog.Debug(System.Object)" />.  This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it
            takes to actually log. This is the preferred style of logging.
            </para>
        <para>Alternatively if your logger is available statically then the is debug
            enabled state can be stored in a static variable like this:
            </para>
        <code lang="C#">
            private static readonly bool isDebugEnabled = log.IsDebugEnabled;
            </code>
        <para>
            Then when you come to log you can write:
            </para>
        <code lang="C#">
            if (isDebugEnabled)
            { 
                log.Debug("This is entry number: " + i );
            }
            </code>
        <para>
            This way the debug enabled state is only queried once
            when the class is loaded. Using a <c>private static readonly</c>
            variable is the most efficient because it is a run time constant
            and can be heavily optimized by the JIT compiler.
            </para>
        <para>
            Of course if you use a static readonly variable to
            hold the enabled state of the logger then you cannot
            change the enabled state at runtime to vary the logging
            that is produced. You have to decide if you need absolute
            speed or runtime flexibility.
            </para>
      </remarks>
      <seealso cref="M:log4net.ILog.Debug(System.Object)" />
      <seealso cref="M:log4net.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])" />
    </member>
    <member name="P:log4net.ILog.IsInfoEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Info" /> events, <c>false</c> otherwise.
            </value>
      <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
      <seealso cref="M:log4net.ILog.Info(System.Object)" />
      <seealso cref="M:log4net.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="P:log4net.ILog.IsWarnEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Warn" /> events, <c>false</c> otherwise.
            </value>
      <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
      <seealso cref="M:log4net.ILog.Warn(System.Object)" />
      <seealso cref="M:log4net.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="P:log4net.ILog.IsErrorEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Error" /> events, <c>false</c> otherwise.
            </value>
      <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
      <seealso cref="M:log4net.ILog.Error(System.Object)" />
      <seealso cref="M:log4net.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="P:log4net.ILog.IsFatalEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <see cref="F:log4net.Core.Level.Fatal" /> events, <c>false</c> otherwise.
            </value>
      <remarks>
            For more information see <see cref="P:log4net.ILog.IsDebugEnabled" />.
            </remarks>
      <seealso cref="M:log4net.ILog.Fatal(System.Object)" />
      <seealso cref="M:log4net.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])" />
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="T:log4net.Core.LogImpl">
      <summary>
            Implementation of <see cref="T:log4net.ILog" /> wrapper interface.
            </summary>
      <remarks>
        <para>
            This implementation of the <see cref="T:log4net.ILog" /> interface
            forwards to the <see cref="T:log4net.Core.ILogger" /> held by the base class.
            </para>
        <para>
            This logger has methods to allow the caller to log at the following
            levels:
            </para>
        <list type="definition">
          <item>
            <term>DEBUG</term>
            <description>
                The <see cref="M:log4net.Core.LogImpl.Debug(System.Object)" /> and <see cref="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object[])" /> methods log messages
                at the <c>DEBUG</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Debug" />. The <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" />
                property tests if this level is enabled for logging.
                </description>
          </item>
          <item>
            <term>INFO</term>
            <description>
                The <see cref="M:log4net.Core.LogImpl.Info(System.Object)" /> and <see cref="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object[])" /> methods log messages
                at the <c>INFO</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Info" />. The <see cref="P:log4net.Core.LogImpl.IsInfoEnabled" />
                property tests if this level is enabled for logging.
                </description>
          </item>
          <item>
            <term>WARN</term>
            <description>
                The <see cref="M:log4net.Core.LogImpl.Warn(System.Object)" /> and <see cref="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object[])" /> methods log messages
                at the <c>WARN</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Warn" />. The <see cref="P:log4net.Core.LogImpl.IsWarnEnabled" />
                property tests if this level is enabled for logging.
                </description>
          </item>
          <item>
            <term>ERROR</term>
            <description>
                The <see cref="M:log4net.Core.LogImpl.Error(System.Object)" /> and <see cref="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object[])" /> methods log messages
                at the <c>ERROR</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Error" />. The <see cref="P:log4net.Core.LogImpl.IsErrorEnabled" />
                property tests if this level is enabled for logging.
                </description>
          </item>
          <item>
            <term>FATAL</term>
            <description>
                The <see cref="M:log4net.Core.LogImpl.Fatal(System.Object)" /> and <see cref="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object[])" /> methods log messages
                at the <c>FATAL</c> level. That is the level with that name defined in the
                repositories <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" />. The default value
                for this level is <see cref="F:log4net.Core.Level.Fatal" />. The <see cref="P:log4net.Core.LogImpl.IsFatalEnabled" />
                property tests if this level is enabled for logging.
                </description>
          </item>
        </list>
        <para>
            The values for these levels and their semantic meanings can be changed by 
            configuring the <see cref="P:log4net.Repository.ILoggerRepository.LevelMap" /> for the repository.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.LogImpl.ThisDeclaringType">
      <summary>
            The fully qualified name of this declaring type not the type of any subclass.
            </summary>
    </member>
    <member name="M:log4net.Core.LogImpl.#ctor(log4net.Core.ILogger)">
      <summary>
            Construct a new wrapper for the specified logger.
            </summary>
      <param name="logger">The logger to wrap.</param>
      <remarks>
        <para>
            Construct a new wrapper for the specified logger.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.ReloadLevels(log4net.Repository.ILoggerRepository)">
      <summary>
            Virtual method called when the configuration of the repository changes
            </summary>
      <param name="repository">the repository holding the levels</param>
      <remarks>
        <para>
            Virtual method called when the configuration of the repository changes
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Debug(System.Object)">
      <summary>
            Logs a message object with the <c>DEBUG</c> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>DEBUG</c>
            enabled by comparing the level of this logger with the 
            <c>DEBUG</c> level. If this logger is
            <c>DEBUG</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Core.LogImpl.Debug(System.Object,System.Exception)" /> form instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Debug(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>DEBUG</c> level
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Logs a message object with the <c>DEBUG</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> passed
            as a parameter.
            </para>
        <para>
            See the <see cref="M:log4net.Core.LogImpl.Debug(System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.Core.LogImpl.Debug(System.Object)" />
    </member>
    <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.DebugFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Debug(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.DebugFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Debug(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.DebugFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Debug(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.DebugFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.DebugFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Debug(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>DEBUG</c> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Debug(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Info(System.Object)">
      <summary>
            Logs a message object with the <c>INFO</c> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>INFO</c>
            enabled by comparing the level of this logger with the 
            <c>INFO</c> level. If this logger is
            <c>INFO</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger 
            and also higher in the hierarchy depending on the value of 
            the additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> 
            to this method will print the name of the <see cref="T:System.Exception" /> 
            but no stack trace. To print a stack trace use the 
            <see cref="M:log4net.Core.LogImpl.Info(System.Object,System.Exception)" /> form instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Info(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>INFO</c> level.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Logs a message object with the <c>INFO</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
        <para>
            See the <see cref="M:log4net.Core.LogImpl.Info(System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.Core.LogImpl.Info(System.Object)" />
    </member>
    <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.InfoFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Info(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.InfoFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Info(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.InfoFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Info(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.InfoFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.InfoFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Info(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>INFO</c> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Info(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Warn(System.Object)">
      <summary>
            Logs a message object with the <c>WARN</c> level.
            </summary>
      <param name="message">the message object to log</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>WARN</c>
            enabled by comparing the level of this logger with the 
            <c>WARN</c> level. If this logger is
            <c>WARN</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> to this
            method will print the name of the <see cref="T:System.Exception" /> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Core.LogImpl.Warn(System.Object,System.Exception)" /> form instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Warn(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>WARN</c> level
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Logs a message object with the <c>WARN</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
        <para>
            See the <see cref="M:log4net.Core.LogImpl.Warn(System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.Core.LogImpl.Warn(System.Object)" />
    </member>
    <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.WarnFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Warn(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.WarnFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Warn(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.WarnFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Warn(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.WarnFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.WarnFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Warn(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>WARN</c> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Warn(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Error(System.Object)">
      <summary>
            Logs a message object with the <c>ERROR</c> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>ERROR</c>
            enabled by comparing the level of this logger with the 
            <c>ERROR</c> level. If this logger is
            <c>ERROR</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> to this
            method will print the name of the <see cref="T:System.Exception" /> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Core.LogImpl.Error(System.Object,System.Exception)" /> form instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Error(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>ERROR</c> level
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Logs a message object with the <c>ERROR</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
        <para>
            See the <see cref="M:log4net.Core.LogImpl.Error(System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.Core.LogImpl.Error(System.Object)" />
    </member>
    <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Error(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Error(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Error(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.ErrorFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Error(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>ERROR</c> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Error(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Fatal(System.Object)">
      <summary>
            Logs a message object with the <c>FATAL</c> level.
            </summary>
      <param name="message">The message object to log.</param>
      <remarks>
        <para>
            This method first checks if this logger is <c>FATAL</c>
            enabled by comparing the level of this logger with the 
            <c>FATAL</c> level. If this logger is
            <c>FATAL</c> enabled, then it converts the message object
            (passed as parameter) to a string by invoking the appropriate
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />. It then 
            proceeds to call all the registered appenders in this logger and 
            also higher in the hierarchy depending on the value of the 
            additivity flag.
            </para>
        <para>
          <b>WARNING</b> Note that passing an <see cref="T:System.Exception" /> to this
            method will print the name of the <see cref="T:System.Exception" /> but no
            stack trace. To print a stack trace use the 
            <see cref="M:log4net.Core.LogImpl.Fatal(System.Object,System.Exception)" /> form instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.Fatal(System.Object,System.Exception)">
      <summary>
            Logs a message object with the <c>FATAL</c> level
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Logs a message object with the <c>FATAL</c> level including
            the stack trace of the <see cref="T:System.Exception" /><paramref name="exception" /> 
            passed as a parameter.
            </para>
        <para>
            See the <see cref="M:log4net.Core.LogImpl.Fatal(System.Object)" /> form for more detailed information.
            </para>
      </remarks>
      <seealso cref="M:log4net.Core.LogImpl.Fatal(System.Object)" />
    </member>
    <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.FatalFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Fatal(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object)">
      <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.FatalFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Fatal(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.FatalFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Fatal(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.FatalFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
      <param name="format">A String containing zero or more format items</param>
      <param name="arg0">An Object to format</param>
      <param name="arg1">An Object to format</param>
      <param name="arg2">An Object to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            The string is formatted using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
            format provider. To specify a localized provider use the
            <see cref="M:log4net.Core.LogImpl.FatalFormat(System.IFormatProvider,System.String,System.Object[])" /> method.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Fatal(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Logs a formatted message string with the <c>FATAL</c> level.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
      <param name="format">A String containing zero or more format items</param>
      <param name="args">An Object array containing zero or more objects to format</param>
      <remarks>
        <para>
            The message is formatted using the <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" /> method. See
            <c>String.Format</c> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
        <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:log4net.Core.LogImpl.Fatal(System.Object)" />
            methods instead.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.LogImpl.LoggerRepositoryConfigurationChanged(System.Object,System.EventArgs)">
      <summary>
            Event handler for the <see cref="E:log4net.Repository.ILoggerRepository.ConfigurationChanged" /> event
            </summary>
      <param name="sender">the repository</param>
      <param name="e">Empty</param>
    </member>
    <member name="P:log4net.Core.LogImpl.IsDebugEnabled">
      <summary>
            Checks if this logger is enabled for the <c>DEBUG</c>
            level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <c>DEBUG</c> events,
            <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            This function is intended to lessen the computational cost of
            disabled log debug statements.
            </para>
        <para>
            For some <c>log</c> Logger object, when you write:
            </para>
        <code lang="C#">
            log.Debug("This is entry number: " + i );
            </code>
        <para>
            You incur the cost constructing the message, concatenation in
            this case, regardless of whether the message is logged or not.
            </para>
        <para>
            If you are worried about speed, then you should write:
            </para>
        <code lang="C#">
            if (log.IsDebugEnabled())
            { 
             log.Debug("This is entry number: " + i );
            }
            </code>
        <para>
            This way you will not incur the cost of parameter
            construction if debugging is disabled for <c>log</c>. On
            the other hand, if the <c>log</c> is debug enabled, you
            will incur the cost of evaluating whether the logger is debug
            enabled twice. Once in <c>IsDebugEnabled</c> and once in
            the <c>Debug</c>.  This is an insignificant overhead
            since evaluating a logger takes about 1% of the time it
            takes to actually log.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.LogImpl.IsInfoEnabled">
      <summary>
            Checks if this logger is enabled for the <c>INFO</c> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <c>INFO</c> events,
            <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples 
            of using this method.
            </para>
      </remarks>
      <seealso cref="P:log4net.Core.LogImpl.IsDebugEnabled" />
    </member>
    <member name="P:log4net.Core.LogImpl.IsWarnEnabled">
      <summary>
            Checks if this logger is enabled for the <c>WARN</c> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <c>WARN</c> events,
            <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples 
            of using this method.
            </para>
      </remarks>
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="P:log4net.Core.LogImpl.IsErrorEnabled">
      <summary>
            Checks if this logger is enabled for the <c>ERROR</c> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <c>ERROR</c> events,
            <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples of using this method.
            </para>
      </remarks>
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="P:log4net.Core.LogImpl.IsFatalEnabled">
      <summary>
            Checks if this logger is enabled for the <c>FATAL</c> level.
            </summary>
      <value>
        <c>true</c> if this logger is enabled for <c>FATAL</c> events,
            <c>false</c> otherwise.
            </value>
      <remarks>
        <para>
            See <see cref="P:log4net.Core.LogImpl.IsDebugEnabled" /> for more information and examples of using this method.
            </para>
      </remarks>
      <seealso cref="P:log4net.ILog.IsDebugEnabled" />
    </member>
    <member name="T:log4net.Core.SecurityContext">
      <summary>
            A SecurityContext used by log4net when interacting with protected resources
            </summary>
      <remarks>
        <para>
            A SecurityContext used by log4net when interacting with protected resources
            for example with operating system services. This can be used to impersonate
            a principal that has been granted privileges on the system resources.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Core.SecurityContext.Impersonate(System.Object)">
      <summary>
            Impersonate this SecurityContext
            </summary>
      <param name="state">State supplied by the caller</param>
      <returns>An <see cref="T:System.IDisposable" /> instance that will
            revoke the impersonation of this SecurityContext, or <c>null</c></returns>
      <remarks>
        <para>
            Impersonate this security context. Further calls on the current
            thread should now be made in the security context provided
            by this object. When the <see cref="T:System.IDisposable" /> result 
            <see cref="M:System.IDisposable.Dispose" /> method is called the security
            context of the thread should be reverted to the state it was in
            before <see cref="M:log4net.Core.SecurityContext.Impersonate(System.Object)" /> was called.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.SecurityContextProvider">
      <summary>
            The <see cref="T:log4net.Core.SecurityContextProvider" /> providers default <see cref="T:log4net.Core.SecurityContext" /> instances.
            </summary>
      <remarks>
        <para>
            A configured component that interacts with potentially protected system
            resources uses a <see cref="T:log4net.Core.SecurityContext" /> to provide the elevated
            privileges required. If the <see cref="T:log4net.Core.SecurityContext" /> object has
            been not been explicitly provided to the component then the component
            will request one from this <see cref="T:log4net.Core.SecurityContextProvider" />.
            </para>
        <para>
            By default the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> is
            an instance of <see cref="T:log4net.Core.SecurityContextProvider" /> which returns only
            <see cref="T:log4net.Util.NullSecurityContext" /> objects. This is a reasonable default
            where the privileges required are not know by the system.
            </para>
        <para>
            This default behavior can be overridden by subclassing the <see cref="T:log4net.Core.SecurityContextProvider" />
            and overriding the <see cref="M:log4net.Core.SecurityContextProvider.CreateSecurityContext(System.Object)" /> method to return
            the desired <see cref="T:log4net.Core.SecurityContext" /> objects. The default provider
            can be replaced by programmatically setting the value of the 
            <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider" /> property.
            </para>
        <para>
            An alternative is to use the <c>log4net.Config.SecurityContextProviderAttribute</c>
            This attribute can be applied to an assembly in the same way as the
            <c>log4net.Config.XmlConfiguratorAttribute"</c>. The attribute takes
            the type to use as the <see cref="T:log4net.Core.SecurityContextProvider" /> as an argument.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Core.SecurityContextProvider.s_defaultProvider">
      <summary>
            The default provider
            </summary>
    </member>
    <member name="M:log4net.Core.SecurityContextProvider.#ctor">
      <summary>
            Protected default constructor to allow subclassing
            </summary>
      <remarks>
        <para>
            Protected default constructor to allow subclassing
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.SecurityContextProvider.CreateSecurityContext(System.Object)">
      <summary>
            Create a SecurityContext for a consumer
            </summary>
      <param name="consumer">The consumer requesting the SecurityContext</param>
      <returns>An impersonation context</returns>
      <remarks>
        <para>
            The default implementation is to return a <see cref="T:log4net.Util.NullSecurityContext" />.
            </para>
        <para>
            Subclasses should override this method to provide their own
            behavior.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Core.SecurityContextProvider.DefaultProvider">
      <summary>
            Gets or sets the default SecurityContextProvider
            </summary>
      <value>
            The default SecurityContextProvider
            </value>
      <remarks>
        <para>
            The default provider is used by configured components that
            require a <see cref="T:log4net.Core.SecurityContext" /> and have not had one
            given to them.
            </para>
        <para>
            By default this is an instance of <see cref="T:log4net.Core.SecurityContextProvider" />
            that returns <see cref="T:log4net.Util.NullSecurityContext" /> objects.
            </para>
        <para>
            The default provider can be set programmatically by setting
            the value of this property to a sub class of <see cref="T:log4net.Core.SecurityContextProvider" />
            that has the desired behavior.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.WrapperCreationHandler">
      <summary>
            Delegate used to handle creation of new wrappers.
            </summary>
      <param name="logger">The logger to wrap in a wrapper.</param>
      <remarks>
        <para>
            Delegate used to handle creation of new wrappers. This delegate
            is called from the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)" />
            method to construct the wrapper for the specified logger.
            </para>
        <para>
            The delegate to use is supplied to the <see cref="T:log4net.Core.WrapperMap" />
            constructor.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Core.WrapperMap">
      <summary>
            Maps between logger objects and wrapper objects.
            </summary>
      <remarks>
        <para>
            This class maintains a mapping between <see cref="T:log4net.Core.ILogger" /> objects and
            <see cref="T:log4net.Core.ILoggerWrapper" /> objects. Use the <see cref="M:log4net.Core.WrapperMap.GetWrapper(log4net.Core.ILogger)" /> method to 
            lookup the <see cref="T:log4net.Core.ILoggerWrapper" /> for the specified <see cref="T:log4net.Core.ILogger" />.
            </para>
        <para>
            New wrapper instances are created by the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)" />
            method. The default behavior is for this method to delegate construction
            of the wrapper to the <see cref="T:log4net.Core.WrapperCreationHandler" /> delegate supplied
            to the constructor. This allows specialization of the behavior without
            requiring subclassing of this type.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Core.WrapperMap.m_repositories">
      <summary>
            Map of logger repositories to hashtables of ILogger to ILoggerWrapper mappings
            </summary>
    </member>
    <member name="F:log4net.Core.WrapperMap.m_createWrapperHandler">
      <summary>
            The handler to use to create the extension wrapper objects.
            </summary>
    </member>
    <member name="F:log4net.Core.WrapperMap.m_shutdownHandler">
      <summary>
            Internal reference to the delegate used to register for repository shutdown events.
            </summary>
    </member>
    <member name="M:log4net.Core.WrapperMap.#ctor(log4net.Core.WrapperCreationHandler)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Core.WrapperMap" /></summary>
      <param name="createWrapperHandler">The handler to use to create the wrapper objects.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Core.WrapperMap" /> class with 
            the specified handler to create the wrapper objects.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.WrapperMap.GetWrapper(log4net.Core.ILogger)">
      <summary>
            Gets the wrapper object for the specified logger.
            </summary>
      <returns>The wrapper object for the specified logger</returns>
      <remarks>
        <para>
            If the logger is null then the corresponding wrapper is null.
            </para>
        <para>
            Looks up the wrapper it it has previously been requested and
            returns it. If the wrapper has never been requested before then
            the <see cref="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)" /> virtual method is
            called.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.WrapperMap.CreateNewWrapperObject(log4net.Core.ILogger)">
      <summary>
            Creates the wrapper object for the specified logger.
            </summary>
      <param name="logger">The logger to wrap in a wrapper.</param>
      <returns>The wrapper object for the logger.</returns>
      <remarks>
        <para>
            This implementation uses the <see cref="T:log4net.Core.WrapperCreationHandler" />
            passed to the constructor to create the wrapper. This method
            can be overridden in a subclass.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.WrapperMap.RepositoryShutdown(log4net.Repository.ILoggerRepository)">
      <summary>
            Called when a monitored repository shutdown event is received.
            </summary>
      <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that is shutting down</param>
      <remarks>
        <para>
            This method is called when a <see cref="T:log4net.Repository.ILoggerRepository" /> that this
            <see cref="T:log4net.Core.WrapperMap" /> is holding loggers for has signaled its shutdown
            event <see cref="E:log4net.Repository.ILoggerRepository.ShutdownEvent" />. The default
            behavior of this method is to release the references to the loggers
            and their wrappers generated for this repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Core.WrapperMap.ILoggerRepository_Shutdown(System.Object,System.EventArgs)">
      <summary>
            Event handler for repository shutdown event.
            </summary>
      <param name="sender">The sender of the event.</param>
      <param name="e">The event args.</param>
    </member>
    <member name="P:log4net.Core.WrapperMap.Repositories">
      <summary>
            Gets the map of logger repositories.
            </summary>
      <value>
            Map of logger repositories.
            </value>
      <remarks>
        <para>
            Gets the hashtable that is keyed on <see cref="T:log4net.Repository.ILoggerRepository" />. The
            values are hashtables keyed on <see cref="T:log4net.Core.ILogger" /> with the
            value being the corresponding <see cref="T:log4net.Core.ILoggerWrapper" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.DateFormatter.IDateFormatter">
      <summary>
            Render a <see cref="T:System.DateTime" /> as a string.
            </summary>
      <remarks>
        <para>
            Interface to abstract the rendering of a <see cref="T:System.DateTime" />
            instance into a string.
            </para>
        <para>
            The <see cref="M:log4net.DateFormatter.IDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)" /> method is used to render the
            date to a text writer.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.DateFormatter.IDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
      <summary>
            Formats the specified date as a string.
            </summary>
      <param name="dateToFormat">The date to format.</param>
      <param name="writer">The writer to write to.</param>
      <remarks>
        <para>
            Format the <see cref="T:System.DateTime" /> as a string and write it
            to the <see cref="T:System.IO.TextWriter" /> provided.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.DateFormatter.AbsoluteTimeDateFormatter">
      <summary>
            Formats a <see cref="T:System.DateTime" /> as <c>"HH:mm:ss,fff"</c>.
            </summary>
      <remarks>
        <para>
            Formats a <see cref="T:System.DateTime" /> in the format <c>"HH:mm:ss,fff"</c> for example, <c>"15:49:37,459"</c>.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.AbsoluteTimeDateFormat">
      <summary>
            String constant used to specify AbsoluteTimeDateFormat in layouts. Current value is <b>ABSOLUTE</b>.
            </summary>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.DateAndTimeDateFormat">
      <summary>
            String constant used to specify DateTimeDateFormat in layouts.  Current value is <b>DATE</b>.
            </summary>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.Iso8601TimeDateFormat">
      <summary>
            String constant used to specify ISO8601DateFormat in layouts. Current value is <b>ISO8601</b>.
            </summary>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeToTheSecond">
      <summary>
            Last stored time with precision up to the second.
            </summary>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeBuf">
      <summary>
            Last stored time with precision up to the second, formatted
            as a string.
            </summary>
    </member>
    <member name="F:log4net.DateFormatter.AbsoluteTimeDateFormatter.s_lastTimeString">
      <summary>
            Last stored time with precision up to the second, formatted
            as a string.
            </summary>
    </member>
    <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
      <summary>
            Renders the date into a string. Format is <c>"HH:mm:ss"</c>.
            </summary>
      <param name="dateToFormat">The date to render into a string.</param>
      <param name="buffer">The string builder to write to.</param>
      <remarks>
        <para>
            Subclasses should override this method to render the date
            into a string using a precision up to the second. This method
            will be called at most once per second and the result will be
            reused if it is needed again during the same second.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
      <summary>
            Renders the date into a string. Format is "HH:mm:ss,fff".
            </summary>
      <param name="dateToFormat">The date to render into a string.</param>
      <param name="writer">The writer to write to.</param>
      <remarks>
        <para>
            Uses the <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" /> method to generate the
            time string up to the seconds and then appends the current
            milliseconds. The results from <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" /> are
            cached and <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" /> is called at most once
            per second.
            </para>
        <para>
            Sub classes should override <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)" />
            rather than <see cref="M:log4net.DateFormatter.AbsoluteTimeDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.DateFormatter.DateTimeDateFormatter">
      <summary>
            Formats a <see cref="T:System.DateTime" /> as <c>"dd MMM yyyy HH:mm:ss,fff"</c></summary>
      <remarks>
        <para>
            Formats a <see cref="T:System.DateTime" /> in the format 
            <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, 
            <c>"06 Nov 1994 15:49:37,459"</c>.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Angelika Schnagl</author>
    </member>
    <member name="F:log4net.DateFormatter.DateTimeDateFormatter.m_dateTimeFormatInfo">
      <summary>
            The format info for the invariant culture.
            </summary>
    </member>
    <member name="M:log4net.DateFormatter.DateTimeDateFormatter.#ctor">
      <summary>
            Default constructor.
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.DateFormatter.DateTimeDateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
      <summary>
            Formats the date without the milliseconds part
            </summary>
      <param name="dateToFormat">The date to format.</param>
      <param name="buffer">The string builder to write to.</param>
      <remarks>
        <para>
            Formats a DateTime in the format <c>"dd MMM yyyy HH:mm:ss"</c>
            for example, <c>"06 Nov 1994 15:49:37"</c>.
            </para>
        <para>
            The base class will append the <c>",fff"</c> milliseconds section.
            This method will only be called at most once per second.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.DateFormatter.Iso8601DateFormatter">
      <summary>
            Formats the <see cref="T:System.DateTime" /> as <c>"yyyy-MM-dd HH:mm:ss,fff"</c>.
            </summary>
      <remarks>
        <para>
            Formats the <see cref="T:System.DateTime" /> specified as a string: <c>"yyyy-MM-dd HH:mm:ss,fff"</c>.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.DateFormatter.Iso8601DateFormatter.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.DateFormatter.Iso8601DateFormatter.FormatDateWithoutMillis(System.DateTime,System.Text.StringBuilder)">
      <summary>
            Formats the date without the milliseconds part
            </summary>
      <param name="dateToFormat">The date to format.</param>
      <param name="buffer">The string builder to write to.</param>
      <remarks>
        <para>
            Formats the date specified as a string: <c>"yyyy-MM-dd HH:mm:ss"</c>.
            </para>
        <para>
            The base class will append the <c>",fff"</c> milliseconds section.
            This method will only be called at most once per second.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.DateFormatter.SimpleDateFormatter">
      <summary>
            Formats the <see cref="T:System.DateTime" /> using the <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> method.
            </summary>
      <remarks>
        <para>
            Formats the <see cref="T:System.DateTime" /> using the <see cref="T:System.DateTime" /><see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> method.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.DateFormatter.SimpleDateFormatter.m_formatString">
      <summary>
            The format string used to format the <see cref="T:System.DateTime" />.
            </summary>
      <remarks>
        <para>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.DateFormatter.SimpleDateFormatter.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="format">The format string.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.DateFormatter.SimpleDateFormatter" /> class 
            with the specified format string.
            </para>
        <para>
            The format string must be compatible with the options
            that can be supplied to <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.DateFormatter.SimpleDateFormatter.FormatDate(System.DateTime,System.IO.TextWriter)">
      <summary>
            Formats the date using <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />.
            </summary>
      <param name="dateToFormat">The date to convert to a string.</param>
      <param name="writer">The writer to write to.</param>
      <remarks>
        <para>
            Uses the date format string supplied to the constructor to call
            the <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> method to format the date.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.IFilter">
      <summary>
            Implement this interface to provide customized logging event filtering
            </summary>
      <remarks>
        <para>
            Users should implement this interface to implement customized logging
            event filtering. Note that <see cref="T:log4net.Repository.Hierarchy.Logger" /> and 
            <see cref="T:log4net.Appender.AppenderSkeleton" />, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.
            </para>
        <para>
            This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" />
            method of each filter is called sequentially, in the order of their 
            addition to the chain.
            </para>
        <para>
            The <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" /> method must return one
            of the integer constants <see cref="F:log4net.Filter.FilterDecision.Deny" />, 
            <see cref="F:log4net.Filter.FilterDecision.Neutral" /> or <see cref="F:log4net.Filter.FilterDecision.Accept" />.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned, then the log event is dropped 
            immediately without consulting with the remaining filters.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Neutral" /> is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behavior is to log all logging events.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned, then the log
            event is logged without consulting the remaining filters.
            </para>
        <para>
            The philosophy of log4net filters is largely inspired from the
            Linux ipchains.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Decide if the logging event should be logged through an appender.
            </summary>
      <param name="loggingEvent">The LoggingEvent to decide upon</param>
      <returns>The decision of the filter</returns>
      <remarks>
        <para>
            If the decision is <see cref="F:log4net.Filter.FilterDecision.Deny" />, then the event will be
            dropped. If the decision is <see cref="F:log4net.Filter.FilterDecision.Neutral" />, then the next
            filter, if any, will be invoked. If the decision is <see cref="F:log4net.Filter.FilterDecision.Accept" /> then
            the event will be logged without consulting with other filters in
            the chain.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.IFilter.Next">
      <summary>
            Property to get and set the next filter
            </summary>
      <value>
            The next filter in the chain
            </value>
      <remarks>
        <para>
            Filters are typically composed into chains. This property allows the next filter in 
            the chain to be accessed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.FilterSkeleton">
      <summary>
            Subclass this type to implement customized logging event filtering
            </summary>
      <remarks>
        <para>
            Users should extend this class to implement customized logging
            event filtering. Note that <see cref="T:log4net.Repository.Hierarchy.Logger" /> and 
            <see cref="T:log4net.Appender.AppenderSkeleton" />, the parent class of all standard
            appenders, have built-in filtering rules. It is suggested that you
            first use and understand the built-in rules before rushing to write
            your own custom filters.
            </para>
        <para>
            This abstract class assumes and also imposes that filters be
            organized in a linear chain. The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)" />
            method of each filter is called sequentially, in the order of their 
            addition to the chain.
            </para>
        <para>
            The <see cref="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)" /> method must return one
            of the integer constants <see cref="F:log4net.Filter.FilterDecision.Deny" />, 
            <see cref="F:log4net.Filter.FilterDecision.Neutral" /> or <see cref="F:log4net.Filter.FilterDecision.Accept" />.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned, then the log event is dropped 
            immediately without consulting with the remaining filters.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Neutral" /> is returned, then the next filter
            in the chain is consulted. If there are no more filters in the
            chain, then the log event is logged. Thus, in the presence of no
            filters, the default behavior is to log all logging events.
            </para>
        <para>
            If the value <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned, then the log
            event is logged without consulting the remaining filters.
            </para>
        <para>
            The philosophy of log4net filters is largely inspired from the
            Linux ipchains.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Filter.FilterSkeleton.m_next">
      <summary>
            Points to the next filter in the filter chain.
            </summary>
      <remarks>
        <para>
            See <see cref="P:log4net.Filter.FilterSkeleton.Next" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Filter.FilterSkeleton.ActivateOptions">
      <summary>
            Initialize the filter with the options set
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Filter.FilterSkeleton.ActivateOptions" /> must be called again.
            </para>
        <para>
            Typically filter's options become active immediately on set, 
            however this method must still be called. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Filter.FilterSkeleton.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Decide if the <see cref="T:log4net.Core.LoggingEvent" /> should be logged through an appender.
            </summary>
      <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> to decide upon</param>
      <returns>The decision of the filter</returns>
      <remarks>
        <para>
            If the decision is <see cref="F:log4net.Filter.FilterDecision.Deny" />, then the event will be
            dropped. If the decision is <see cref="F:log4net.Filter.FilterDecision.Neutral" />, then the next
            filter, if any, will be invoked. If the decision is <see cref="F:log4net.Filter.FilterDecision.Accept" /> then
            the event will be logged without consulting with other filters in
            the chain.
            </para>
        <para>
            This method is marked <c>abstract</c> and must be implemented
            in a subclass.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.FilterSkeleton.Next">
      <summary>
            Property to get and set the next filter
            </summary>
      <value>
            The next filter in the chain
            </value>
      <remarks>
        <para>
            Filters are typically composed into chains. This property allows the next filter in 
            the chain to be accessed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.DenyAllFilter">
      <summary>
            This filter drops all <see cref="T:log4net.Core.LoggingEvent" />. 
            </summary>
      <remarks>
        <para>
            You can add this filter to the end of a filter chain to
            switch from the default "accept all unless instructed otherwise"
            filtering behavior to a "deny all unless instructed otherwise"
            behavior.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Filter.DenyAllFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.DenyAllFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Always returns the integer constant <see cref="F:log4net.Filter.FilterDecision.Deny" /></summary>
      <param name="loggingEvent">the LoggingEvent to filter</param>
      <returns>Always returns <see cref="F:log4net.Filter.FilterDecision.Deny" /></returns>
      <remarks>
        <para>
            Ignores the event being logged and just returns
            <see cref="F:log4net.Filter.FilterDecision.Deny" />. This can be used to change the default filter
            chain behavior from <see cref="F:log4net.Filter.FilterDecision.Accept" /> to <see cref="F:log4net.Filter.FilterDecision.Deny" />. This filter
            should only be used as the last filter in the chain
            as any further filters will be ignored!
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.FilterDecision">
      <summary>
            The return result from <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" /></summary>
      <remarks>
        <para>
            The return result from <see cref="M:log4net.Filter.IFilter.Decide(log4net.Core.LoggingEvent)" /></para>
      </remarks>
    </member>
    <member name="F:log4net.Filter.FilterDecision.Deny">
      <summary>
            The log event must be dropped immediately without 
            consulting with the remaining filters, if any, in the chain.
            </summary>
    </member>
    <member name="F:log4net.Filter.FilterDecision.Neutral">
      <summary>
            This filter is neutral with respect to the log event. 
            The remaining filters, if any, should be consulted for a final decision.
            </summary>
    </member>
    <member name="F:log4net.Filter.FilterDecision.Accept">
      <summary>
            The log event must be logged immediately without 
            consulting with the remaining filters, if any, in the chain.
            </summary>
    </member>
    <member name="T:log4net.Filter.LevelMatchFilter">
      <summary>
            This is a very simple filter based on <see cref="T:log4net.Core.Level" /> matching.
            </summary>
      <remarks>
        <para>
            The filter admits two options <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch" /> and
            <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" />. If there is an exact match between the value
            of the <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch" /> option and the <see cref="T:log4net.Core.Level" /> of the 
            <see cref="T:log4net.Core.LoggingEvent" />, then the <see cref="M:log4net.Filter.LevelMatchFilter.Decide(log4net.Core.LoggingEvent)" /> method returns <see cref="F:log4net.Filter.FilterDecision.Accept" /> in 
            case the <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" /> option value is set
            to <c>true</c>, if it is <c>false</c> then 
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned. If the <see cref="T:log4net.Core.Level" /> does not match then
            the result will be <see cref="F:log4net.Filter.FilterDecision.Neutral" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Filter.LevelMatchFilter.m_acceptOnMatch">
      <summary>
            flag to indicate if the filter should <see cref="F:log4net.Filter.FilterDecision.Accept" /> on a match
            </summary>
    </member>
    <member name="F:log4net.Filter.LevelMatchFilter.m_levelToMatch">
      <summary>
            the <see cref="T:log4net.Core.Level" /> to match against
            </summary>
    </member>
    <member name="M:log4net.Filter.LevelMatchFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.LevelMatchFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Tests if the <see cref="T:log4net.Core.Level" /> of the logging event matches that of the filter
            </summary>
      <param name="loggingEvent">the event to filter</param>
      <returns>see remarks</returns>
      <remarks>
        <para>
            If the <see cref="T:log4net.Core.Level" /> of the event matches the level of the
            filter then the result of the function depends on the
            value of <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" />. If it is true then
            the function will return <see cref="F:log4net.Filter.FilterDecision.Accept" />, it it is false then it
            will return <see cref="F:log4net.Filter.FilterDecision.Deny" />. If the <see cref="T:log4net.Core.Level" /> does not match then
            the result will be <see cref="F:log4net.Filter.FilterDecision.Neutral" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch">
      <summary>
        <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.LevelMatchFilter.LevelToMatch" /></summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Deny" /> the event.
            </para>
        <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LevelMatchFilter.LevelToMatch">
      <summary>
            The <see cref="T:log4net.Core.Level" /> that the filter will match
            </summary>
      <remarks>
        <para>
            The level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent" /> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelMatchFilter.AcceptOnMatch" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.LevelRangeFilter">
      <summary>
            This is a simple filter based on <see cref="T:log4net.Core.Level" /> matching.
            </summary>
      <remarks>
        <para>
            The filter admits three options <see cref="P:log4net.Filter.LevelRangeFilter.LevelMin" /> and <see cref="P:log4net.Filter.LevelRangeFilter.LevelMax" />
            that determine the range of priorities that are matched, and
            <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" />. If there is a match between the range
            of priorities and the <see cref="T:log4net.Core.Level" /> of the <see cref="T:log4net.Core.LoggingEvent" />, then the 
            <see cref="M:log4net.Filter.LevelRangeFilter.Decide(log4net.Core.LoggingEvent)" /> method returns <see cref="F:log4net.Filter.FilterDecision.Accept" /> in case the <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" /> 
            option value is set to <c>true</c>, if it is <c>false</c>
            then <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned. If there is no match, <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Filter.LevelRangeFilter.m_acceptOnMatch">
      <summary>
            Flag to indicate the behavior when matching a <see cref="T:log4net.Core.Level" /></summary>
    </member>
    <member name="F:log4net.Filter.LevelRangeFilter.m_levelMin">
      <summary>
            the minimum <see cref="T:log4net.Core.Level" /> value to match
            </summary>
    </member>
    <member name="F:log4net.Filter.LevelRangeFilter.m_levelMax">
      <summary>
            the maximum <see cref="T:log4net.Core.Level" /> value to match
            </summary>
    </member>
    <member name="M:log4net.Filter.LevelRangeFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.LevelRangeFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Check if the event should be logged.
            </summary>
      <param name="loggingEvent">the logging event to check</param>
      <returns>see remarks</returns>
      <remarks>
        <para>
            If the <see cref="T:log4net.Core.Level" /> of the logging event is outside the range
            matched by this filter then <see cref="F:log4net.Filter.FilterDecision.Deny" />
            is returned. If the <see cref="T:log4net.Core.Level" /> is matched then the value of
            <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" /> is checked. If it is true then
            <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned, otherwise
            <see cref="F:log4net.Filter.FilterDecision.Neutral" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch">
      <summary>
        <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.LevelRangeFilter.LevelMin" /> and <see cref="P:log4net.Filter.LevelRangeFilter.LevelMax" /></summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Neutral" /> the event.
            </para>
        <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LevelRangeFilter.LevelMin">
      <summary>
            Set the minimum matched <see cref="T:log4net.Core.Level" /></summary>
      <remarks>
        <para>
            The minimum level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent" /> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LevelRangeFilter.LevelMax">
      <summary>
            Sets the maximum matched <see cref="T:log4net.Core.Level" /></summary>
      <remarks>
        <para>
            The maximum level that this filter will attempt to match against the 
            <see cref="T:log4net.Core.LoggingEvent" /> level. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LevelRangeFilter.AcceptOnMatch" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.LoggerMatchFilter">
      <summary>
            Simple filter to match a string in the event's logger name.
            </summary>
      <remarks>
        <para>
            The works very similar to the <see cref="T:log4net.Filter.LevelMatchFilter" />. It admits two 
            options <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /> and <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" />. If the 
            <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> of the <see cref="T:log4net.Core.LoggingEvent" /> starts 
            with the value of the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /> option, then the 
            <see cref="M:log4net.Filter.LoggerMatchFilter.Decide(log4net.Core.LoggingEvent)" /> method returns <see cref="F:log4net.Filter.FilterDecision.Accept" /> in 
            case the <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" /> option value is set to <c>true</c>, 
            if it is <c>false</c> then <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
      </remarks>
      <author>Daniel Cazzulino</author>
    </member>
    <member name="F:log4net.Filter.LoggerMatchFilter.m_acceptOnMatch">
      <summary>
            Flag to indicate the behavior when we have a match
            </summary>
    </member>
    <member name="F:log4net.Filter.LoggerMatchFilter.m_loggerToMatch">
      <summary>
            The logger name string to substring match against the event
            </summary>
    </member>
    <member name="M:log4net.Filter.LoggerMatchFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.LoggerMatchFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Check if this filter should allow the event to be logged
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>see remarks</returns>
      <remarks>
        <para>
            The rendered message is matched against the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" />.
            If the <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /> equals the beginning of 
            the incoming <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> (<see cref="M:System.String.StartsWith(System.String)" />)
            then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral" />
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" /> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch">
      <summary>
        <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch" /></summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Deny" /> the event.
            </para>
        <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.LoggerMatchFilter.LoggerToMatch">
      <summary>
            The <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> that the filter will match
            </summary>
      <remarks>
        <para>
            This filter will attempt to match this value against logger name in
            the following way. The match will be done against the beginning of the
            logger name (using <see cref="M:System.String.StartsWith(System.String)" />). The match is
            case sensitive. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.LoggerMatchFilter.AcceptOnMatch" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.StringMatchFilter">
      <summary>
            Simple filter to match a string in the rendered message
            </summary>
      <remarks>
        <para>
            Simple filter to match a string in the rendered message
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Filter.StringMatchFilter.m_acceptOnMatch">
      <summary>
            Flag to indicate the behavior when we have a match
            </summary>
    </member>
    <member name="F:log4net.Filter.StringMatchFilter.m_stringToMatch">
      <summary>
            The string to substring match against the message
            </summary>
    </member>
    <member name="F:log4net.Filter.StringMatchFilter.m_stringRegexToMatch">
      <summary>
            A string regex to match
            </summary>
    </member>
    <member name="F:log4net.Filter.StringMatchFilter.m_regexToMatch">
      <summary>
            A regex object to match (generated from m_stringRegexToMatch)
            </summary>
    </member>
    <member name="M:log4net.Filter.StringMatchFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.StringMatchFilter.ActivateOptions">
      <summary>
            Initialize and precompile the Regex if required
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Filter.StringMatchFilter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Filter.StringMatchFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Check if this filter should allow the event to be logged
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>see remarks</returns>
      <remarks>
        <para>
            The rendered message is matched against the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" />.
            If the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> occurs as a substring within
            the message then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral" />
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" /> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.StringMatchFilter.AcceptOnMatch">
      <summary>
        <see cref="F:log4net.Filter.FilterDecision.Accept" /> when matching <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch" /></summary>
      <remarks>
        <para>
            The <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" /> property is a flag that determines
            the behavior when a matching <see cref="T:log4net.Core.Level" /> is found. If the
            flag is set to true then the filter will <see cref="F:log4net.Filter.FilterDecision.Accept" /> the 
            logging event, otherwise it will <see cref="F:log4net.Filter.FilterDecision.Neutral" /> the event.
            </para>
        <para>
            The default is <c>true</c> i.e. to <see cref="F:log4net.Filter.FilterDecision.Accept" /> the event.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.StringMatchFilter.StringToMatch">
      <summary>
            Sets the static string to match
            </summary>
      <remarks>
        <para>
            The string that will be substring matched against
            the rendered message. If the message contains this
            string then the filter will match. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" />.
            </para>
        <para>
            One of <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch" />
            must be specified.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.StringMatchFilter.RegexToMatch">
      <summary>
            Sets the regular expression to match
            </summary>
      <remarks>
        <para>
            The regular expression pattern that will be matched against
            the rendered message. If the message matches this
            pattern then the filter will match. If a match is found then
            the result depends on the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" />.
            </para>
        <para>
            One of <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> or <see cref="P:log4net.Filter.StringMatchFilter.RegexToMatch" />
            must be specified.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.PropertyFilter">
      <summary>
            Simple filter to match a string an event property
            </summary>
      <remarks>
        <para>
            Simple filter to match a string in the value for a
            specific event property
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Filter.PropertyFilter.m_key">
      <summary>
            The key to use to lookup the string from the event properties
            </summary>
    </member>
    <member name="M:log4net.Filter.PropertyFilter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Filter.PropertyFilter.Decide(log4net.Core.LoggingEvent)">
      <summary>
            Check if this filter should allow the event to be logged
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>see remarks</returns>
      <remarks>
        <para>
            The event property for the <see cref="P:log4net.Filter.PropertyFilter.Key" /> is matched against 
            the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" />.
            If the <see cref="P:log4net.Filter.StringMatchFilter.StringToMatch" /> occurs as a substring within
            the property value then a match will have occurred. If no match occurs
            this function will return <see cref="F:log4net.Filter.FilterDecision.Neutral" />
            allowing other filters to check the event. If a match occurs then
            the value of <see cref="P:log4net.Filter.StringMatchFilter.AcceptOnMatch" /> is checked. If it is
            true then <see cref="F:log4net.Filter.FilterDecision.Accept" /> is returned otherwise
            <see cref="F:log4net.Filter.FilterDecision.Deny" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Filter.PropertyFilter.Key">
      <summary>
            The key to lookup in the event properties and then match against.
            </summary>
      <remarks>
        <para>
            The key name to use to lookup in the properties map of the
            <see cref="T:log4net.Core.LoggingEvent" />. The match will be performed against 
            the value of this property if it exists.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Filter.MdcFilter">
      <summary>
            Simple filter to match a keyed string in the <see cref="T:log4net.MDC" /></summary>
      <remarks>
        <para>
            Simple filter to match a keyed string in the <see cref="T:log4net.MDC" /></para>
        <para>
            As the MDC has been replaced with layered properties the
            <see cref="T:log4net.Filter.PropertyFilter" /> should be used instead.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Filter.NdcFilter">
      <summary>
            Simple filter to match a string in the <see cref="T:log4net.NDC" /></summary>
      <remarks>
        <para>
            Simple filter to match a string in the <see cref="T:log4net.NDC" /></para>
        <para>
            As the MDC has been replaced with named stacks stored in the
            properties collections the <see cref="T:log4net.Filter.PropertyFilter" /> should 
            be used instead.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Filter.NdcFilter.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Sets the <see cref="P:log4net.Filter.PropertyFilter.Key" /> to <c>"NDC"</c>.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternConverter">
      <summary>
            Abstract class that provides the formatting functionality that 
            derived classes need.
            </summary>
      <remarks>
        <para>
            Conversion specifiers in a conversion patterns are parsed to
            individual PatternConverters. Each of which is responsible for
            converting a logging event in a converter specific manner.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.PatternConverter.c_renderBufferSize">
      <summary>
            Initial buffer size
            </summary>
    </member>
    <member name="F:log4net.Util.PatternConverter.c_renderBufferMaxCapacity">
      <summary>
            Maximum buffer size before it is recycled
            </summary>
    </member>
    <member name="F:log4net.Util.PatternConverter.m_option">
      <summary>
            The option string to the converter
            </summary>
    </member>
    <member name="M:log4net.Util.PatternConverter.#ctor">
      <summary>
            Protected constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PatternConverter" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Evaluate this pattern converter and write the output to a writer.
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">The state object on which the pattern converter should be executed.</param>
      <remarks>
        <para>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the appropriate way.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.SetNext(log4net.Util.PatternConverter)">
      <summary>
            Set the next pattern converter in the chains
            </summary>
      <param name="patternConverter">the pattern converter that should follow this converter in the chain</param>
      <returns>the next converter</returns>
      <remarks>
        <para>
            The PatternConverter can merge with its neighbor during this method (or a sub class).
            Therefore the return value may or may not be the value of the argument passed in.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.Format(System.IO.TextWriter,System.Object)">
      <summary>
            Write the pattern converter to the writer with appropriate formatting
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">The state object on which the pattern converter should be executed.</param>
      <remarks>
        <para>
            This method calls <see cref="M:log4net.Util.PatternConverter.Convert(System.IO.TextWriter,System.Object)" /> to allow the subclass to perform
            appropriate conversion of the pattern converter. If formatting options have
            been specified via the <see cref="P:log4net.Util.PatternConverter.FormattingInfo" /> then this method will
            apply those formattings before writing the output.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.SpacePad(System.IO.TextWriter,System.Int32)">
      <summary>
            Fast space padding method.
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> to which the spaces will be appended.</param>
      <param name="length">The number of spaces to be padded.</param>
      <remarks>
        <para>
            Fast space padding method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.WriteDictionary(System.IO.TextWriter,log4net.Repository.ILoggerRepository,System.Collections.IDictionary)">
      <summary>
            Write an dictionary to a <see cref="T:System.IO.TextWriter" /></summary>
      <param name="writer">the writer to write to</param>
      <param name="repository">a <see cref="T:log4net.Repository.ILoggerRepository" /> to use for object conversion</param>
      <param name="value">the value to write to the writer</param>
      <remarks>
        <para>
            Writes the <see cref="T:System.Collections.IDictionary" /> to a writer in the form:
            </para>
        <code>
            {key1=value1, key2=value2, key3=value3}
            </code>
        <para>
            If the <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            is not null then it is used to render the key and value to text, otherwise
            the object's ToString method is called.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternConverter.WriteObject(System.IO.TextWriter,log4net.Repository.ILoggerRepository,System.Object)">
      <summary>
            Write an object to a <see cref="T:System.IO.TextWriter" /></summary>
      <param name="writer">the writer to write to</param>
      <param name="repository">a <see cref="T:log4net.Repository.ILoggerRepository" /> to use for object conversion</param>
      <param name="value">the value to write to the writer</param>
      <remarks>
        <para>
            Writes the Object to a writer. If the <see cref="T:log4net.Repository.ILoggerRepository" /> specified
            is not null then it is used to render the object to text, otherwise
            the object's ToString method is called.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PatternConverter.Next">
      <summary>
            Get the next pattern converter in the chain
            </summary>
      <value>
            the next pattern converter in the chain
            </value>
      <remarks>
        <para>
            Get the next pattern converter in the chain
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PatternConverter.FormattingInfo">
      <summary>
            Gets or sets the formatting info for this converter
            </summary>
      <value>
            The formatting info for this converter
            </value>
      <remarks>
        <para>
            Gets or sets the formatting info for this converter
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PatternConverter.Option">
      <summary>
            Gets or sets the option value for this converter
            </summary>
      <summary>
            The option for this converter
            </summary>
      <remarks>
        <para>
            Gets or sets the option value for this converter
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.PatternLayoutConverter">
      <summary>
            Abstract class that provides the formatting functionality that 
            derived classes need.
            </summary>
      <remarks>
            Conversion specifiers in a conversion patterns are parsed to
            individual PatternConverters. Each of which is responsible for
            converting a logging event in a converter specific manner.
            </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Layout.Pattern.PatternLayoutConverter.m_ignoresException">
      <summary>
            Flag indicating if this converter handles exceptions
            </summary>
      <remarks>
        <c>false</c> if this converter handles exceptions
            </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Layout.Pattern.PatternLayoutConverter" /> class.
            </summary>
    </member>
    <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the correct way.
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">The <see cref="T:log4net.Core.LoggingEvent" /> on which the pattern converter should be executed.</param>
    </member>
    <member name="M:log4net.Layout.Pattern.PatternLayoutConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Derived pattern converters must override this method in order to
            convert conversion specifiers in the correct way.
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">The state object on which the pattern converter should be executed.</param>
    </member>
    <member name="P:log4net.Layout.Pattern.PatternLayoutConverter.IgnoresException">
      <summary>
            Flag indicating if this converter handles the logging event exception
            </summary>
      <value>
        <c>false</c> if this converter handles the logging event exception</value>
      <remarks>
        <para>
            If this converter handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent" />, then this property should be set to
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the property should be set to <c>true</c>.
            </para>
        <para>
            Set this value to override a this default setting. The default
            value is <c>true</c>, this converter does not handle the exception.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.AppDomainPatternConverter">
      <summary>
            Write the event appdomain name to the output
            </summary>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.Domain" /> to the output writer.
            </para>
      </remarks>
      <author>Daniel Cazzulino</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.AppDomainPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the event appdomain name to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.Domain" /> to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.DatePatternConverter">
      <summary>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the date of a <see cref="T:log4net.Core.LoggingEvent" />.
            </summary>
      <remarks>
        <para>
            Render the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> to the writer as a string.
            </para>
        <para>
            The value of the <see cref="P:log4net.Util.PatternConverter.Option" /> determines 
            the formatting of the date. The following values are allowed:
            <list type="definition"><listheader><term>Option value</term><description>Output</description></listheader><item><term>ISO8601</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter" /> formatter. 
            		Formats using the <c>"yyyy-MM-dd HH:mm:ss,fff"</c> pattern.
            		</description></item><item><term>DATE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> formatter. 
            		Formats using the <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, <c>"06 Nov 1994 15:49:37,459"</c>.
            		</description></item><item><term>ABSOLUTE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" /> formatter. 
            		Formats using the <c>"HH:mm:ss,yyyy"</c> for example, <c>"15:49:37,459"</c>.
            		</description></item><item><term>other</term><description>
            		Any other pattern string uses the <see cref="T:log4net.DateFormatter.SimpleDateFormatter" /> formatter. 
            		This formatter passes the pattern string to the <see cref="T:System.DateTime" /><see cref="M:System.DateTime.ToString(System.String)" /> method.
            		For details on valid patterns see 
            		<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemglobalizationdatetimeformatinfoclasstopic.asp">DateTimeFormatInfo Class</a>.
            		</description></item></list></para>
        <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> is in the local time zone and is rendered in that zone.
            To output the time in Universal time see <see cref="T:log4net.Layout.Pattern.UtcDatePatternConverter" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Layout.Pattern.DatePatternConverter.m_dateFormatter">
      <summary>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions">
      <summary>
            Initialize the converter pattern based on the <see cref="P:log4net.Util.PatternConverter.Option" /> property.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.Pattern.DatePatternConverter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.DatePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Convert the pattern into the rendered message
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Pass the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
        <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> passed is in the local time zone.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.ExceptionPatternConverter">
      <summary>
            Write the exception text to the output
            </summary>
      <remarks>
        <para>
            If an exception object is stored in the logging event
            it will be rendered into the pattern output with a
            trailing newline.
            </para>
        <para>
            If there is no exception then nothing will be output
            and no trailing newline will be appended.
            It is typical to put a newline before the exception
            and to have the exception as the last data in the pattern.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.ExceptionPatternConverter.#ctor">
      <summary>
            Default constructor
            </summary>
    </member>
    <member name="M:log4net.Layout.Pattern.ExceptionPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the exception text to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            If an exception object is stored in the logging event
            it will be rendered into the pattern output with a
            trailing newline.
            </para>
        <para>
            If there is no exception then nothing will be output
            and no trailing newline will be appended.
            It is typical to put a newline before the exception
            and to have the exception as the last data in the pattern.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.FileLocationPatternConverter">
      <summary>
            Writes the caller location file name to the output
            </summary>
      <remarks>
        <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.FileName" /> for
            the event to the output writer.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.FileLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the caller location file name to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.FileName" /> for
            the <paramref name="loggingEvent" /> to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.FullLocationPatternConverter">
      <summary>
            Write the caller location info to the output
            </summary>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.FullInfo" /> to the output writer.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.FullLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the caller location info to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LocationInfo.FullInfo" /> to the output writer.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.IdentityPatternConverter">
      <summary>
            Writes the event identity to the output
            </summary>
      <remarks>
        <para>
            Writes the value of the <see cref="P:log4net.Core.LoggingEvent.Identity" /> to
            the output writer.
            </para>
      </remarks>
      <author>Daniel Cazzulino</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.IdentityPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Writes the event identity to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the value of the <paramref name="loggingEvent" /><see cref="P:log4net.Core.LoggingEvent.Identity" /> to
            the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.LevelPatternConverter">
      <summary>
            Write the event level to the output
            </summary>
      <remarks>
        <para>
            Writes the display name of the event <see cref="P:log4net.Core.LoggingEvent.Level" />
            to the writer.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.LevelPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the event level to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.Level.DisplayName" /> of the <paramref name="loggingEvent" /><see cref="P:log4net.Core.LoggingEvent.Level" />
            to the <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.LineLocationPatternConverter">
      <summary>
            Write the caller location line number to the output
            </summary>
      <remarks>
        <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.LineNumber" /> for
            the event to the output writer.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.LineLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the caller location line number to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the value of the <see cref="P:log4net.Core.LocationInfo.LineNumber" /> for
            the <paramref name="loggingEvent" /> to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.NamedPatternConverter">
      <summary>
            Converter to output and truncate <c>'.'</c> separated strings
            </summary>
      <remarks>
        <para>
            This abstract class supports truncating a <c>'.'</c> separated string
            to show a specified number of elements from the right hand side.
            This is used to truncate class names that are fully qualified.
            </para>
        <para>
            Subclasses should override the <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)" /> method to
            return the fully qualified string.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions">
      <summary>
            Initialize the converter 
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
      <summary>
            Get the fully qualified string data
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>the fully qualified name</returns>
      <remarks>
        <para>
            Overridden by subclasses to get the fully qualified name before the
            precision is applied to it.
            </para>
        <para>
            Return the fully qualified <c>'.'</c> (dot/period) separated string.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.NamedPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Convert the pattern to the rendered message
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
            Render the <see cref="M:log4net.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)" /> to the precision
            specified by the <see cref="P:log4net.Util.PatternConverter.Option" /> property.
            </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.LoggerPatternConverter">
      <summary>
            Converter for logger name
            </summary>
      <remarks>
        <para>
            Outputs the <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> of the event.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.LoggerPatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
      <summary>
            Gets the fully qualified name of the logger
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>The fully qualified logger name</returns>
      <remarks>
        <para>
            Returns the <see cref="P:log4net.Core.LoggingEvent.LoggerName" /> of the <paramref name="loggingEvent" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.MessagePatternConverter">
      <summary>
            Writes the event message to the output
            </summary>
      <remarks>
        <para>
            Uses the <see cref="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)" /> method
            to write out the event message.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.MessagePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Writes the event message to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Uses the <see cref="M:log4net.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)" /> method
            to write out the event message.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.MethodLocationPatternConverter">
      <summary>
            Write the method name to the output
            </summary>
      <remarks>
        <para>
            Writes the caller location <see cref="P:log4net.Core.LocationInfo.MethodName" /> to
            the output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.MethodLocationPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the method name to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the caller location <see cref="P:log4net.Core.LocationInfo.MethodName" /> to
            the output.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.NdcPatternConverter">
      <summary>
            Converter to include event NDC
            </summary>
      <remarks>
        <para>
            Outputs the value of the event property named <c>NDC</c>.
            </para>
        <para>
            The <see cref="T:log4net.Layout.Pattern.PropertyPatternConverter" /> should be used instead.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.NdcPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the event NDC to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            As the thread context stacks are now stored in named event properties
            this converter simply looks up the value of the <c>NDC</c> property.
            </para>
        <para>
            The <see cref="T:log4net.Layout.Pattern.PropertyPatternConverter" /> should be used instead.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.PropertyPatternConverter">
      <summary>
            Property pattern converter
            </summary>
      <remarks>
        <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
        <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.PropertyPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the property value to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
        <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.RelativeTimePatternConverter">
      <summary>
            Converter to output the relative time of the event
            </summary>
      <remarks>
        <para>
            Converter to output the time of the event relative to the start of the program.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.RelativeTimePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the relative time to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes out the relative time of the event in milliseconds.
            That is the number of milliseconds between the event <see cref="P:log4net.Core.LoggingEvent.TimeStamp" />
            and the <see cref="P:log4net.Core.LoggingEvent.StartTime" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Pattern.RelativeTimePatternConverter.TimeDifferenceInMillis(System.DateTime,System.DateTime)">
      <summary>
            Helper method to get the time difference between two DateTime objects
            </summary>
      <param name="start">start time (in the current local time zone)</param>
      <param name="end">end time (in the current local time zone)</param>
      <returns>the time difference in milliseconds</returns>
    </member>
    <member name="T:log4net.Layout.Pattern.ThreadPatternConverter">
      <summary>
            Converter to include event thread name
            </summary>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.ThreadName" /> to the output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.ThreadPatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the ThreadName to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Writes the <see cref="P:log4net.Core.LoggingEvent.ThreadName" /> to the <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.TypeNamePatternConverter">
      <summary>
            Pattern converter for the class name
            </summary>
      <remarks>
        <para>
            Outputs the <see cref="P:log4net.Core.LocationInfo.ClassName" /> of the event.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.TypeNamePatternConverter.GetFullyQualifiedName(log4net.Core.LoggingEvent)">
      <summary>
            Gets the fully qualified name of the class
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <returns>The fully qualified type name for the caller location</returns>
      <remarks>
        <para>
            Returns the <see cref="P:log4net.Core.LocationInfo.ClassName" /> of the <paramref name="loggingEvent" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Pattern.UserNamePatternConverter">
      <summary>
            Converter to include event user name
            </summary>
      <author>Douglas de la Torre</author>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.UserNamePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Convert the pattern to the rendered message
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
    </member>
    <member name="T:log4net.Layout.Pattern.UtcDatePatternConverter">
      <summary>
            Write the TimeStamp to the output
            </summary>
      <remarks>
        <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the date of a <see cref="T:log4net.Core.LoggingEvent" />.
            </para>
        <para>
            Uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> 
            in Universal time.
            </para>
        <para>
            See the <see cref="T:log4net.Layout.Pattern.DatePatternConverter" /> for details on the date pattern syntax.
            </para>
      </remarks>
      <seealso cref="T:log4net.Layout.Pattern.DatePatternConverter" />
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.Pattern.UtcDatePatternConverter.Convert(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Write the TimeStamp to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Pass the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
        <para>
            The <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> passed is in the local time zone, this is converted
            to Universal time before it is rendered.
            </para>
      </remarks>
      <seealso cref="T:log4net.Layout.Pattern.DatePatternConverter" />
    </member>
    <member name="T:log4net.Layout.ILayout">
      <summary>
            Interface implemented by layout objects
            </summary>
      <remarks>
        <para>
            An <see cref="T:log4net.Layout.ILayout" /> object is used to format a <see cref="T:log4net.Core.LoggingEvent" />
            as text. The <see cref="M:log4net.Layout.ILayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)" /> method is called by an
            appender to transform the <see cref="T:log4net.Core.LoggingEvent" /> into a string.
            </para>
        <para>
            The layout can also supply <see cref="P:log4net.Layout.ILayout.Header" /> and <see cref="P:log4net.Layout.ILayout.Footer" />
            text that is appender before any events and after all the events respectively.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.ILayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Implement this method to create your own layout format.
            </summary>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <param name="loggingEvent">The event to format</param>
      <remarks>
        <para>
            This method is called by an appender to format
            the <paramref name="loggingEvent" /> as text and output to a writer.
            </para>
        <para>
            If the caller does not have a <see cref="T:System.IO.TextWriter" /> and prefers the
            event to be formatted as a <see cref="T:System.String" /> then the following
            code can be used to format the event into a <see cref="T:System.IO.StringWriter" />.
            </para>
        <code lang="C#">
            StringWriter writer = new StringWriter();
            Layout.Format(writer, loggingEvent);
            string formattedEvent = writer.ToString();
            </code>
      </remarks>
    </member>
    <member name="P:log4net.Layout.ILayout.ContentType">
      <summary>
            The content type output by this layout. 
            </summary>
      <value>The content type</value>
      <remarks>
        <para>
            The content type output by this layout.
            </para>
        <para>
            This is a MIME type e.g. <c>"text/plain"</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.ILayout.Header">
      <summary>
            The header for the layout format.
            </summary>
      <value>the layout header</value>
      <remarks>
        <para>
            The Header text will be appended before any logging events
            are formatted and appended.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.ILayout.Footer">
      <summary>
            The footer for the layout format.
            </summary>
      <value>the layout footer</value>
      <remarks>
        <para>
            The Footer text will be appended after all the logging events
            have been formatted and appended.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.ILayout.IgnoresException">
      <summary>
            Flag indicating if this layout handle exceptions
            </summary>
      <value>
        <c>false</c> if this layout handles exceptions</value>
      <remarks>
        <para>
            If this layout handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent" />, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the layout should return <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.LayoutSkeleton">
      <summary>
            Extend this abstract class to create your own log layout format.
            </summary>
      <remarks>
        <para>
            This is the base implementation of the <see cref="T:log4net.Layout.ILayout" />
            interface. Most layout objects should extend this class.
            </para>
      </remarks>
      <remarks>
        <note type="inheritinfo">
          <para>
            Subclasses must implement the <see cref="M:log4net.Layout.LayoutSkeleton.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)" />
            method.
            </para>
          <para>
            Subclasses should set the <see cref="P:log4net.Layout.LayoutSkeleton.IgnoresException" /> in their default
            constructor.
            </para>
        </note>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Layout.LayoutSkeleton.m_header">
      <summary>
            The header text
            </summary>
      <remarks>
        <para>
            See <see cref="P:log4net.Layout.LayoutSkeleton.Header" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.LayoutSkeleton.m_footer">
      <summary>
            The footer text
            </summary>
      <remarks>
        <para>
            See <see cref="P:log4net.Layout.LayoutSkeleton.Footer" /> for more information.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.LayoutSkeleton.m_ignoresException">
      <summary>
            Flag indicating if this layout handles exceptions
            </summary>
      <remarks>
        <para>
          <c>false</c> if this layout handles exceptions
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.LayoutSkeleton.#ctor">
      <summary>
            Empty default constructor
            </summary>
      <remarks>
        <para>
            Empty default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.LayoutSkeleton.ActivateOptions">
      <summary>
            Activate component options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.LayoutSkeleton.ActivateOptions" /> must be called again.
            </para>
        <para>
            This method must be implemented by the subclass.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.LayoutSkeleton.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Implement this method to create your own layout format.
            </summary>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <param name="loggingEvent">The event to format</param>
      <remarks>
        <para>
            This method is called by an appender to format
            the <paramref name="loggingEvent" /> as text.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.LayoutSkeleton.ContentType">
      <summary>
            The content type output by this layout. 
            </summary>
      <value>The content type is <c>"text/plain"</c></value>
      <remarks>
        <para>
            The content type output by this layout.
            </para>
        <para>
            This base class uses the value <c>"text/plain"</c>.
            To change this value a subclass must override this
            property.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.LayoutSkeleton.Header">
      <summary>
            The header for the layout format.
            </summary>
      <value>the layout header</value>
      <remarks>
        <para>
            The Header text will be appended before any logging events
            are formatted and appended.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.LayoutSkeleton.Footer">
      <summary>
            The footer for the layout format.
            </summary>
      <value>the layout footer</value>
      <remarks>
        <para>
            The Footer text will be appended after all the logging events
            have been formatted and appended.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.LayoutSkeleton.IgnoresException">
      <summary>
            Flag indicating if this layout handles exceptions
            </summary>
      <value>
        <c>false</c> if this layout handles exceptions</value>
      <remarks>
        <para>
            If this layout handles the exception object contained within
            <see cref="T:log4net.Core.LoggingEvent" />, then the layout should return
            <c>false</c>. Otherwise, if the layout ignores the exception
            object, then the layout should return <c>true</c>.
            </para>
        <para>
            Set this value to override a this default setting. The default
            value is <c>true</c>, this layout does not handle the exception.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.ExceptionLayout">
      <summary>
            A Layout that renders only the Exception text from the logging event
            </summary>
      <remarks>
        <para>
            A Layout that renders only the Exception text from the logging event.
            </para>
        <para>
            This Layout should only be used with appenders that utilize multiple
            layouts (e.g. <see cref="T:log4net.Appender.AdoNetAppender" />).
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.ExceptionLayout.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Constructs a ExceptionLayout
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.ExceptionLayout.ActivateOptions">
      <summary>
            Activate component options
            </summary>
      <remarks>
        <para>
            Part of the <see cref="T:log4net.Core.IOptionHandler" /> component activation
            framework.
            </para>
        <para>
            This method does nothing as options become effective immediately.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.ExceptionLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Gets the exception text from the logging event
            </summary>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <param name="loggingEvent">the event being logged</param>
      <remarks>
        <para>
            Write the exception string to the <see cref="T:System.IO.TextWriter" />.
            The exception string is retrieved from <see cref="M:log4net.Core.LoggingEvent.GetExceptionString" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.IRawLayout">
      <summary>
            Interface for raw layout objects
            </summary>
      <remarks>
        <para>
            Interface used to format a <see cref="T:log4net.Core.LoggingEvent" />
            to an object.
            </para>
        <para>
            This interface should not be confused with the
            <see cref="T:log4net.Layout.ILayout" /> interface. This interface is used in
            only certain specialized situations where a raw object is
            required rather than a formatted string. The <see cref="T:log4net.Layout.ILayout" />
            is not generally useful than this interface.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.IRawLayout.Format(log4net.Core.LoggingEvent)">
      <summary>
            Implement this method to create your own layout format.
            </summary>
      <param name="loggingEvent">The event to format</param>
      <returns>returns the formatted event</returns>
      <remarks>
        <para>
            Implement this method to create your own layout format.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.Layout2RawLayoutAdapter">
      <summary>
            Adapts any <see cref="T:log4net.Layout.ILayout" /> to a <see cref="T:log4net.Layout.IRawLayout" /></summary>
      <remarks>
        <para>
            Where an <see cref="T:log4net.Layout.IRawLayout" /> is required this adapter
            allows a <see cref="T:log4net.Layout.ILayout" /> to be specified.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Layout.Layout2RawLayoutAdapter.m_layout">
      <summary>
            The layout to adapt
            </summary>
    </member>
    <member name="M:log4net.Layout.Layout2RawLayoutAdapter.#ctor(log4net.Layout.ILayout)">
      <summary>
            Construct a new adapter
            </summary>
      <param name="layout">the layout to adapt</param>
      <remarks>
        <para>
            Create the adapter for the specified <paramref name="layout" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.Layout2RawLayoutAdapter.Format(log4net.Core.LoggingEvent)">
      <summary>
            Format the logging event as an object.
            </summary>
      <param name="loggingEvent">The event to format</param>
      <returns>returns the formatted event</returns>
      <remarks>
        <para>
            Format the logging event as an object.
            </para>
        <para>
            Uses the <see cref="T:log4net.Layout.ILayout" /> object supplied to 
            the constructor to perform the formatting.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.PatternLayout">
      <summary>
            A flexible layout configurable with pattern string.
            </summary>
      <remarks>
        <para>
            The goal of this class is to <see cref="M:log4net.Layout.PatternLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)" /> a 
            <see cref="T:log4net.Core.LoggingEvent" /> as a string. The results
            depend on the <i>conversion pattern</i>.
            </para>
        <para>
            The conversion pattern is closely related to the conversion
            pattern of the printf function in C. A conversion pattern is
            composed of literal text and format control expressions called
            <i>conversion specifiers</i>.
            </para>
        <para>
          <i>You are free to insert any literal text within the conversion
            pattern.</i>
        </para>
        <para>
            Each conversion specifier starts with a percent sign (%) and is
            followed by optional <i>format modifiers</i> and a <i>conversion
            pattern name</i>. The conversion pattern name specifies the type of
            data, e.g. logger, level, date, thread name. The format
            modifiers control such things as field width, padding, left and
            right justification. The following is a simple example.
            </para>
        <para>
            Let the conversion pattern be <b>"%-5level [%thread]: %message%newline"</b> and assume
            that the log4net environment was set to use a PatternLayout. Then the
            statements
            </para>
        <code lang="C#">
            ILog log = LogManager.GetLogger(typeof(TestApp));
            log.Debug("Message 1");
            log.Warn("Message 2");   
            </code>
        <para>would yield the output</para>
        <code>
            DEBUG [main]: Message 1
            WARN  [main]: Message 2  
            </code>
        <para>
            Note that there is no explicit separator between text and
            conversion specifiers. The pattern parser knows when it has reached
            the end of a conversion specifier when it reads a conversion
            character. In the example above the conversion specifier
            <b>%-5level</b> means the level of the logging event should be left
            justified to a width of five characters.
            </para>
        <para>
            The recognized conversion pattern names are:
            </para>
        <list type="table">
          <listheader>
            <term>Conversion Pattern Name</term>
            <description>Effect</description>
          </listheader>
          <item>
            <term>a</term>
            <description>Equivalent to <b>appdomain</b></description>
          </item>
          <item>
            <term>appdomain</term>
            <description>
            			Used to output the friendly name of the AppDomain where the 
            			logging event was generated. 
                    </description>
          </item>
          <item>
            <term>c</term>
            <description>Equivalent to <b>logger</b></description>
          </item>
          <item>
            <term>C</term>
            <description>Equivalent to <b>type</b></description>
          </item>
          <item>
            <term>class</term>
            <description>Equivalent to <b>type</b></description>
          </item>
          <item>
            <term>d</term>
            <description>Equivalent to <b>date</b></description>
          </item>
          <item>
            <term>date</term>
            <description>
              <para>
            			Used to output the date of the logging event in the local time zone. 
            			To output the date in universal time use the <c>%utcdate</c> pattern.
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%date{HH:mm:ss,fff}</b> or
            			<b>%date{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
              <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:System.DateTime.ToString(System.String)" />.
            			</para>
              <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%date{ISO8601}</b> or <b>%date{ABSOLUTE}</b>.
            			</para>
              <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:System.DateTime.ToString(System.String)" />.
            			</para>
            </description>
          </item>
          <item>
            <term>exception</term>
            <description>
              <para>
            			Used to output the exception passed in with the log message.
            			</para>
              <para>
            			If an exception object is stored in the logging event
            			it will be rendered into the pattern output with a
            			trailing newline.
            			If there is no exception then nothing will be output
            			and no trailing newline will be appended.
            			It is typical to put a newline before the exception
            			and to have the exception as the last data in the pattern.
            			</para>
            </description>
          </item>
          <item>
            <term>F</term>
            <description>Equivalent to <b>file</b></description>
          </item>
          <item>
            <term>file</term>
            <description>
              <para>
            			Used to output the file name where the logging request was
            			issued.
            			</para>
              <para>
                <b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
              <para>
            			See the note below on the availability of caller location information.
            			</para>
            </description>
          </item>
          <item>
            <term>identity</term>
            <description>
              <para>
            			Used to output the user name for the currently active user
            			(Principal.Identity.Name).
            			</para>
              <para>
                <b>WARNING</b> Generating caller information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
            </description>
          </item>
          <item>
            <term>l</term>
            <description>Equivalent to <b>location</b></description>
          </item>
          <item>
            <term>L</term>
            <description>Equivalent to <b>line</b></description>
          </item>
          <item>
            <term>location</term>
            <description>
              <para>
            			Used to output location information of the caller which generated
            			the logging event.
            			</para>
              <para>
            			The location information depends on the CLI implementation but
            			usually consists of the fully qualified name of the calling
            			method followed by the callers source the file name and line
            			number between parentheses.
            			</para>
              <para>
            			The location information can be very useful. However, its
            			generation is <b>extremely</b> slow. Its use should be avoided
            			unless execution speed is not an issue.
            			</para>
              <para>
            			See the note below on the availability of caller location information.
            			</para>
            </description>
          </item>
          <item>
            <term>level</term>
            <description>
              <para>
            			Used to output the level of the logging event.
            			</para>
            </description>
          </item>
          <item>
            <term>line</term>
            <description>
              <para>
            			Used to output the line number from where the logging request
            			was issued.
            			</para>
              <para>
                <b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
              <para>
            			See the note below on the availability of caller location information.
            			</para>
            </description>
          </item>
          <item>
            <term>logger</term>
            <description>
              <para>
            			Used to output the logger of the logging event. The
            			logger conversion specifier can be optionally followed by
            			<i>precision specifier</i>, that is a decimal constant in
            			brackets.
                        </para>
              <para>
            			If a precision specifier is given, then only the corresponding
            			number of right most components of the logger name will be
            			printed. By default the logger name is printed in full.
            			</para>
              <para>
            			For example, for the logger name "a.b.c" the pattern
            			<b>%logger{2}</b> will output "b.c".
            			</para>
            </description>
          </item>
          <item>
            <term>m</term>
            <description>Equivalent to <b>message</b></description>
          </item>
          <item>
            <term>M</term>
            <description>Equivalent to <b>method</b></description>
          </item>
          <item>
            <term>message</term>
            <description>
              <para>
            			Used to output the application supplied message associated with 
            			the logging event.
            			</para>
            </description>
          </item>
          <item>
            <term>mdc</term>
            <description>
              <para>
            			The MDC (old name for the ThreadContext.Properties) is now part of the
            			combined event properties. This pattern is supported for compatibility
            			but is equivalent to <b>property</b>.
            			</para>
            </description>
          </item>
          <item>
            <term>method</term>
            <description>
              <para>
            			Used to output the method name where the logging request was
            			issued.
            			</para>
              <para>
                <b>WARNING</b> Generating caller location information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
              <para>
            			See the note below on the availability of caller location information.
            			</para>
            </description>
          </item>
          <item>
            <term>n</term>
            <description>Equivalent to <b>newline</b></description>
          </item>
          <item>
            <term>newline</term>
            <description>
              <para>
            			Outputs the platform dependent line separator character or
            			characters.
            			</para>
              <para>
            			This conversion pattern offers the same performance as using 
            			non-portable line separator strings such as	"\n", or "\r\n". 
            			Thus, it is the preferred way of specifying a line separator.
            			</para>
            </description>
          </item>
          <item>
            <term>ndc</term>
            <description>
              <para>
            			Used to output the NDC (nested diagnostic context) associated
            			with the thread that generated the logging event.
            			</para>
            </description>
          </item>
          <item>
            <term>p</term>
            <description>Equivalent to <b>level</b></description>
          </item>
          <item>
            <term>P</term>
            <description>Equivalent to <b>property</b></description>
          </item>
          <item>
            <term>properties</term>
            <description>Equivalent to <b>property</b></description>
          </item>
          <item>
            <term>property</term>
            <description>
              <para>
            			Used to output the an event specific property. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%property{user}</b> would include the value
            			from the property that is keyed by the string 'user'. Each property value
            			that is to be included in the log must be specified separately.
            			Properties are added to events by loggers or appenders. By default 
            			the <c>log4net:HostName</c> property is set to the name of machine on 
            			which the event was originally logged.
            			</para>
              <para>
            			If no key is specified, e.g. <b>%property</b> then all the keys and their
            			values are printed in a comma separated list.
            			</para>
              <para>
            			The properties of an event are combined from a number of different
            			contexts. These are listed below in the order in which they are searched.
            			</para>
              <list type="definition">
                <item>
                  <term>the event properties</term>
                  <description>
            					The event has <see cref="P:log4net.Core.LoggingEvent.Properties" /> that can be set. These 
            					properties are specific to this event only.
            					</description>
                </item>
                <item>
                  <term>the thread properties</term>
                  <description>
            					The <see cref="P:log4net.ThreadContext.Properties" /> that are set on the current
            					thread. These properties are shared by all events logged on this thread.
            					</description>
                </item>
                <item>
                  <term>the global properties</term>
                  <description>
            					The <see cref="P:log4net.GlobalContext.Properties" /> that are set globally. These 
            					properties are shared by all the threads in the AppDomain.
            					</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>r</term>
            <description>Equivalent to <b>timestamp</b></description>
          </item>
          <item>
            <term>t</term>
            <description>Equivalent to <b>thread</b></description>
          </item>
          <item>
            <term>timestamp</term>
            <description>
              <para>
            			Used to output the number of milliseconds elapsed since the start
            			of the application until the creation of the logging event.
            			</para>
            </description>
          </item>
          <item>
            <term>thread</term>
            <description>
              <para>
            			Used to output the name of the thread that generated the
            			logging event. Uses the thread number if no name is available.
            			</para>
            </description>
          </item>
          <item>
            <term>type</term>
            <description>
              <para>
            			Used to output the fully qualified type name of the caller
            			issuing the logging request. This conversion specifier
            			can be optionally followed by <i>precision specifier</i>, that
            			is a decimal constant in brackets.
            			</para>
              <para>
            			If a precision specifier is given, then only the corresponding
            			number of right most components of the class name will be
            			printed. By default the class name is output in fully qualified form.
            			</para>
              <para>
            			For example, for the class name "log4net.Layout.PatternLayout", the
            			pattern <b>%type{1}</b> will output "PatternLayout".
            			</para>
              <para>
                <b>WARNING</b> Generating the caller class information is
            			slow. Thus, its use should be avoided unless execution speed is
            			not an issue.
            			</para>
              <para>
            			See the note below on the availability of caller location information.
            			</para>
            </description>
          </item>
          <item>
            <term>u</term>
            <description>Equivalent to <b>identity</b></description>
          </item>
          <item>
            <term>username</term>
            <description>
              <para>
            			Used to output the WindowsIdentity for the currently
            			active user.
            			</para>
              <para>
                <b>WARNING</b> Generating caller WindowsIdentity information is
            			extremely slow. Its use should be avoided unless execution speed
            			is not an issue.
            			</para>
            </description>
          </item>
          <item>
            <term>utcdate</term>
            <description>
              <para>
            			Used to output the date of the logging event in universal time. 
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%utcdate{HH:mm:ss,fff}</b> or
            			<b>%utcdate{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
              <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:System.DateTime.ToString(System.String)" />.
            			</para>
              <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%utcdate{ISO8601}</b> or <b>%utcdate{ABSOLUTE}</b>.
            			</para>
              <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:System.DateTime.ToString(System.String)" />.
            			</para>
            </description>
          </item>
          <item>
            <term>w</term>
            <description>Equivalent to <b>username</b></description>
          </item>
          <item>
            <term>x</term>
            <description>Equivalent to <b>ndc</b></description>
          </item>
          <item>
            <term>X</term>
            <description>Equivalent to <b>mdc</b></description>
          </item>
          <item>
            <term>%</term>
            <description>
              <para>
            			The sequence %% outputs a single percent sign.
            			</para>
            </description>
          </item>
        </list>
        <para>
            The single letter patterns are deprecated in favor of the 
            longer more descriptive pattern names.
            </para>
        <para>
            By default the relevant information is output as is. However,
            with the aid of format modifiers it is possible to change the
            minimum field width, the maximum field width and justification.
            </para>
        <para>
            The optional format modifier is placed between the percent sign
            and the conversion pattern name.
            </para>
        <para>
            The first optional format modifier is the <i>left justification
            flag</i> which is just the minus (-) character. Then comes the
            optional <i>minimum field width</i> modifier. This is a decimal
            constant that represents the minimum number of characters to
            output. If the data item requires fewer characters, it is padded on
            either the left or the right until the minimum width is
            reached. The default is to pad on the left (right justify) but you
            can specify right padding with the left justification flag. The
            padding character is space. If the data item is larger than the
            minimum field width, the field is expanded to accommodate the
            data. The value is never truncated.
            </para>
        <para>
            This behavior can be changed using the <i>maximum field
            width</i> modifier which is designated by a period followed by a
            decimal constant. If the data item is longer than the maximum
            field, then the extra characters are removed from the
            <i>beginning</i> of the data item and not from the end. For
            example, it the maximum field width is eight and the data item is
            ten characters long, then the first two characters of the data item
            are dropped. This behavior deviates from the printf function in C
            where truncation is done from the end.
            </para>
        <para>
            Below are various format modifier examples for the logger
            conversion specifier.
            </para>
        <div class="tablediv">
          <table class="dtTABLE" cellspacing="0">
            <tr>
              <th>Format modifier</th>
              <th>left justify</th>
              <th>minimum width</th>
              <th>maximum width</th>
              <th>comment</th>
            </tr>
            <tr>
              <td align="center">%20logger</td>
              <td align="center">false</td>
              <td align="center">20</td>
              <td align="center">none</td>
              <td>
                <para>
            				Left pad with spaces if the logger name is less than 20
            				characters long.
            				</para>
              </td>
            </tr>
            <tr>
              <td align="center">%-20logger</td>
              <td align="center">true</td>
              <td align="center">20</td>
              <td align="center">none</td>
              <td>
                <para>
            				Right pad with spaces if the logger 
            				name is less than 20 characters long.
            				</para>
              </td>
            </tr>
            <tr>
              <td align="center">%.30logger</td>
              <td align="center">NA</td>
              <td align="center">none</td>
              <td align="center">30</td>
              <td>
                <para>
            				Truncate from the beginning if the logger 
            				name is longer than 30 characters.
            				</para>
              </td>
            </tr>
            <tr>
              <td align="center">
                <nobr>%20.30logger</nobr>
              </td>
              <td align="center">false</td>
              <td align="center">20</td>
              <td align="center">30</td>
              <td>
                <para>
            				Left pad with spaces if the logger name is shorter than 20
            				characters. However, if logger name is longer than 30 characters,
            				then truncate from the beginning.
            				</para>
              </td>
            </tr>
            <tr>
              <td align="center">%-20.30logger</td>
              <td align="center">true</td>
              <td align="center">20</td>
              <td align="center">30</td>
              <td>
                <para>
            				Right pad with spaces if the logger name is shorter than 20
            				characters. However, if logger name is longer than 30 characters,
            				then truncate from the beginning.
            				</para>
              </td>
            </tr>
          </table>
        </div>
        <para>
          <b>Note about caller location information.</b>
          <br />
            The following patterns <c>%type %file %line %method %location %class %C %F %L %l %M</c> 
            all generate caller location information.
            Location information uses the <c>System.Diagnostics.StackTrace</c> class to generate
            a call stack. The caller's information is then extracted from this stack.
            </para>
        <note type="caution">
          <para>
            The <c>System.Diagnostics.StackTrace</c> class is not supported on the 
            .NET Compact Framework 1.0 therefore caller location information is not
            available on that framework.
            </para>
        </note>
        <note type="caution">
          <para>
            The <c>System.Diagnostics.StackTrace</c> class has this to say about Release builds:
            </para>
          <para>
            "StackTrace information will be most informative with Debug build configurations. 
            By default, Debug builds include debug symbols, while Release builds do not. The 
            debug symbols contain most of the file, method name, line number, and column 
            information used in constructing StackFrame and StackTrace objects. StackTrace 
            might not report as many method calls as expected, due to code transformations 
            that occur during optimization."
            </para>
          <para>
            This means that in a Release build the caller information may be incomplete or may 
            not exist at all! Therefore caller location information cannot be relied upon in a Release build.
            </para>
        </note>
        <para>
            Additional pattern converters may be registered with a specific <see cref="T:log4net.Layout.PatternLayout" />
            instance using the <see cref="M:log4net.Layout.PatternLayout.AddConverter(System.String,System.Type)" /> method.
            </para>
      </remarks>
      <example>
            This is a more detailed pattern.
            <code><b>%timestamp [%thread] %level %logger %ndc - %message%newline</b></code></example>
      <example>
            A similar pattern except that the relative time is
            right padded if less than 6 digits, thread name is right padded if
            less than 15 characters and truncated if longer and the logger
            name is left padded if shorter than 30 characters and truncated if
            longer.
            <code><b>%-6timestamp [%15.15thread] %-5level %30.30logger %ndc - %message%newline</b></code></example>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Douglas de la Torre</author>
      <author>Daniel Cazzulino</author>
    </member>
    <member name="T:log4net.Layout.PatternLayout.ConverterInfo">
      <summary>
            Wrapper class used to map converter names to converter types
            </summary>
      <remarks>
        <para>
            Pattern converter info class used during configuration to
            pass to the <see cref="M:log4net.Layout.PatternLayout.AddConverter(log4net.Layout.PatternLayout.ConverterInfo)" />
            method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.ConverterInfo.#ctor">
      <summary>
            default constructor
            </summary>
    </member>
    <member name="P:log4net.Layout.PatternLayout.ConverterInfo.Name">
      <summary>
            Gets or sets the name of the conversion pattern
            </summary>
      <remarks>
        <para>
            The name of the pattern in the format string
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.PatternLayout.ConverterInfo.Type">
      <summary>
            Gets or sets the type of the converter
            </summary>
      <remarks>
        <para>
            The value specified must extend the 
            <see cref="T:log4net.Util.PatternConverter" /> type.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.PatternLayout.DefaultConversionPattern">
      <summary>
            Default pattern string for log output. 
            </summary>
      <remarks>
        <para>
            Default pattern string for log output. 
            Currently set to the string <b>"%message%newline"</b> 
            which just prints the application supplied message. 
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.PatternLayout.DetailConversionPattern">
      <summary>
            A detailed conversion pattern
            </summary>
      <remarks>
        <para>
            A conversion pattern which includes Time, Thread, Logger, and Nested Context.
            Current value is <b>%timestamp [%thread] %level %logger %ndc - %message%newline</b>.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.PatternLayout.s_globalRulesRegistry">
      <summary>
            Internal map of converter identifiers to converter types.
            </summary>
      <remarks>
        <para>
            This static map is overridden by the m_converterRegistry instance map
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Layout.PatternLayout.m_pattern">
      <summary>
            the pattern
            </summary>
    </member>
    <member name="F:log4net.Layout.PatternLayout.m_head">
      <summary>
            the head of the pattern converter chain
            </summary>
    </member>
    <member name="F:log4net.Layout.PatternLayout.m_instanceRulesRegistry">
      <summary>
            patterns defined on this PatternLayout only
            </summary>
    </member>
    <member name="M:log4net.Layout.PatternLayout.#ctor">
      <summary>
            Constructs a PatternLayout using the DefaultConversionPattern
            </summary>
      <remarks>
        <para>
            The default pattern just produces the application supplied message.
            </para>
        <para>
            Note to Inheritors: This constructor calls the virtual method
            <see cref="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)" />. If you override this method be
            aware that it will be called before your is called constructor.
            </para>
        <para>
            As per the <see cref="T:log4net.Core.IOptionHandler" /> contract the <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" />
            method must be called after the properties on this object have been
            configured.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.#ctor(System.String)">
      <summary>
            Constructs a PatternLayout using the supplied conversion pattern
            </summary>
      <param name="pattern">the pattern to use</param>
      <remarks>
        <para>
            Note to Inheritors: This constructor calls the virtual method
            <see cref="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)" />. If you override this method be
            aware that it will be called before your is called constructor.
            </para>
        <para>
            When using this constructor the <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> method 
            need not be called. This may not be the case when using a subclass.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.CreatePatternParser(System.String)">
      <summary>
            Create the pattern parser instance
            </summary>
      <param name="pattern">the pattern to parse</param>
      <returns>The <see cref="T:log4net.Util.PatternParser" /> that will format the event</returns>
      <remarks>
        <para>
            Creates the <see cref="T:log4net.Util.PatternParser" /> used to parse the conversion string. Sets the
            global and instance rules on the <see cref="T:log4net.Util.PatternParser" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.ActivateOptions">
      <summary>
            Initialize layout options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Produces a formatted string as specified by the conversion pattern.
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <remarks>
        <para>
            Parse the <see cref="T:log4net.Core.LoggingEvent" /> using the patter format
            specified in the <see cref="P:log4net.Layout.PatternLayout.ConversionPattern" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.AddConverter(log4net.Layout.PatternLayout.ConverterInfo)">
      <summary>
            Add a converter to this PatternLayout
            </summary>
      <param name="converterInfo">the converter info</param>
      <remarks>
        <para>
            This version of the method is used by the configurator.
            Programmatic users should use the alternative <see cref="M:log4net.Layout.PatternLayout.AddConverter(System.String,System.Type)" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.PatternLayout.AddConverter(System.String,System.Type)">
      <summary>
            Add a converter to this PatternLayout
            </summary>
      <param name="name">the name of the conversion pattern for this converter</param>
      <param name="type">the type of the converter</param>
      <remarks>
        <para>
            Add a named pattern converter to this instance. This
            converter will be used in the formatting of the event.
            This method must be called before <see cref="M:log4net.Layout.PatternLayout.ActivateOptions" />.
            </para>
        <para>
            The <paramref name="type" /> specified must extend the 
            <see cref="T:log4net.Util.PatternConverter" /> type.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.PatternLayout.ConversionPattern">
      <summary>
            The pattern formatting string
            </summary>
      <remarks>
        <para>
            The <b>ConversionPattern</b> option. This is the string which
            controls formatting and consists of a mix of literal content and
            conversion specifiers.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.TypeConverters.IConvertFrom">
      <summary>
            Interface supported by type converters
            </summary>
      <remarks>
        <para>
            This interface supports conversion from arbitrary types
            to a single target type. See <see cref="T:log4net.Util.TypeConverters.TypeConverterAttribute" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.IConvertFrom.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Test if the <paramref name="sourceType" /> can be converted to the
            type supported by this converter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.IConvertFrom.ConvertFrom(System.Object)">
      <summary>
            Convert the source object to the type supported by this object
            </summary>
      <param name="source">the object to convert</param>
      <returns>the converted object</returns>
      <remarks>
        <para>
            Converts the <paramref name="source" /> to the type supported
            by this converter.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.RawLayoutConverter">
      <summary>
            Type converter for the <see cref="T:log4net.Layout.IRawLayout" /> interface
            </summary>
      <remarks>
        <para>
            Used to convert objects to the <see cref="T:log4net.Layout.IRawLayout" /> interface.
            Supports converting from the <see cref="T:log4net.Layout.ILayout" /> interface to
            the <see cref="T:log4net.Layout.IRawLayout" /> interface using the <see cref="T:log4net.Layout.Layout2RawLayoutAdapter" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.RawLayoutConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the sourceType be converted to an <see cref="T:log4net.Layout.IRawLayout" /></summary>
      <param name="sourceType">the source to be to be converted</param>
      <returns>
        <c>true</c> if the source type can be converted to <see cref="T:log4net.Layout.IRawLayout" /></returns>
      <remarks>
        <para>
            Test if the <paramref name="sourceType" /> can be converted to a
            <see cref="T:log4net.Layout.IRawLayout" />. Only <see cref="T:log4net.Layout.ILayout" /> is supported
            as the <paramref name="sourceType" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.RawLayoutConverter.ConvertFrom(System.Object)">
      <summary>
            Convert the value to a <see cref="T:log4net.Layout.IRawLayout" /> object
            </summary>
      <param name="source">the value to convert</param>
      <returns>the <see cref="T:log4net.Layout.IRawLayout" /> object</returns>
      <remarks>
        <para>
            Convert the <paramref name="source" /> object to a 
            <see cref="T:log4net.Layout.IRawLayout" /> object. If the <paramref name="source" /> object
            is a <see cref="T:log4net.Layout.ILayout" /> then the <see cref="T:log4net.Layout.Layout2RawLayoutAdapter" />
            is used to adapt between the two interfaces, otherwise an
            exception is thrown.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.RawPropertyLayout">
      <summary>
            Extract the value of a property from the <see cref="T:log4net.Core.LoggingEvent" /></summary>
      <remarks>
        <para>
            Extract the value of a property from the <see cref="T:log4net.Core.LoggingEvent" /></para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Layout.RawPropertyLayout.#ctor">
      <summary>
            Constructs a RawPropertyLayout
            </summary>
    </member>
    <member name="M:log4net.Layout.RawPropertyLayout.Format(log4net.Core.LoggingEvent)">
      <summary>
            Lookup the property for <see cref="P:log4net.Layout.RawPropertyLayout.Key" /></summary>
      <param name="loggingEvent">The event to format</param>
      <returns>returns property value</returns>
      <remarks>
        <para>
            Looks up and returns the object value of the property
            named <see cref="P:log4net.Layout.RawPropertyLayout.Key" />. If there is no property defined
            with than name then <c>null</c> will be returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.RawPropertyLayout.Key">
      <summary>
            The name of the value to lookup in the LoggingEvent Properties collection.
            </summary>
      <value>
            Value to lookup in the LoggingEvent Properties collection
            </value>
      <remarks>
        <para>
            String name of the property to lookup in the <see cref="T:log4net.Core.LoggingEvent" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.RawTimeStampLayout">
      <summary>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></summary>
      <remarks>
        <para>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.RawTimeStampLayout.#ctor">
      <summary>
            Constructs a RawTimeStampLayout
            </summary>
    </member>
    <member name="M:log4net.Layout.RawTimeStampLayout.Format(log4net.Core.LoggingEvent)">
      <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </summary>
      <param name="loggingEvent">The event to format</param>
      <returns>returns the time stamp</returns>
      <remarks>
        <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </para>
        <para>
            The time stamp is in local time. To format the time stamp
            in universal time use <see cref="T:log4net.Layout.RawUtcTimeStampLayout" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.RawUtcTimeStampLayout">
      <summary>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></summary>
      <remarks>
        <para>
            Extract the date from the <see cref="T:log4net.Core.LoggingEvent" /></para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.RawUtcTimeStampLayout.#ctor">
      <summary>
            Constructs a RawUtcTimeStampLayout
            </summary>
    </member>
    <member name="M:log4net.Layout.RawUtcTimeStampLayout.Format(log4net.Core.LoggingEvent)">
      <summary>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </summary>
      <param name="loggingEvent">The event to format</param>
      <returns>returns the time stamp</returns>
      <remarks>
        <para>
            Gets the <see cref="P:log4net.Core.LoggingEvent.TimeStamp" /> as a <see cref="T:System.DateTime" />.
            </para>
        <para>
            The time stamp is in universal time. To format the time stamp
            in local time use <see cref="T:log4net.Layout.RawTimeStampLayout" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.SimpleLayout">
      <summary>
            A very simple layout
            </summary>
      <remarks>
        <para>
            SimpleLayout consists of the level of the log statement,
            followed by " - " and then the log message itself. For example,
            <code>
            DEBUG - Hello world
            </code></para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Layout.SimpleLayout.#ctor">
      <summary>
            Constructs a SimpleLayout
            </summary>
    </member>
    <member name="M:log4net.Layout.SimpleLayout.ActivateOptions">
      <summary>
            Initialize layout options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.SimpleLayout.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.SimpleLayout.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Produces a simple formatted output.
            </summary>
      <param name="loggingEvent">the event being logged</param>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <remarks>
        <para>
            Formats the event as the level of the even,
            followed by " - " and then the log message itself. The
            output is terminated by a newline.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.XmlLayoutBase">
      <summary>
            Layout that formats the log events as XML elements.
            </summary>
      <remarks>
        <para>
            This is an abstract class that must be subclassed by an implementation 
            to conform to a specific schema.
            </para>
        <para>
            Deriving classes must implement the <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Layout.XmlLayoutBase.m_locationInfo">
      <summary>
            Flag to indicate if location information should be included in
            the XML events.
            </summary>
    </member>
    <member name="F:log4net.Layout.XmlLayoutBase.m_protectCloseTextWriter">
      <summary>
            Writer adapter that ignores Close
            </summary>
    </member>
    <member name="F:log4net.Layout.XmlLayoutBase.m_invalidCharReplacement">
      <summary>
            The string to replace invalid chars with
            </summary>
    </member>
    <member name="M:log4net.Layout.XmlLayoutBase.#ctor">
      <summary>
            Protected constructor to support subclasses
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Layout.XmlLayoutBase" /> class
            with no location info.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayoutBase.#ctor(System.Boolean)">
      <summary>
            Protected constructor to support subclasses
            </summary>
      <remarks>
        <para>
            The <paramref name="locationInfo" /> parameter determines whether 
            location information will be output by the layout. If 
            <paramref name="locationInfo" /> is set to <c>true</c>, then the 
            file name and line number of the statement at the origin of the log 
            statement will be output. 
            </para>
        <para>
            If you are embedding this layout within an SMTPAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayoutBase.ActivateOptions">
      <summary>
            Initialize layout options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.XmlLayoutBase.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayoutBase.Format(System.IO.TextWriter,log4net.Core.LoggingEvent)">
      <summary>
            Produces a formatted string.
            </summary>
      <param name="loggingEvent">The event being logged.</param>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <remarks>
        <para>
            Format the <see cref="T:log4net.Core.LoggingEvent" /> and write it to the <see cref="T:System.IO.TextWriter" />.
            </para>
        <para>
            This method creates an <see cref="T:System.Xml.XmlTextWriter" /> that writes to the
            <paramref name="writer" />. The <see cref="T:System.Xml.XmlTextWriter" /> is passed 
            to the <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method. Subclasses should override the
            <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method rather than this method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
      <summary>
            Does the actual writing of the XML.
            </summary>
      <param name="writer">The writer to use to output the event to.</param>
      <param name="loggingEvent">The event to write.</param>
      <remarks>
        <para>
            Subclasses should override this method to format
            the <see cref="T:log4net.Core.LoggingEvent" /> as XML.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayoutBase.LocationInfo">
      <summary>
            Gets a value indicating whether to include location information in 
            the XML events.
            </summary>
      <value>
        <c>true</c> if location information should be included in the XML 
            events; otherwise, <c>false</c>.
            </value>
      <remarks>
        <para>
            If <see cref="P:log4net.Layout.XmlLayoutBase.LocationInfo" /> is set to <c>true</c>, then the file 
            name and line number of the statement at the origin of the log 
            statement will be output. 
            </para>
        <para>
            If you are embedding this layout within an <c>SMTPAppender</c>
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement">
      <summary>
            The string to replace characters that can not be expressed in XML with.
            <remarks><para>
            Not all characters may be expressed in XML. This property contains the
            string to replace those that can not with. This defaults to a ?. Set it
            to the empty string to simply remove offending characters. For more
            details on the allowed character ranges see http://www.w3.org/TR/REC-xml/#charsets
            Character replacement will occur in  the log message, the property names 
            and the property values.
            </para></remarks></summary>
    </member>
    <member name="P:log4net.Layout.XmlLayoutBase.ContentType">
      <summary>
            Gets the content type output by this layout. 
            </summary>
      <value>
            As this is the XML layout, the value is always <c>"text/xml"</c>.
            </value>
      <remarks>
        <para>
            As this is the XML layout, the value is always <c>"text/xml"</c>.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.XmlLayout">
      <summary>
             Layout that formats the log events as XML elements.
             </summary>
      <remarks>
        <para>
             The output of the <see cref="T:log4net.Layout.XmlLayout" /> consists of a series of 
             log4net:event elements. It does not output a complete well-formed XML 
             file. The output is designed to be included as an <em>external entity</em>
             in a separate file to form a correct XML file.
             </para>
        <para>
             For example, if <c>abc</c> is the name of the file where
             the <see cref="T:log4net.Layout.XmlLayout" /> output goes, then a well-formed XML file would 
             be:
             </para>
        <code lang="XML">
             &lt;?xml version="1.0" ?&gt;
             
             &lt;!DOCTYPE log4net:events SYSTEM "log4net-events.dtd" [&lt;!ENTITY data SYSTEM "abc"&gt;]&gt;
            
             &lt;log4net:events version="1.2" xmlns:log4net="http://logging.apache.org/log4net/schemas/log4net-events-1.2&gt;
                 &amp;data;
             &lt;/log4net:events&gt;
             </code>
        <para>
             This approach enforces the independence of the <see cref="T:log4net.Layout.XmlLayout" /> 
             and the appender where it is embedded.
             </para>
        <para>
             The <c>version</c> attribute helps components to correctly
             interpret output generated by <see cref="T:log4net.Layout.XmlLayout" />. The value of 
             this attribute should be "1.2" for release 1.2 and later.
             </para>
        <para>
             Alternatively the <c>Header</c> and <c>Footer</c> properties can be
             configured to output the correct XML header, open tag and close tag.
             When setting the <c>Header</c> and <c>Footer</c> properties it is essential
             that the underlying data store not be appendable otherwise the data
             will become invalid XML.
             </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Layout.XmlLayout.m_prefix">
      <summary>
            The prefix to use for all generated element names
            </summary>
    </member>
    <member name="M:log4net.Layout.XmlLayout.#ctor">
      <summary>
            Constructs an XmlLayout
            </summary>
    </member>
    <member name="M:log4net.Layout.XmlLayout.#ctor(System.Boolean)">
      <summary>
            Constructs an XmlLayout.
            </summary>
      <remarks>
        <para>
            The <b>LocationInfo</b> option takes a boolean value. By
            default, it is set to false which means there will be no location
            information output by this layout. If the the option is set to
            true, then the file name and line number of the statement
            at the origin of the log statement will be output. 
            </para>
        <para>
            If you are embedding this layout within an SmtpAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayout.ActivateOptions">
      <summary>
            Initialize layout options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Layout.XmlLayout.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Layout.XmlLayout.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Layout.XmlLayout.ActivateOptions" /> must be called again.
            </para>
        <para>
            Builds a cache of the element names
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayout.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
      <summary>
            Does the actual writing of the XML.
            </summary>
      <param name="writer">The writer to use to output the event to.</param>
      <param name="loggingEvent">The event to write.</param>
      <remarks>
        <para>
            Override the base class <see cref="M:log4net.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)" /> method
            to write the <see cref="T:log4net.Core.LoggingEvent" /> to the <see cref="T:System.Xml.XmlWriter" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayout.Prefix">
      <summary>
            The prefix to use for all element names
            </summary>
      <remarks>
        <para>
            The default prefix is <b>log4net</b>. Set this property
            to change the prefix. If the prefix is set to an empty string
            then no prefix will be written.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayout.Base64EncodeMessage">
      <summary>
            Set whether or not to base64 encode the message.
            </summary>
      <remarks>
        <para>
            By default the log message will be written as text to the xml
            output. This can cause problems when the message contains binary
            data. By setting this to true the contents of the message will be
            base64 encoded. If this is set then invalid character replacement
            (see <see cref="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement" />) will not be performed
            on the log message.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayout.Base64EncodeProperties">
      <summary>
            Set whether or not to base64 encode the property values.
            </summary>
      <remarks>
        <para>
            By default the properties will be written as text to the xml
            output. This can cause problems when one or more properties contain
            binary data. By setting this to true the values of the properties
            will be base64 encoded. If this is set then invalid character replacement
            (see <see cref="P:log4net.Layout.XmlLayoutBase.InvalidCharReplacement" />) will not be performed
            on the property values.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Layout.XmlLayoutSchemaLog4j">
      <summary>
            Layout that formats the log events as XML elements compatible with the log4j schema
            </summary>
      <remarks>
        <para>
            Formats the log events according to the http://logging.apache.org/log4j schema.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Layout.XmlLayoutSchemaLog4j.s_date1970">
      <summary>
            The 1st of January 1970 in UTC
            </summary>
    </member>
    <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.#ctor">
      <summary>
            Constructs an XMLLayoutSchemaLog4j
            </summary>
    </member>
    <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.#ctor(System.Boolean)">
      <summary>
            Constructs an XMLLayoutSchemaLog4j.
            </summary>
      <remarks>
        <para>
            The <b>LocationInfo</b> option takes a boolean value. By
            default, it is set to false which means there will be no location
            information output by this layout. If the the option is set to
            true, then the file name and line number of the statement
            at the origin of the log statement will be output. 
            </para>
        <para>
            If you are embedding this layout within an SMTPAppender
            then make sure to set the <b>LocationInfo</b> option of that 
            appender as well.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Layout.XmlLayoutSchemaLog4j.FormatXml(System.Xml.XmlWriter,log4net.Core.LoggingEvent)">
      <summary>
            Actually do the writing of the xml
            </summary>
      <param name="writer">the writer to use</param>
      <param name="loggingEvent">the event to write</param>
      <remarks>
        <para>
            Generate XML that is compatible with the log4j schema.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Layout.XmlLayoutSchemaLog4j.Version">
      <summary>
            The version of the log4j schema to use.
            </summary>
      <remarks>
        <para>
            Only version 1.2 of the log4j schema is supported.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.ObjectRenderer.IObjectRenderer">
      <summary>
            Implement this interface in order to render objects as strings
            </summary>
      <remarks>
        <para>
            Certain types require special case conversion to
            string form. This conversion is done by an object renderer.
            Object renderers implement the <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />
            interface.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.ObjectRenderer.IObjectRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
      <summary>
            Render the object <paramref name="obj" /> to a string
            </summary>
      <param name="rendererMap">The map used to lookup renderers</param>
      <param name="obj">The object to render</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            Render the object <paramref name="obj" /> to a 
            string.
            </para>
        <para>
            The <paramref name="rendererMap" /> parameter is
            provided to lookup and render other objects. This is
            very useful where <paramref name="obj" /> contains
            nested objects of unknown type. The <see cref="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object,System.IO.TextWriter)" />
            method can be used to render these objects.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.ObjectRenderer.DefaultRenderer">
      <summary>
            The default object Renderer.
            </summary>
      <remarks>
        <para>
            The default renderer supports rendering objects and collections to strings.
            </para>
        <para>
            See the <see cref="M:log4net.ObjectRenderer.DefaultRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)" /> method for details of the output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.ObjectRenderer.DefaultRenderer.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderObject(log4net.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
      <summary>
            Render the object <paramref name="obj" /> to a string
            </summary>
      <param name="rendererMap">The map used to lookup renderers</param>
      <param name="obj">The object to render</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            Render the object <paramref name="obj" /> to a string.
            </para>
        <para>
            The <paramref name="rendererMap" /> parameter is
            provided to lookup and render other objects. This is
            very useful where <paramref name="obj" /> contains
            nested objects of unknown type. The <see cref="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object)" />
            method can be used to render these objects.
            </para>
        <para>
            The default renderer supports rendering objects to strings as follows:
            </para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Rendered String</description>
          </listheader>
          <item>
            <term>
              <c>null</c>
            </term>
            <description>
              <para>"(null)"</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:System.Array" />
            </term>
            <description>
              <para>
            		For a one dimensional array this is the
            		array type name, an open brace, followed by a comma
            		separated list of the elements (using the appropriate
            		renderer), followed by a close brace. 
            		</para>
              <para>
            		For example: <c>int[] {1, 2, 3}</c>.
            		</para>
              <para>
            		If the array is not one dimensional the 
            		<c>Array.ToString()</c> is returned.
            		</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:System.Collections.IEnumerable" />, <see cref="T:System.Collections.ICollection" /> &amp; <see cref="T:System.Collections.IEnumerator" /></term>
            <description>
              <para>
            		Rendered as an open brace, followed by a comma
            		separated list of the elements (using the appropriate
            		renderer), followed by a close brace.
            		</para>
              <para>
            		For example: <c>{a, b, c}</c>.
            		</para>
              <para>
            		All collection classes that implement <see cref="T:System.Collections.ICollection" /> its subclasses, 
            		or generic equivalents all implement the <see cref="T:System.Collections.IEnumerable" /> interface.
            		</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:System.Collections.DictionaryEntry" />
            </term>
            <description>
              <para>
            		Rendered as the key, an equals sign ('='), and the value (using the appropriate
            		renderer). 
            		</para>
              <para>
            		For example: <c>key=value</c>.
            		</para>
            </description>
          </item>
          <item>
            <term>other</term>
            <description>
              <para>
                <c>Object.ToString()</c>
              </para>
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderArray(log4net.ObjectRenderer.RendererMap,System.Array,System.IO.TextWriter)">
      <summary>
            Render the array argument into a string
            </summary>
      <param name="rendererMap">The map used to lookup renderers</param>
      <param name="array">the array to render</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            For a one dimensional array this is the
            array type name, an open brace, followed by a comma
            separated list of the elements (using the appropriate
            renderer), followed by a close brace. For example:
            <c>int[] {1, 2, 3}</c>.
            </para>
        <para>
            If the array is not one dimensional the 
            <c>Array.ToString()</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderEnumerator(log4net.ObjectRenderer.RendererMap,System.Collections.IEnumerator,System.IO.TextWriter)">
      <summary>
            Render the enumerator argument into a string
            </summary>
      <param name="rendererMap">The map used to lookup renderers</param>
      <param name="enumerator">the enumerator to render</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            Rendered as an open brace, followed by a comma
            separated list of the elements (using the appropriate
            renderer), followed by a close brace. For example:
            <c>{a, b, c}</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.DefaultRenderer.RenderDictionaryEntry(log4net.ObjectRenderer.RendererMap,System.Collections.DictionaryEntry,System.IO.TextWriter)">
      <summary>
            Render the DictionaryEntry argument into a string
            </summary>
      <param name="rendererMap">The map used to lookup renderers</param>
      <param name="entry">the DictionaryEntry to render</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            Render the key, an equals sign ('='), and the value (using the appropriate
            renderer). For example: <c>key=value</c>.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.ObjectRenderer.RendererMap">
      <summary>
            Map class objects to an <see cref="T:log4net.ObjectRenderer.IObjectRenderer" />.
            </summary>
      <remarks>
        <para>
            Maintains a mapping between types that require special
            rendering and the <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> that
            is used to render them.
            </para>
        <para>
            The <see cref="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object)" /> method is used to render an
            <c>object</c> using the appropriate renderers defined in this map.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.#ctor">
      <summary>
            Default Constructor
            </summary>
      <remarks>
        <para>
            Default constructor.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object)">
      <summary>
            Render <paramref name="obj" /> using the appropriate renderer.
            </summary>
      <param name="obj">the object to render to a string</param>
      <returns>the object rendered as a string</returns>
      <remarks>
        <para>
            This is a convenience method used to render an object to a string.
            The alternative method <see cref="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object,System.IO.TextWriter)" />
            should be used when streaming output to a <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.FindAndRender(System.Object,System.IO.TextWriter)">
      <summary>
            Render <paramref name="obj" /> using the appropriate renderer.
            </summary>
      <param name="obj">the object to render to a string</param>
      <param name="writer">The writer to render to</param>
      <remarks>
        <para>
            Find the appropriate renderer for the type of the
            <paramref name="obj" /> parameter. This is accomplished by calling the
            <see cref="M:log4net.ObjectRenderer.RendererMap.Get(System.Type)" /> method. Once a renderer is found, it is
            applied on the object <paramref name="obj" /> and the result is returned
            as a <see cref="T:System.String" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Object)">
      <summary>
            Gets the renderer for the specified object type
            </summary>
      <param name="obj">the object to lookup the renderer for</param>
      <returns>the renderer for <paramref name="obj" /></returns>
      <remarks>
        <param>
            Gets the renderer for the specified object type.
            </param>
        <param>
            Syntactic sugar method that calls <see cref="M:log4net.ObjectRenderer.RendererMap.Get(System.Type)" /> 
            with the type of the object parameter.
            </param>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.Get(System.Type)">
      <summary>
            Gets the renderer for the specified type
            </summary>
      <param name="type">the type to lookup the renderer for</param>
      <returns>the renderer for the specified type</returns>
      <remarks>
        <para>
            Returns the renderer for the specified type.
            If no specific renderer has been defined the
            <see cref="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer" /> will be returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.SearchTypeAndInterfaces(System.Type)">
      <summary>
            Internal function to recursively search interfaces
            </summary>
      <param name="type">the type to lookup the renderer for</param>
      <returns>the renderer for the specified type</returns>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.Clear">
      <summary>
            Clear the map of renderers
            </summary>
      <remarks>
        <para>
            Clear the custom renderers defined by using
            <see cref="M:log4net.ObjectRenderer.RendererMap.Put(System.Type,log4net.ObjectRenderer.IObjectRenderer)" />. The <see cref="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer" />
            cannot be removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.ObjectRenderer.RendererMap.Put(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
      <summary>
            Register an <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> for <paramref name="typeToRender" />. 
            </summary>
      <param name="typeToRender">the type that will be rendered by <paramref name="renderer" /></param>
      <param name="renderer">the renderer for <paramref name="typeToRender" /></param>
      <remarks>
        <para>
            Register an object renderer for a specific source type.
            This renderer will be returned from a call to <see cref="M:log4net.ObjectRenderer.RendererMap.Get(System.Type)" />
            specifying the same <paramref name="typeToRender" /> as an argument.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.ObjectRenderer.RendererMap.DefaultRenderer">
      <summary>
            Get the default renderer instance
            </summary>
      <value>the default renderer</value>
      <remarks>
        <para>
            Get the default renderer
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Plugin.IPlugin">
      <summary>
            Interface implemented by logger repository plugins.
            </summary>
      <remarks>
        <para>
            Plugins define additional behavior that can be associated
            with a <see cref="T:log4net.Repository.ILoggerRepository" />.
            The <see cref="T:log4net.Plugin.PluginMap" /> held by the <see cref="P:log4net.Repository.ILoggerRepository.PluginMap" />
            property is used to store the plugins for a repository.
            </para>
        <para>
            The <c>log4net.Config.PluginAttribute</c> can be used to
            attach plugins to repositories created using configuration
            attributes.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Plugin.IPlugin.Attach(log4net.Repository.ILoggerRepository)">
      <summary>
            Attaches the plugin to the specified <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
      <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin should be attached to.</param>
      <remarks>
        <para>
            A plugin may only be attached to a single repository.
            </para>
        <para>
            This method is called when the plugin is attached to the repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.IPlugin.Shutdown">
      <summary>
            Is called when the plugin is to shutdown.
            </summary>
      <remarks>
        <para>
            This method is called to notify the plugin that 
            it should stop operating and should detach from
            the repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.IPlugin.Name">
      <summary>
            Gets the name of the plugin.
            </summary>
      <value>
            The name of the plugin.
            </value>
      <remarks>
        <para>
            Plugins are stored in the <see cref="T:log4net.Plugin.PluginMap" />
            keyed by name. Each plugin instance attached to a
            repository must be a unique name.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Plugin.PluginCollection">
      <summary>
            A strongly-typed collection of <see cref="T:log4net.Plugin.IPlugin" /> objects.
            </summary>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator">
      <summary>
            Supports type-safe iteration over a <see cref="T:log4net.Plugin.PluginCollection" />.
            </summary>
      <exclude />
    </member>
    <member name="M:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.IPluginCollectionEnumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
    </member>
    <member name="T:log4net.Plugin.PluginCollection.Tag">
      <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
      <exclude />
    </member>
    <member name="T:log4net.Plugin.PluginCollection.Enumerator">
      <summary>
            Supports simple iteration over a <see cref="T:log4net.Plugin.PluginCollection" />.
            </summary>
      <exclude />
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Enumerator.#ctor(log4net.Plugin.PluginCollection)">
      <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
      <param name="tc">
      </param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Enumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
      <returns>
        <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Enumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.Enumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
      <value>
            The current element in the collection.
            </value>
    </member>
    <member name="T:log4net.Plugin.PluginCollection.ReadOnlyPluginCollection">
      <exclude />
    </member>
    <member name="M:log4net.Plugin.PluginCollection.ReadOnly(log4net.Plugin.PluginCollection)">
      <summary>
            Creates a read-only wrapper for a <c>PluginCollection</c> instance.
            </summary>
      <param name="list">list to create a readonly wrapper arround</param>
      <returns>
            A <c>PluginCollection</c> wrapper that is read-only.
            </returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor">
      <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that has the specified initial capacity.
            </summary>
      <param name="capacity">
            The number of elements that the new <c>PluginCollection</c> is initially capable of storing.
            </param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.PluginCollection)">
      <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <c>PluginCollection</c>.
            </summary>
      <param name="c">The <c>PluginCollection</c> whose elements are copied to the new collection.</param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.IPlugin[])">
      <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Plugin.IPlugin" /> array.
            </summary>
      <param name="a">The <see cref="T:log4net.Plugin.IPlugin" /> array whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <c>PluginCollection</c> class
            that contains elements copied from the specified <see cref="T:log4net.Plugin.IPlugin" /> collection.
            </summary>
      <param name="col">The <see cref="T:log4net.Plugin.IPlugin" /> collection whose elements are copied to the new list.</param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.#ctor(log4net.Plugin.PluginCollection.Tag)">
      <summary>
            Allow subclasses to avoid our default constructors
            </summary>
      <param name="tag">
      </param>
      <exclude />
    </member>
    <member name="M:log4net.Plugin.PluginCollection.CopyTo(log4net.Plugin.IPlugin[])">
      <summary>
            Copies the entire <c>PluginCollection</c> to a one-dimensional
            <see cref="T:log4net.Plugin.IPlugin" /> array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Plugin.IPlugin" /> array to copy to.</param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.CopyTo(log4net.Plugin.IPlugin[],System.Int32)">
      <summary>
            Copies the entire <c>PluginCollection</c> to a one-dimensional
            <see cref="T:log4net.Plugin.IPlugin" /> array, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:log4net.Plugin.IPlugin" /> array to copy to.</param>
      <param name="start">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Add(log4net.Plugin.IPlugin)">
      <summary>
            Adds a <see cref="T:log4net.Plugin.IPlugin" /> to the end of the <c>PluginCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to be added to the end of the <c>PluginCollection</c>.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Clear">
      <summary>
            Removes all elements from the <c>PluginCollection</c>.
            </summary>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Clone">
      <summary>
            Creates a shallow copy of the <see cref="T:log4net.Plugin.PluginCollection" />.
            </summary>
      <returns>A new <see cref="T:log4net.Plugin.PluginCollection" /> with a shallow copy of the collection data.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Contains(log4net.Plugin.IPlugin)">
      <summary>
            Determines whether a given <see cref="T:log4net.Plugin.IPlugin" /> is in the <c>PluginCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to check for.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> is found in the <c>PluginCollection</c>; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.IndexOf(log4net.Plugin.IPlugin)">
      <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:log4net.Plugin.IPlugin" />
            in the <c>PluginCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to locate in the <c>PluginCollection</c>.</param>
      <returns>
            The zero-based index of the first occurrence of <paramref name="item" /> 
            in the entire <c>PluginCollection</c>, if found; otherwise, -1.
            </returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Insert(System.Int32,log4net.Plugin.IPlugin)">
      <summary>
            Inserts an element into the <c>PluginCollection</c> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.Remove(log4net.Plugin.IPlugin)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:log4net.Plugin.IPlugin" /> from the <c>PluginCollection</c>.
            </summary>
      <param name="item">The <see cref="T:log4net.Plugin.IPlugin" /> to remove from the <c>PluginCollection</c>.</param>
      <exception cref="T:System.ArgumentException">
            The specified <see cref="T:log4net.Plugin.IPlugin" /> was not found in the <c>PluginCollection</c>.
            </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <c>PluginCollection</c>.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero.</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the <c>PluginCollection</c>.
            </summary>
      <returns>An <see cref="T:log4net.Plugin.PluginCollection.Enumerator" /> for the entire <c>PluginCollection</c>.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.AddRange(log4net.Plugin.PluginCollection)">
      <summary>
            Adds the elements of another <c>PluginCollection</c> to the current <c>PluginCollection</c>.
            </summary>
      <param name="x">The <c>PluginCollection</c> whose elements should be added to the end of the current <c>PluginCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count" /> of the <c>PluginCollection</c>.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.AddRange(log4net.Plugin.IPlugin[])">
      <summary>
            Adds the elements of a <see cref="T:log4net.Plugin.IPlugin" /> array to the current <c>PluginCollection</c>.
            </summary>
      <param name="x">The <see cref="T:log4net.Plugin.IPlugin" /> array whose elements should be added to the end of the <c>PluginCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count" /> of the <c>PluginCollection</c>.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.AddRange(System.Collections.ICollection)">
      <summary>
            Adds the elements of a <see cref="T:log4net.Plugin.IPlugin" /> collection to the current <c>PluginCollection</c>.
            </summary>
      <param name="col">The <see cref="T:log4net.Plugin.IPlugin" /> collection whose elements should be added to the end of the <c>PluginCollection</c>.</param>
      <returns>The new <see cref="P:log4net.Plugin.PluginCollection.Count" /> of the <c>PluginCollection</c>.</returns>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.TrimToSize">
      <summary>
            Sets the capacity to the actual number of elements.
            </summary>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.ValidateIndex(System.Int32)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero.</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:log4net.Plugin.PluginCollection.ValidateIndex(System.Int32,System.Boolean)">
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero.</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.Count">
      <summary>
            Gets the number of elements actually contained in the <c>PluginCollection</c>.
            </summary>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
      <returns>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
      <value>
            An object that can be used to synchronize access to the collection.
            </value>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:log4net.Plugin.IPlugin" /> at the specified index.
            </summary>
      <value>
            The <see cref="T:log4net.Plugin.IPlugin" /> at the specified index.
            </value>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than zero.</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:log4net.Plugin.PluginCollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.IsFixedSize">
      <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
      <value>
        <c>true</c> if the collection has a fixed size; otherwise, <c>false</c>. The default is <c>false</c>.</value>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.IsReadOnly">
      <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
      <value>
        <c>true</c> if the collection is read-only; otherwise, <c>false</c>. The default is <c>false</c>.</value>
    </member>
    <member name="P:log4net.Plugin.PluginCollection.Capacity">
      <summary>
            Gets or sets the number of elements the <c>PluginCollection</c> can contain.
            </summary>
      <value>
            The number of elements the <c>PluginCollection</c> can contain.
            </value>
    </member>
    <member name="T:log4net.Plugin.PluginMap">
      <summary>
            Map of repository plugins.
            </summary>
      <remarks>
        <para>
            This class is a name keyed map of the plugins that are
            attached to a repository.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Plugin.PluginMap.#ctor(log4net.Repository.ILoggerRepository)">
      <summary>
            Constructor
            </summary>
      <param name="repository">The repository that the plugins should be attached to.</param>
      <remarks>
        <para>
            Initialize a new instance of the <see cref="T:log4net.Plugin.PluginMap" /> class with a 
            repository that the plugins should be attached to.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.PluginMap.Add(log4net.Plugin.IPlugin)">
      <summary>
            Adds a <see cref="T:log4net.Plugin.IPlugin" /> to the map.
            </summary>
      <param name="plugin">The <see cref="T:log4net.Plugin.IPlugin" /> to add to the map.</param>
      <remarks>
        <para>
            The <see cref="T:log4net.Plugin.IPlugin" /> will be attached to the repository when added.
            </para>
        <para>
            If there already exists a plugin with the same name 
            attached to the repository then the old plugin will
            be <see cref="M:log4net.Plugin.IPlugin.Shutdown" /> and replaced with
            the new plugin.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.PluginMap.Remove(log4net.Plugin.IPlugin)">
      <summary>
            Removes a <see cref="T:log4net.Plugin.IPlugin" /> from the map.
            </summary>
      <param name="plugin">The <see cref="T:log4net.Plugin.IPlugin" /> to remove from the map.</param>
      <remarks>
        <para>
            Remove a specific plugin from this map.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.PluginMap.Item(System.String)">
      <summary>
            Gets a <see cref="T:log4net.Plugin.IPlugin" /> by name.
            </summary>
      <param name="name">The name of the <see cref="T:log4net.Plugin.IPlugin" /> to lookup.</param>
      <returns>
            The <see cref="T:log4net.Plugin.IPlugin" /> from the map with the name specified, or 
            <c>null</c> if no plugin is found.
            </returns>
      <remarks>
        <para>
            Lookup a plugin by name. If the plugin is not found <c>null</c>
            will be returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.PluginMap.AllPlugins">
      <summary>
            Gets all possible plugins as a list of <see cref="T:log4net.Plugin.IPlugin" /> objects.
            </summary>
      <value>All possible plugins as a list of <see cref="T:log4net.Plugin.IPlugin" /> objects.</value>
      <remarks>
        <para>
            Get a collection of all the plugins defined in this map.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Plugin.PluginSkeleton">
      <summary>
            Base implementation of <see cref="T:log4net.Plugin.IPlugin" /></summary>
      <remarks>
        <para>
            Default abstract implementation of the <see cref="T:log4net.Plugin.IPlugin" />
            interface. This base class can be used by implementors
            of the <see cref="T:log4net.Plugin.IPlugin" /> interface.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Plugin.PluginSkeleton.m_name">
      <summary>
            The name of this plugin.
            </summary>
    </member>
    <member name="F:log4net.Plugin.PluginSkeleton.m_repository">
      <summary>
            The repository this plugin is attached to.
            </summary>
    </member>
    <member name="M:log4net.Plugin.PluginSkeleton.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="name">the name of the plugin</param>
      <remarks>
            Initializes a new Plugin with the specified name.
            </remarks>
    </member>
    <member name="M:log4net.Plugin.PluginSkeleton.Attach(log4net.Repository.ILoggerRepository)">
      <summary>
            Attaches this plugin to a <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
      <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin should be attached to.</param>
      <remarks>
        <para>
            A plugin may only be attached to a single repository.
            </para>
        <para>
            This method is called when the plugin is attached to the repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.PluginSkeleton.Shutdown">
      <summary>
            Is called when the plugin is to shutdown.
            </summary>
      <remarks>
        <para>
            This method is called to notify the plugin that 
            it should stop operating and should detach from
            the repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.PluginSkeleton.Name">
      <summary>
            Gets or sets the name of the plugin.
            </summary>
      <value>
            The name of the plugin.
            </value>
      <remarks>
        <para>
            Plugins are stored in the <see cref="T:log4net.Plugin.PluginMap" />
            keyed by name. Each plugin instance attached to a
            repository must be a unique name.
            </para>
        <para>
            The name of the plugin must not change one the 
            plugin has been attached to a repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.PluginSkeleton.LoggerRepository">
      <summary>
            The repository for this plugin
            </summary>
      <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin is attached to.
            </value>
      <remarks>
        <para>
            Gets or sets the <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin is 
            attached to.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Plugin.RemoteLoggingServerPlugin">
      <summary>
            Plugin that listens for events from the <see cref="T:log4net.Appender.RemotingAppender" /></summary>
      <remarks>
        <para>
            This plugin publishes an instance of <see cref="T:log4net.Appender.RemotingAppender.IRemoteLoggingSink" /> 
            on a specified <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri" />. This listens for logging events delivered from
            a remote <see cref="T:log4net.Appender.RemotingAppender" />.
            </para>
        <para>
            When an event is received it is relogged within the attached repository
            as if it had been raised locally.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl">
      <summary>
            Delivers <see cref="T:log4net.Core.LoggingEvent" /> objects to a remote sink.
            </summary>
      <remarks>
        <para>
            Internal class used to listen for logging events
            and deliver them to the local repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.#ctor(log4net.Repository.ILoggerRepository)">
      <summary>
            Constructor
            </summary>
      <param name="repository">The repository to log to.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl" /> for the
            specified <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.LogEvents(log4net.Core.LoggingEvent[])">
      <summary>
            Logs the events to the repository.
            </summary>
      <param name="events">The events to log.</param>
      <remarks>
        <para>
            The events passed are logged to the <see cref="T:log4net.Repository.ILoggerRepository" /></para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.RemoteLoggingSinkImpl.InitializeLifetimeService">
      <summary>
            Obtains a lifetime service object to control the lifetime 
            policy for this instance.
            </summary>
      <returns>
        <c>null</c> to indicate that this instance should live forever.</returns>
      <remarks>
        <para>
            Obtains a lifetime service object to control the lifetime 
            policy for this instance. This object should live forever
            therefore this implementation returns <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin" /> class.
            </para>
        <para>
            The <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri" /> property must be set.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.#ctor(System.String)">
      <summary>
            Construct with sink Uri.
            </summary>
      <param name="sinkUri">The name to publish the sink under in the remoting infrastructure. 
            See <see cref="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri" /> for more details.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Plugin.RemoteLoggingServerPlugin" /> class
            with specified name.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.Attach(log4net.Repository.ILoggerRepository)">
      <summary>
            Attaches this plugin to a <see cref="T:log4net.Repository.ILoggerRepository" />.
            </summary>
      <param name="repository">The <see cref="T:log4net.Repository.ILoggerRepository" /> that this plugin should be attached to.</param>
      <remarks>
        <para>
            A plugin may only be attached to a single repository.
            </para>
        <para>
            This method is called when the plugin is attached to the repository.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Plugin.RemoteLoggingServerPlugin.Shutdown">
      <summary>
            Is called when the plugin is to shutdown.
            </summary>
      <remarks>
        <para>
            When the plugin is shutdown the remote logging
            sink is disconnected.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Plugin.RemoteLoggingServerPlugin.SinkUri">
      <summary>
            Gets or sets the URI of this sink.
            </summary>
      <value>
            The URI of this sink.
            </value>
      <remarks>
        <para>
            This is the name under which the object is marshaled.
            <see cref="M:System.Runtime.Remoting.RemotingServices.Marshal(System.MarshalByRefObject,System.String,System.Type)" /></para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.ILoggerFactory">
      <summary>
            Interface abstracts creation of <see cref="T:log4net.Repository.Hierarchy.Logger" /> instances
            </summary>
      <remarks>
        <para>
            This interface is used by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> to 
            create new <see cref="T:log4net.Repository.Hierarchy.Logger" /> objects.
            </para>
        <para>
            The <see cref="M:log4net.Repository.Hierarchy.ILoggerFactory.CreateLogger(System.String)" /> method is called
            to create a named <see cref="T:log4net.Repository.Hierarchy.Logger" />.
            </para>
        <para>
            Implement this interface to create new subclasses of <see cref="T:log4net.Repository.Hierarchy.Logger" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.Hierarchy.ILoggerFactory.CreateLogger(System.String)">
      <summary>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance
            </summary>
      <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
      <returns>The <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance for the specified name.</returns>
      <remarks>
        <para>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance with the 
            specified name.
            </para>
        <para>
            Called by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> to create
            new named <see cref="T:log4net.Repository.Hierarchy.Logger" /> instances.
            </para>
        <para>
            If the <paramref name="name" /> is <c>null</c> then the root logger
            must be returned.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.DefaultLoggerFactory">
      <summary>
            Default implementation of <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /></summary>
      <remarks>
        <para>
            This default implementation of the <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />
            interface is used to create the default subclass
            of the <see cref="T:log4net.Repository.Hierarchy.Logger" /> object.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl">
      <summary>
            Default internal subclass of <see cref="T:log4net.Repository.Hierarchy.Logger" /></summary>
      <remarks>
        <para>
            This subclass has no additional behavior over the
            <see cref="T:log4net.Repository.Hierarchy.Logger" /> class but does allow instances
            to be created.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl.#ctor(System.String)">
      <summary>
            Construct a new Logger
            </summary>
      <param name="name">the name of the logger</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl" /> class
            with the specified name. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory" /> class. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.DefaultLoggerFactory.CreateLogger(System.String)">
      <summary>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance
            </summary>
      <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
      <returns>The <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance for the specified name.</returns>
      <remarks>
        <para>
            Create a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance with the 
            specified name.
            </para>
        <para>
            Called by the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> to create
            new named <see cref="T:log4net.Repository.Hierarchy.Logger" /> instances.
            </para>
        <para>
            If the <paramref name="name" /> is <c>null</c> then the root logger
            must be returned.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.Logger">
      <summary>
            Implementation of <see cref="T:log4net.Core.ILogger" /> used by <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" /></summary>
      <remarks>
        <para>
            Internal class used to provide implementation of <see cref="T:log4net.Core.ILogger" />
            interface. Applications should use <see cref="T:log4net.LogManager" /> to get
            logger instances.
            </para>
        <para>
            This is one of the central classes in the log4net implementation. One of the
            distinctive features of log4net are hierarchical loggers and their
            evaluation. The <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" /> organizes the <see cref="T:log4net.Repository.Hierarchy.Logger" />
            instances into a rooted tree hierarchy.
            </para>
        <para>
            The <see cref="T:log4net.Repository.Hierarchy.Logger" /> class is abstract. Only concrete subclasses of
            <see cref="T:log4net.Repository.Hierarchy.Logger" /> can be created. The <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />
            is used to create instances of this type for the <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Aspi Havewala</author>
      <author>Douglas de la Torre</author>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.ThisDeclaringType">
      <summary>
            The fully qualified type of the Logger class.
            </summary>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_name">
      <summary>
            The name of this logger.
            </summary>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_level">
      <summary>
            The assigned level of this logger. 
            </summary>
      <remarks>
        <para>
            The <c>level</c> variable need not be 
            assigned a value in which case it is inherited 
            form the hierarchy.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_parent">
      <summary>
            The parent of this logger.
            </summary>
      <remarks>
        <para>
            The parent of this logger. 
            All loggers have at least one ancestor which is the root logger.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_hierarchy">
      <summary>
            Loggers need to know what Hierarchy they are in.
            </summary>
      <remarks>
        <para>
            Loggers need to know what Hierarchy they are in.
            The hierarchy that this logger is a member of is stored
            here.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_appenderAttachedImpl">
      <summary>
            Helper implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            </summary>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_additive">
      <summary>
            Flag indicating if child loggers inherit their parents appenders
            </summary>
      <remarks>
        <para>
            Additivity is set to true by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this logger are not used. However, the children
            of this logger will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Repository.Hierarchy.Logger.m_appenderLock">
      <summary>
            Lock to protect AppenderAttachedImpl variable m_appenderAttachedImpl
            </summary>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.#ctor(System.String)">
      <summary>
            This constructor created a new <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance and
            sets its name.
            </summary>
      <param name="name">The name of the <see cref="T:log4net.Repository.Hierarchy.Logger" />.</param>
      <remarks>
        <para>
            This constructor is protected and designed to be used by
            a subclass that is not abstract.
            </para>
        <para>
            Loggers are constructed by <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /> 
            objects. See <see cref="T:log4net.Repository.Hierarchy.DefaultLoggerFactory" /> for the default
            logger creator.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.AddAppender(log4net.Appender.IAppender)">
      <summary>
            Add <paramref name="newAppender" /> to the list of appenders of this
            Logger instance.
            </summary>
      <param name="newAppender">An appender to add to this logger</param>
      <remarks>
        <para>
            Add <paramref name="newAppender" /> to the list of appenders of this
            Logger instance.
            </para>
        <para>
            If <paramref name="newAppender" /> is already in the list of
            appenders, then it won't be added again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.GetAppender(System.String)">
      <summary>
            Look for the appender named as <c>name</c></summary>
      <param name="name">The name of the appender to lookup</param>
      <returns>The appender with the name specified, or <c>null</c>.</returns>
      <remarks>
        <para>
            Returns the named appender, or null if the appender is not found.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAllAppenders">
      <summary>
            Remove all previously added appenders from this Logger instance.
            </summary>
      <remarks>
        <para>
            Remove all previously added appenders from this Logger instance.
            </para>
        <para>
            This is useful when re-reading configuration information.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAppender(log4net.Appender.IAppender)">
      <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
      <param name="appender">The appender to remove</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            Remove the appender passed as parameter form the list of appenders.
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.RemoveAppender(System.String)">
      <summary>
            Remove the appender passed as parameter form the list of appenders.
            </summary>
      <param name="name">The name of the appender to remove</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            Remove the named appender passed as parameter form the list of appenders.
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.Log(System.Type,log4net.Core.Level,System.Object,System.Exception)">
      <summary>
            This generic form is intended to be used by wrappers.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="level">The level of the message to be logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Generate a logging event for the specified <paramref name="level" /> using
            the <paramref name="message" /> and <paramref name="exception" />.
            </para>
        <para>
            This method must not throw any exception to the caller.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.Log(log4net.Core.LoggingEvent)">
      <summary>
            This is the most generic printing method that is intended to be used 
            by wrappers.
            </summary>
      <param name="logEvent">The event being logged.</param>
      <remarks>
        <para>
            Logs the specified logging event through this logger.
            </para>
        <para>
            This method must not throw any exception to the caller.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.IsEnabledFor(log4net.Core.Level)">
      <summary>
            Checks if this logger is enabled for a given <see cref="P:log4net.Repository.Hierarchy.Logger.Level" /> passed as parameter.
            </summary>
      <param name="level">The level to check.</param>
      <returns>
        <c>true</c> if this logger is enabled for <c>level</c>, otherwise <c>false</c>.
            </returns>
      <remarks>
        <para>
            Test if this logger is going to log events of the specified <paramref name="level" />.
            </para>
        <para>
            This method must not throw any exception to the caller.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.CallAppenders(log4net.Core.LoggingEvent)">
      <summary>
            Deliver the <see cref="T:log4net.Core.LoggingEvent" /> to the attached appenders.
            </summary>
      <param name="loggingEvent">The event to log.</param>
      <remarks>
        <para>
            Call the appenders in the hierarchy starting at
            <c>this</c>. If no appenders could be found, emit a
            warning.
            </para>
        <para>
            This method calls all the appenders inherited from the
            hierarchy circumventing any evaluation of whether to log or not
            to log the particular log request.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.CloseNestedAppenders">
      <summary>
            Closes all attached appenders implementing the <see cref="T:log4net.Core.IAppenderAttachable" /> interface.
            </summary>
      <remarks>
        <para>
            Used to ensure that the appenders are correctly shutdown.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.Log(log4net.Core.Level,System.Object,System.Exception)">
      <summary>
            This is the most generic printing method. This generic form is intended to be used by wrappers
            </summary>
      <param name="level">The level of the message to be logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Generate a logging event for the specified <paramref name="level" /> using
            the <paramref name="message" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.ForcedLog(System.Type,log4net.Core.Level,System.Object,System.Exception)">
      <summary>
            Creates a new logging event and logs the event without further checks.
            </summary>
      <param name="callerStackBoundaryDeclaringType">The declaring type of the method that is
            the stack boundary into the logging system for this call.</param>
      <param name="level">The level of the message to be logged.</param>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
      <remarks>
        <para>
            Generates a logging event and delivers it to the attached
            appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Logger.ForcedLog(log4net.Core.LoggingEvent)">
      <summary>
            Creates a new logging event and logs the event without further checks.
            </summary>
      <param name="logEvent">The event being logged.</param>
      <remarks>
        <para>
            Delivers the logging event to the attached appenders.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Parent">
      <summary>
            Gets or sets the parent logger in the hierarchy.
            </summary>
      <value>
            The parent logger in the hierarchy.
            </value>
      <remarks>
        <para>
            Part of the Composite pattern that makes the hierarchy.
            The hierarchy is parent linked rather than child linked.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Additivity">
      <summary>
            Gets or sets a value indicating if child loggers inherit their parent's appenders.
            </summary>
      <value>
        <c>true</c> if child loggers inherit their parent's appenders.
            </value>
      <remarks>
        <para>
            Additivity is set to <c>true</c> by default, that is children inherit
            the appenders of their ancestors by default. If this variable is
            set to <c>false</c> then the appenders found in the
            ancestors of this logger are not used. However, the children
            of this logger will inherit its appenders, unless the children
            have their additivity flag set to <c>false</c> too. See
            the user manual for more details.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.EffectiveLevel">
      <summary>
            Gets the effective level for this logger.
            </summary>
      <returns>The nearest level in the logger hierarchy.</returns>
      <remarks>
        <para>
            Starting from this logger, searches the logger hierarchy for a
            non-null level and returns it. Otherwise, returns the level of the
            root logger.
            </para>
        <para>The Logger class is designed so that this method executes as
            quickly as possible.</para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Hierarchy">
      <summary>
            Gets or sets the <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" /> where this 
            <c>Logger</c> instance is attached to.
            </summary>
      <value>The hierarchy that this logger belongs to.</value>
      <remarks>
        <para>
            This logger must be attached to a single <see cref="P:log4net.Repository.Hierarchy.Logger.Hierarchy" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Level">
      <summary>
            Gets or sets the assigned <see cref="P:log4net.Repository.Hierarchy.Logger.Level" />, if any, for this Logger.  
            </summary>
      <value>
            The <see cref="P:log4net.Repository.Hierarchy.Logger.Level" /> of this logger.
            </value>
      <remarks>
        <para>
            The assigned <see cref="P:log4net.Repository.Hierarchy.Logger.Level" /> can be <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Appenders">
      <summary>
            Get the appenders contained in this logger as an 
            <see cref="T:System.Collections.ICollection" />.
            </summary>
      <returns>A collection of the appenders in this logger</returns>
      <remarks>
        <para>
            Get the appenders contained in this logger as an 
            <see cref="T:System.Collections.ICollection" />. If no appenders 
            can be found, then a <see cref="T:log4net.Util.EmptyCollection" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Name">
      <summary>
            Gets the logger name.
            </summary>
      <value>
            The name of the logger.
            </value>
      <remarks>
        <para>
            The name of this logger
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Logger.Repository">
      <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </summary>
      <value>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> that this logger belongs to.
            </value>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> where this 
            <c>Logger</c> instance is attached to.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.LoggerCreationEventHandler">
      <summary>
            Delegate used to handle logger creation event notifications.
            </summary>
      <param name="sender">The <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> in which the <see cref="T:log4net.Repository.Hierarchy.Logger" /> has been created.</param>
      <param name="e">The <see cref="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs" /> event args that hold the <see cref="T:log4net.Repository.Hierarchy.Logger" /> instance that has been created.</param>
      <remarks>
        <para>
            Delegate used to handle logger creation event notifications.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs">
      <summary>
            Provides data for the <see cref="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent" /> event.
            </summary>
      <remarks>
        <para>
            A <see cref="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent" /> event is raised every time a
            <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> is created.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Repository.Hierarchy.LoggerCreationEventArgs.m_log">
      <summary>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> created
            </summary>
    </member>
    <member name="M:log4net.Repository.Hierarchy.LoggerCreationEventArgs.#ctor(log4net.Repository.Hierarchy.Logger)">
      <summary>
            Constructor
            </summary>
      <param name="log">The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.LoggerCreationEventArgs" /> event argument 
            class,with the specified <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger">
      <summary>
            Gets the <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.
            </summary>
      <value>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.
            </value>
      <remarks>
        <para>
            The <see cref="P:log4net.Repository.Hierarchy.LoggerCreationEventArgs.Logger" /> that has been created.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.ILoggerRepository">
      <summary>
            Interface implemented by logger repositories.
            </summary>
      <remarks>
        <para>
            This interface is implemented by logger repositories. e.g. 
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </para>
        <para>
            This interface is used by the <see cref="T:log4net.LogManager" />
            to obtain <see cref="T:log4net.ILog" /> interfaces.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.Exists(System.String)">
      <summary>
            Check if the named logger exists in the repository. If so return
            its reference, otherwise returns <c>null</c>.
            </summary>
      <param name="name">The name of the logger to lookup</param>
      <returns>The Logger object with the name specified</returns>
      <remarks>
        <para>
            If the names logger exists it is returned, otherwise
            <c>null</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.GetCurrentLoggers">
      <summary>
            Returns all the currently defined loggers as an Array.
            </summary>
      <returns>All the defined loggers</returns>
      <remarks>
        <para>
            Returns all the currently defined loggers as an Array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.GetLogger(System.String)">
      <summary>
            Returns a named logger instance
            </summary>
      <param name="name">The name of the logger to retrieve</param>
      <returns>The logger object with the name specified</returns>
      <remarks>
        <para>
            Returns a named logger instance.
            </para>
        <para>
            If a logger of that name already exists, then it will be
            returned.  Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.Shutdown">
      <summary>Shutdown the repository</summary>
      <remarks>
        <para>
            Shutting down a repository will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </para>
        <para>
            Some appenders need to be closed before the
            application exists. Otherwise, pending logging events might be
            lost.
            </para>
        <para>
            The <see cref="M:log4net.Repository.ILoggerRepository.Shutdown" /> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.ResetConfiguration">
      <summary>
            Reset the repositories configuration to a default state
            </summary>
      <remarks>
        <para>
            Reset all values contained in this instance to their
            default state.
            </para>
        <para>
            Existing loggers are not removed. They are just reset.
            </para>
        <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.Log(log4net.Core.LoggingEvent)">
      <summary>
            Log the <see cref="T:log4net.Core.LoggingEvent" /> through this repository.
            </summary>
      <param name="logEvent">the event to log</param>
      <remarks>
        <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog" /> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(System.String)" /> method.
            </para>
        <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.ILoggerRepository.GetAppenders">
      <summary>
            Returns all the Appenders that are configured as an Array.
            </summary>
      <returns>All the Appenders</returns>
      <remarks>
        <para>
            Returns all the Appenders that are configured as an Array.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.Name">
      <summary>
            The name of the repository
            </summary>
      <value>
            The name of the repository
            </value>
      <remarks>
        <para>
            The name of the repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.RendererMap">
      <summary>
            RendererMap accesses the object renderer map for this repository.
            </summary>
      <value>
            RendererMap accesses the object renderer map for this repository.
            </value>
      <remarks>
        <para>
            RendererMap accesses the object renderer map for this repository.
            </para>
        <para>
            The RendererMap holds a mapping between types and
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> objects.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.PluginMap">
      <summary>
            The plugin map for this repository.
            </summary>
      <value>
            The plugin map for this repository.
            </value>
      <remarks>
        <para>
            The plugin map holds the <see cref="T:log4net.Plugin.IPlugin" /> instances
            that have been attached to this repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.LevelMap">
      <summary>
            Get the level map for the Repository.
            </summary>
      <remarks>
        <para>
            Get the level map for the Repository.
            </para>
        <para>
            The level map defines the mappings between
            level names and <see cref="T:log4net.Core.Level" /> objects in
            this repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.Threshold">
      <summary>
            The threshold for all events in this repository
            </summary>
      <value>
            The threshold for all events in this repository
            </value>
      <remarks>
        <para>
            The threshold for all events in this repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.Configured">
      <summary>
            Flag indicates if this repository has been configured.
            </summary>
      <value>
            Flag indicates if this repository has been configured.
            </value>
      <remarks>
        <para>
            Flag indicates if this repository has been configured.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.ILoggerRepository.Properties">
      <summary>
            Repository specific properties
            </summary>
      <value>
            Repository specific properties
            </value>
      <remarks>
        <para>
            These properties can be specified on a repository specific basis.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.ILoggerRepository.ShutdownEvent">
      <summary>
            Event to notify that the repository has been shutdown.
            </summary>
      <value>
            Event to notify that the repository has been shutdown.
            </value>
      <remarks>
        <para>
            Event raised when the repository has been shutdown.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.ILoggerRepository.ConfigurationReset">
      <summary>
            Event to notify that the repository has had its configuration reset.
            </summary>
      <value>
            Event to notify that the repository has had its configuration reset.
            </value>
      <remarks>
        <para>
            Event raised when the repository's configuration has been
            reset to default.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.ILoggerRepository.ConfigurationChanged">
      <summary>
            Event to notify that the repository has had its configuration changed.
            </summary>
      <value>
            Event to notify that the repository has had its configuration changed.
            </value>
      <remarks>
        <para>
            Event raised when the repository's configuration has been changed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.LoggerRepositorySkeleton">
      <summary>
            Base implementation of <see cref="T:log4net.Repository.ILoggerRepository" /></summary>
      <remarks>
        <para>
            Default abstract implementation of the <see cref="T:log4net.Repository.ILoggerRepository" /> interface.
            </para>
        <para>
            Skeleton implementation of the <see cref="T:log4net.Repository.ILoggerRepository" /> interface.
            All <see cref="T:log4net.Repository.ILoggerRepository" /> types can extend this type.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.#ctor">
      <summary>
            Default Constructor
            </summary>
      <remarks>
        <para>
            Initializes the repository with default (empty) properties.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.#ctor(log4net.Util.PropertiesDictionary)">
      <summary>
            Construct the repository using specific properties
            </summary>
      <param name="properties">the properties to set for this repository</param>
      <remarks>
        <para>
            Initializes the repository with specified properties.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.Exists(System.String)">
      <summary>
            Test if logger exists
            </summary>
      <param name="name">The name of the logger to lookup</param>
      <returns>The Logger object with the name specified</returns>
      <remarks>
        <para>
            Check if the named logger exists in the repository. If so return
            its reference, otherwise returns <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetCurrentLoggers">
      <summary>
            Returns all the currently defined loggers in the repository
            </summary>
      <returns>All the defined loggers</returns>
      <remarks>
        <para>
            Returns all the currently defined loggers in the repository as an Array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetLogger(System.String)">
      <summary>
            Return a new logger instance
            </summary>
      <param name="name">The name of the logger to retrieve</param>
      <returns>The logger object with the name specified</returns>
      <remarks>
        <para>
            Return a new logger instance.
            </para>
        <para>
            If a logger of that name already exists, then it will be
            returned. Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.Shutdown">
      <summary>
            Shutdown the repository
            </summary>
      <remarks>
        <para>
            Shutdown the repository. Can be overridden in a subclass.
            This base class implementation notifies the <see cref="E:log4net.Repository.LoggerRepositorySkeleton.ShutdownEvent" />
            listeners and all attached plugins of the shutdown event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.ResetConfiguration">
      <summary>
            Reset the repositories configuration to a default state
            </summary>
      <remarks>
        <para>
            Reset all values contained in this instance to their
            default state.
            </para>
        <para>
            Existing loggers are not removed. They are just reset.
            </para>
        <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.Log(log4net.Core.LoggingEvent)">
      <summary>
            Log the logEvent through this repository.
            </summary>
      <param name="logEvent">the event to log</param>
      <remarks>
        <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog" /> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(System.String)" /> method.
            </para>
        <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.GetAppenders">
      <summary>
            Returns all the Appenders that are configured as an Array.
            </summary>
      <returns>All the Appenders</returns>
      <remarks>
        <para>
            Returns all the Appenders that are configured as an Array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.AddRenderer(System.Type,log4net.ObjectRenderer.IObjectRenderer)">
      <summary>
            Adds an object renderer for a specific class. 
            </summary>
      <param name="typeToRender">The type that will be rendered by the renderer supplied.</param>
      <param name="rendererInstance">The object renderer used to render the object.</param>
      <remarks>
        <para>
            Adds an object renderer for a specific class. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnShutdown(System.EventArgs)">
      <summary>
            Notify the registered listeners that the repository is shutting down
            </summary>
      <param name="e">Empty EventArgs</param>
      <remarks>
        <para>
            Notify any listeners that this repository is shutting down.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnConfigurationReset(System.EventArgs)">
      <summary>
            Notify the registered listeners that the repository has had its configuration reset
            </summary>
      <param name="e">Empty EventArgs</param>
      <remarks>
        <para>
            Notify any listeners that this repository's configuration has been reset.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.OnConfigurationChanged(System.EventArgs)">
      <summary>
            Notify the registered listeners that the repository has had its configuration changed
            </summary>
      <param name="e">Empty EventArgs</param>
      <remarks>
        <para>
            Notify any listeners that this repository's configuration has changed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.LoggerRepositorySkeleton.RaiseConfigurationChanged(System.EventArgs)">
      <summary>
            Raise a configuration changed event on this repository
            </summary>
      <param name="e">EventArgs.Empty</param>
      <remarks>
        <para>
            Applications that programmatically change the configuration of the repository should
            raise this event notification to notify listeners.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.Name">
      <summary>
            The name of the repository
            </summary>
      <value>
            The string name of the repository
            </value>
      <remarks>
        <para>
            The name of this repository. The name is
            used to store and lookup the repositories 
            stored by the <see cref="T:log4net.Core.IRepositorySelector" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.Threshold">
      <summary>
            The threshold for all events in this repository
            </summary>
      <value>
            The threshold for all events in this repository
            </value>
      <remarks>
        <para>
            The threshold for all events in this repository
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.RendererMap">
      <summary>
            RendererMap accesses the object renderer map for this repository.
            </summary>
      <value>
            RendererMap accesses the object renderer map for this repository.
            </value>
      <remarks>
        <para>
            RendererMap accesses the object renderer map for this repository.
            </para>
        <para>
            The RendererMap holds a mapping between types and
            <see cref="T:log4net.ObjectRenderer.IObjectRenderer" /> objects.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.PluginMap">
      <summary>
            The plugin map for this repository.
            </summary>
      <value>
            The plugin map for this repository.
            </value>
      <remarks>
        <para>
            The plugin map holds the <see cref="T:log4net.Plugin.IPlugin" /> instances
            that have been attached to this repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.LevelMap">
      <summary>
            Get the level map for the Repository.
            </summary>
      <remarks>
        <para>
            Get the level map for the Repository.
            </para>
        <para>
            The level map defines the mappings between
            level names and <see cref="T:log4net.Core.Level" /> objects in
            this repository.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.Configured">
      <summary>
            Flag indicates if this repository has been configured.
            </summary>
      <value>
            Flag indicates if this repository has been configured.
            </value>
      <remarks>
        <para>
            Flag indicates if this repository has been configured.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.LoggerRepositorySkeleton.Properties">
      <summary>
            Repository specific properties
            </summary>
      <value>
            Repository specific properties
            </value>
      <remarks>
            These properties can be specified on a repository specific basis
            </remarks>
    </member>
    <member name="E:log4net.Repository.LoggerRepositorySkeleton.ShutdownEvent">
      <summary>
            Event to notify that the repository has been shutdown.
            </summary>
      <value>
            Event to notify that the repository has been shutdown.
            </value>
      <remarks>
        <para>
            Event raised when the repository has been shutdown.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.LoggerRepositorySkeleton.ConfigurationReset">
      <summary>
            Event to notify that the repository has had its configuration reset.
            </summary>
      <value>
            Event to notify that the repository has had its configuration reset.
            </value>
      <remarks>
        <para>
            Event raised when the repository's configuration has been
            reset to default.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.LoggerRepositorySkeleton.ConfigurationChanged">
      <summary>
            Event to notify that the repository has had its configuration changed.
            </summary>
      <value>
            Event to notify that the repository has had its configuration changed.
            </value>
      <remarks>
        <para>
            Event raised when the repository's configuration has been changed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.IBasicRepositoryConfigurator">
      <summary>
            Basic Configurator interface for repositories
            </summary>
      <remarks>
        <para>
            Interface used by basic configurator to configure a <see cref="T:log4net.Repository.ILoggerRepository" />
            with a default <see cref="T:log4net.Appender.IAppender" />.
            </para>
        <para>
            A <see cref="T:log4net.Repository.ILoggerRepository" /> should implement this interface to support
            configuration by the <see cref="T:log4net.Config.BasicConfigurator" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.IBasicRepositoryConfigurator.Configure(log4net.Appender.IAppender)">
      <summary>
            Initialize the repository using the specified appender
            </summary>
      <param name="appender">the appender to use to log all logging events</param>
      <remarks>
        <para>
            Configure the repository to route all logging events to the
            specified appender.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.IXmlRepositoryConfigurator">
      <summary>
            Configure repository using XML
            </summary>
      <remarks>
        <para>
            Interface used by Xml configurator to configure a <see cref="T:log4net.Repository.ILoggerRepository" />.
            </para>
        <para>
            A <see cref="T:log4net.Repository.ILoggerRepository" /> should implement this interface to support
            configuration by the <see cref="T:log4net.Config.XmlConfigurator" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.IXmlRepositoryConfigurator.Configure(System.Xml.XmlElement)">
      <summary>
            Initialize the repository using the specified config
            </summary>
      <param name="element">the element containing the root of the config</param>
      <remarks>
        <para>
            The schema for the XML configuration data is defined by
            the implementation.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.Hierarchy">
      <summary>
            Hierarchical organization of loggers
            </summary>
      <remarks>
        <para>
          <i>The casual user should not have to deal with this class
            directly.</i>
        </para>
        <para>
            This class is specialized in retrieving loggers by name and
            also maintaining the logger hierarchy. Implements the 
            <see cref="T:log4net.Repository.ILoggerRepository" /> interface.
            </para>
        <para>
            The structure of the logger hierarchy is maintained by the
            <see cref="M:log4net.Repository.Hierarchy.Hierarchy.GetLogger(System.String)" /> method. The hierarchy is such that children
            link to their parent but parents do not have any references to their
            children. Moreover, loggers can be instantiated in any order, in
            particular descendant before ancestor.
            </para>
        <para>
            In case a descendant is created before a particular ancestor,
            then it creates a provision node for the ancestor and adds itself
            to the provision node. Other descendants of the same ancestor add
            themselves to the previously created provision node.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry">
      <summary>
            A class to hold the value, name and display name for a level
            </summary>
      <remarks>
        <para>
            A class to hold the value, name and display name for a level
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.ToString">
      <summary>
            Override <c>Object.ToString</c> to return sensible debug info
            </summary>
      <returns>string info about this object</returns>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.Value">
      <summary>
            Value of the level
            </summary>
      <remarks>
        <para>
            If the value is not set (defaults to -1) the value will be looked
            up for the current level with the same name.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.Name">
      <summary>
            Name of the level
            </summary>
      <value>
            The name of the level
            </value>
      <remarks>
        <para>
            The name of the level.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.LevelEntry.DisplayName">
      <summary>
            Display name for the level
            </summary>
      <value>
            The display name of the level
            </value>
      <remarks>
        <para>
            The display name of the level.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.Hierarchy.PropertyEntry">
      <summary>
            A class to hold the key and data for a property set in the config file
            </summary>
      <remarks>
        <para>
            A class to hold the key and data for a property set in the config file
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.PropertyEntry.ToString">
      <summary>
            Override <c>Object.ToString</c> to return sensible debug info
            </summary>
      <returns>string info about this object</returns>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.PropertyEntry.Key">
      <summary>
            Property Key
            </summary>
      <value>
            Property Key
            </value>
      <remarks>
        <para>
            Property Key.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.PropertyEntry.Value">
      <summary>
            Property Value
            </summary>
      <value>
            Property Value
            </value>
      <remarks>
        <para>
            Property Value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Util.PropertiesDictionary)">
      <summary>
            Construct with properties
            </summary>
      <param name="properties">The properties to pass to this repository.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Repository.Hierarchy.ILoggerFactory)">
      <summary>
            Construct with a logger factory
            </summary>
      <param name="loggerFactory">The factory to use to create new logger instances.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class with 
            the specified <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.#ctor(log4net.Util.PropertiesDictionary,log4net.Repository.Hierarchy.ILoggerFactory)">
      <summary>
            Construct with properties and a logger factory
            </summary>
      <param name="properties">The properties to pass to this repository.</param>
      <param name="loggerFactory">The factory to use to create new logger instances.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> class with 
            the specified <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.Exists(System.String)">
      <summary>
            Test if a logger exists
            </summary>
      <param name="name">The name of the logger to lookup</param>
      <returns>The Logger object with the name specified</returns>
      <remarks>
        <para>
            Check if the named logger exists in the hierarchy. If so return
            its reference, otherwise returns <c>null</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetCurrentLoggers">
      <summary>
            Returns all the currently defined loggers in the hierarchy as an Array
            </summary>
      <returns>All the defined loggers</returns>
      <remarks>
        <para>
            Returns all the currently defined loggers in the hierarchy as an Array.
            The root logger is <b>not</b> included in the returned
            enumeration.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetLogger(System.String)">
      <summary>
            Return a new logger instance named as the first parameter using
            the default factory.
            </summary>
      <remarks>
        <para>
            Return a new logger instance named as the first parameter using
            the default factory.
            </para>
        <para>
            If a logger of that name already exists, then it will be
            returned.  Otherwise, a new logger will be instantiated and
            then linked with its existing ancestors as well as children.
            </para>
      </remarks>
      <param name="name">The name of the logger to retrieve</param>
      <returns>The logger object with the name specified</returns>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.Shutdown">
      <summary>
            Shutting down a hierarchy will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </summary>
      <remarks>
        <para>
            Shutting down a hierarchy will <i>safely</i> close and remove
            all appenders in all loggers including the root logger.
            </para>
        <para>
            Some appenders need to be closed before the
            application exists. Otherwise, pending logging events might be
            lost.
            </para>
        <para>
            The <c>Shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.ResetConfiguration">
      <summary>
            Reset all values contained in this hierarchy instance to their default.
            </summary>
      <remarks>
        <para>
            Reset all values contained in this hierarchy instance to their
            default.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set its default "off" value.
            </para>
        <para>
            Existing loggers are not removed. They are just reset.
            </para>
        <para>
            This method should be used sparingly and with care as it will
            block all logging until it is completed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.Log(log4net.Core.LoggingEvent)">
      <summary>
            Log the logEvent through this hierarchy.
            </summary>
      <param name="logEvent">the event to log</param>
      <remarks>
        <para>
            This method should not normally be used to log.
            The <see cref="T:log4net.ILog" /> interface should be used 
            for routine logging. This interface can be obtained
            using the <see cref="M:log4net.LogManager.GetLogger(System.String)" /> method.
            </para>
        <para>
            The <c>logEvent</c> is delivered to the appropriate logger and
            that logger is then responsible for logging the event.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetAppenders">
      <summary>
            Returns all the Appenders that are currently configured
            </summary>
      <returns>An array containing all the currently configured appenders</returns>
      <remarks>
        <para>
            Returns all the <see cref="T:log4net.Appender.IAppender" /> instances that are currently configured.
            All the loggers are searched for appenders. The appenders may also be containers
            for appenders and these are also searched for additional loggers.
            </para>
        <para>
            The list returned is unordered but does not contain duplicates.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.CollectAppender(System.Collections.ArrayList,log4net.Appender.IAppender)">
      <summary>
            Collect the appenders from an <see cref="T:log4net.Core.IAppenderAttachable" />.
            The appender may also be a container.
            </summary>
      <param name="appenderList">
      </param>
      <param name="appender">
      </param>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.CollectAppenders(System.Collections.ArrayList,log4net.Core.IAppenderAttachable)">
      <summary>
            Collect the appenders from an <see cref="T:log4net.Core.IAppenderAttachable" /> container
            </summary>
      <param name="appenderList">
      </param>
      <param name="container">
      </param>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.BasicRepositoryConfigure(log4net.Appender.IAppender)">
      <summary>
            Initialize the log4net system using the specified appender
            </summary>
      <param name="appender">the appender to use to log all logging events</param>
      <remarks>
        <para>
            This method provides the same functionality as the 
            <see cref="M:log4net.Repository.IBasicRepositoryConfigurator.Configure(log4net.Appender.IAppender)" /> method implemented
            on this object, but it is protected and therefore can be called by subclasses.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.XmlRepositoryConfigure(System.Xml.XmlElement)">
      <summary>
            Initialize the log4net system using the specified config
            </summary>
      <param name="element">the element containing the root of the config</param>
      <remarks>
        <para>
            This method provides the same functionality as the 
            <see cref="M:log4net.Repository.IBasicRepositoryConfigurator.Configure(log4net.Appender.IAppender)" /> method implemented
            on this object, but it is protected and therefore can be called by subclasses.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.IsDisabled(log4net.Core.Level)">
      <summary>
            Test if this hierarchy is disabled for the specified <see cref="T:log4net.Core.Level" />.
            </summary>
      <param name="level">The level to check against.</param>
      <returns>
        <c>true</c> if the repository is disabled for the level argument, <c>false</c> otherwise.
            </returns>
      <remarks>
        <para>
            If this hierarchy has not been configured then this method will
            always return <c>true</c>.
            </para>
        <para>
            This method will return <c>true</c> if this repository is
            disabled for <c>level</c> object passed as parameter and
            <c>false</c> otherwise.
            </para>
        <para>
            See also the <see cref="P:log4net.Repository.ILoggerRepository.Threshold" /> property.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.Clear">
      <summary>
            Clear all logger definitions from the internal hashtable
            </summary>
      <remarks>
        <para>
            This call will clear all logger definitions from the internal
            hashtable. Invoking this method will irrevocably mess up the
            logger hierarchy.
            </para>
        <para>
            You should <b>really</b> know what you are doing before
            invoking this method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.GetLogger(System.String,log4net.Repository.Hierarchy.ILoggerFactory)">
      <summary>
            Return a new logger instance named as the first parameter using
            <paramref name="factory" />.
            </summary>
      <param name="name">The name of the logger to retrieve</param>
      <param name="factory">The factory that will make the new logger instance</param>
      <returns>The logger object with the name specified</returns>
      <remarks>
        <para>
            If a logger of that name already exists, then it will be
            returned. Otherwise, a new logger will be instantiated by the
            <paramref name="factory" /> parameter and linked with its existing
            ancestors as well as children.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.OnLoggerCreationEvent(log4net.Repository.Hierarchy.Logger)">
      <summary>
            Sends a logger creation event to all registered listeners
            </summary>
      <param name="logger">The newly created logger</param>
      <remarks>
            Raises the logger creation event.
            </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.UpdateParents(log4net.Repository.Hierarchy.Logger)">
      <summary>
            Updates all the parents of the specified logger
            </summary>
      <param name="log">The logger to update the parents for</param>
      <remarks>
        <para>
            This method loops through all the <i>potential</i> parents of
            <paramref name="log" />. There 3 possible cases:
            </para>
        <list type="number">
          <item>
            <term>No entry for the potential parent of <paramref name="log" /> exists</term>
            <description>
            		We create a ProvisionNode for this potential 
            		parent and insert <paramref name="log" /> in that provision node.
            		</description>
          </item>
          <item>
            <term>The entry is of type Logger for the potential parent.</term>
            <description>
            		The entry is <paramref name="log" />'s nearest existing parent. We 
            		update <paramref name="log" />'s parent field with this entry. We also break from 
            		he loop because updating our parent's parent is our parent's 
            		responsibility.
            		</description>
          </item>
          <item>
            <term>The entry is of type ProvisionNode for this potential parent.</term>
            <description>
            		We add <paramref name="log" /> to the list of children for this 
            		potential parent.
            		</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.UpdateChildren(log4net.Repository.Hierarchy.ProvisionNode,log4net.Repository.Hierarchy.Logger)">
      <summary>
            Replace a <see cref="T:log4net.Repository.Hierarchy.ProvisionNode" /> with a <see cref="T:log4net.Repository.Hierarchy.Logger" /> in the hierarchy.
            </summary>
      <param name="pn">
      </param>
      <param name="log">
      </param>
      <remarks>
        <para>
            We update the links for all the children that placed themselves
            in the provision node 'pn'. The second argument 'log' is a
            reference for the newly created Logger, parent of all the
            children in 'pn'.
            </para>
        <para>
            We loop on all the children 'c' in 'pn'.
            </para>
        <para>
            If the child 'c' has been already linked to a child of
            'log' then there is no need to update 'c'.
            </para>
        <para>
            Otherwise, we set log's parent field to c's parent and set
            c's parent field to log.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.AddLevel(log4net.Repository.Hierarchy.Hierarchy.LevelEntry)">
      <summary>
            Define or redefine a Level using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument
            </summary>
      <param name="levelEntry">the level values</param>
      <remarks>
        <para>
            Define or redefine a Level using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument
            </para>
        <para>
            Supports setting levels via the configuration file.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.Hierarchy.AddProperty(log4net.Repository.Hierarchy.Hierarchy.PropertyEntry)">
      <summary>
            Set a Property using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument
            </summary>
      <param name="propertyEntry">the property value</param>
      <remarks>
        <para>
            Set a Property using the values in the <see cref="T:log4net.Repository.Hierarchy.Hierarchy.LevelEntry" /> argument.
            </para>
        <para>
            Supports setting property values via the configuration file.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.EmittedNoAppenderWarning">
      <summary>
            Has no appender warning been emitted
            </summary>
      <remarks>
        <para>
            Flag to indicate if we have already issued a warning
            about not having an appender warning.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.Root">
      <summary>
            Get the root of this hierarchy
            </summary>
      <remarks>
        <para>
            Get the root of this hierarchy.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.Hierarchy.LoggerFactory">
      <summary>
            Gets or sets the default <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /> instance.
            </summary>
      <value>The default <see cref="T:log4net.Repository.Hierarchy.ILoggerFactory" /></value>
      <remarks>
        <para>
            The logger factory is used to create logger instances.
            </para>
      </remarks>
    </member>
    <member name="E:log4net.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent">
      <summary>
            Event used to notify that a logger has been created.
            </summary>
      <remarks>
        <para>
            Event raised when a logger is created.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.LoggerKey">
      <summary>
            Used internally to accelerate hash table searches.
            </summary>
      <remarks>
        <para>
            Internal class used to improve performance of 
            string keyed hashtables.
            </para>
        <para>
            The hashcode of the string is cached for reuse.
            The string is stored as an interned value.
            When comparing two <see cref="T:log4net.Repository.Hierarchy.LoggerKey" /> objects for equality 
            the reference equality of the interned strings is compared.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.Hierarchy.LoggerKey.#ctor(System.String)">
      <summary>
            Construct key with string name
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.LoggerKey" /> class 
            with the specified name.
            </para>
        <para>
            Stores the hashcode of the string and interns
            the string key to optimize comparisons.
            </para>
        <note>
            The Compact Framework 1.0 the <see cref="M:System.String.Intern(System.String)" />
            method does not work. On the Compact Framework
            the string keys are not interned nor are they
            compared by reference.
            </note>
      </remarks>
      <param name="name">The name of the logger.</param>
    </member>
    <member name="M:log4net.Repository.Hierarchy.LoggerKey.GetHashCode">
      <summary>
            Returns a hash code for the current instance.
            </summary>
      <returns>A hash code for the current instance.</returns>
      <remarks>
        <para>
            Returns the cached hashcode.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.LoggerKey.Equals(System.Object)">
      <summary>
            Determines whether two <see cref="T:log4net.Repository.Hierarchy.LoggerKey" /> instances 
            are equal.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:log4net.Repository.Hierarchy.LoggerKey" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:log4net.Repository.Hierarchy.LoggerKey" />; otherwise, <c>false</c>.
            </returns>
      <remarks>
        <para>
            Compares the references of the interned strings.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.ProvisionNode">
      <summary>
            Provision nodes are used where no logger instance has been specified
            </summary>
      <remarks>
        <para>
          <see cref="T:log4net.Repository.Hierarchy.ProvisionNode" /> instances are used in the 
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> when there is no specified 
            <see cref="T:log4net.Repository.Hierarchy.Logger" /> for that node.
            </para>
        <para>
            A provision node holds a list of child loggers on behalf of
            a logger that does not exist.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.Hierarchy.ProvisionNode.#ctor(log4net.Repository.Hierarchy.Logger)">
      <summary>
            Create a new provision node with child node
            </summary>
      <param name="log">A child logger to add to this node.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.ProvisionNode" /> class 
            with the specified child logger.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.RootLogger">
      <summary>
            The <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> sits at the root of the logger hierarchy tree. 
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> is a regular <see cref="T:log4net.Repository.Hierarchy.Logger" /> except 
            that it provides several guarantees.
            </para>
        <para>
            First, it cannot be assigned a <c>null</c>
            level. Second, since the root logger cannot have a parent, the
            <see cref="P:log4net.Repository.Hierarchy.RootLogger.EffectiveLevel" /> property always returns the value of the
            level field without walking the hierarchy.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Repository.Hierarchy.RootLogger.#ctor(log4net.Core.Level)">
      <summary>
            Construct a <see cref="T:log4net.Repository.Hierarchy.RootLogger" /></summary>
      <param name="level">The level to assign to the root logger.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.RootLogger" /> class with
            the specified logging level.
            </para>
        <para>
            The root logger names itself as "root". However, the root
            logger cannot be retrieved by name.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.RootLogger.EffectiveLevel">
      <summary>
            Gets the assigned level value without walking the logger hierarchy.
            </summary>
      <value>The assigned level value without walking the logger hierarchy.</value>
      <remarks>
        <para>
            Because the root logger cannot have a parent and its level
            must not be <c>null</c> this property just returns the
            value of <see cref="P:log4net.Repository.Hierarchy.Logger.Level" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Repository.Hierarchy.RootLogger.Level">
      <summary>
            Gets or sets the assigned <see cref="P:log4net.Repository.Hierarchy.RootLogger.Level" /> for the root logger.  
            </summary>
      <value>
            The <see cref="P:log4net.Repository.Hierarchy.RootLogger.Level" /> of the root logger.
            </value>
      <remarks>
        <para>
            Setting the level of the root logger to a <c>null</c> reference
            may have catastrophic results. We prevent this here.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.Hierarchy.XmlHierarchyConfigurator">
      <summary>
            Initializes the log4net environment using an XML DOM.
            </summary>
      <remarks>
        <para>
            Configures a <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> using an XML DOM.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.m_appenderBag">
      <summary>
            key: appenderName, value: appender.
            </summary>
    </member>
    <member name="F:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.m_hierarchy">
      <summary>
            The Hierarchy being configured.
            </summary>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.#ctor(log4net.Repository.Hierarchy.Hierarchy)">
      <summary>
            Construct the configurator for a hierarchy
            </summary>
      <param name="hierarchy">The hierarchy to build.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Repository.Hierarchy.XmlHierarchyConfigurator" /> class
            with the specified <see cref="T:log4net.Repository.Hierarchy.Hierarchy" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.Configure(System.Xml.XmlElement)">
      <summary>
            Configure the hierarchy by parsing a DOM tree of XML elements.
            </summary>
      <param name="element">The root element to parse.</param>
      <remarks>
        <para>
            Configure the hierarchy by parsing a DOM tree of XML elements.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.FindAppenderByReference(System.Xml.XmlElement)">
      <summary>
            Parse appenders by IDREF.
            </summary>
      <param name="appenderRef">The appender ref element.</param>
      <returns>The instance of the appender that the ref refers to.</returns>
      <remarks>
        <para>
            Parse an XML element that represents an appender and return 
            the appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseAppender(System.Xml.XmlElement)">
      <summary>
            Parses an appender element.
            </summary>
      <param name="appenderElement">The appender element.</param>
      <returns>The appender instance or <c>null</c> when parsing failed.</returns>
      <remarks>
        <para>
            Parse an XML element that represents an appender and return
            the appender instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseLogger(System.Xml.XmlElement)">
      <summary>
            Parses a logger element.
            </summary>
      <param name="loggerElement">The logger element.</param>
      <remarks>
        <para>
            Parse an XML element that represents a logger.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseRoot(System.Xml.XmlElement)">
      <summary>
            Parses the root logger element.
            </summary>
      <param name="rootElement">The root element.</param>
      <remarks>
        <para>
            Parse an XML element that represents the root logger.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseChildrenOfLoggerElement(System.Xml.XmlElement,log4net.Repository.Hierarchy.Logger,System.Boolean)">
      <summary>
            Parses the children of a logger element.
            </summary>
      <param name="catElement">The category element.</param>
      <param name="log">The logger instance.</param>
      <param name="isRoot">Flag to indicate if the logger is the root logger.</param>
      <remarks>
        <para>
            Parse the child elements of a &lt;logger&gt; element.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseRenderer(System.Xml.XmlElement)">
      <summary>
            Parses an object renderer.
            </summary>
      <param name="element">The renderer element.</param>
      <remarks>
        <para>
            Parse an XML element that represents a renderer.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseLevel(System.Xml.XmlElement,log4net.Repository.Hierarchy.Logger,System.Boolean)">
      <summary>
            Parses a level element.
            </summary>
      <param name="element">The level element.</param>
      <param name="log">The logger object to set the level on.</param>
      <param name="isRoot">Flag to indicate if the logger is the root logger.</param>
      <remarks>
        <para>
            Parse an XML element that represents a level.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.SetParameter(System.Xml.XmlElement,System.Object)">
      <summary>
            Sets a parameter on an object.
            </summary>
      <param name="element">The parameter element.</param>
      <param name="target">The object to set the parameter on.</param>
      <remarks>
            The parameter name must correspond to a writable property
            on the object. The value of the parameter is a string,
            therefore this function will attempt to set a string
            property first. If unable to set a string property it
            will inspect the property and its argument type. It will
            attempt to call a static method called <c>Parse</c> on the
            type of the property. This method will take a single
            string argument and return a value that can be used to
            set the property.
            </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.HasAttributesOrElements(System.Xml.XmlElement)">
      <summary>
            Test if an element has no attributes or child elements
            </summary>
      <param name="element">the element to inspect</param>
      <returns>
        <c>true</c> if the element has any attributes or child elements, <c>false</c> otherwise</returns>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.IsTypeConstructible(System.Type)">
      <summary>
            Test if a <see cref="T:System.Type" /> is constructible with <c>Activator.CreateInstance</c>.
            </summary>
      <param name="type">the type to inspect</param>
      <returns>
        <c>true</c> if the type is creatable using a default constructor, <c>false</c> otherwise</returns>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.FindMethodInfo(System.Type,System.String)">
      <summary>
            Look for a method on the <paramref name="targetType" /> that matches the <paramref name="name" /> supplied
            </summary>
      <param name="targetType">the type that has the method</param>
      <param name="name">the name of the method</param>
      <returns>the method info found</returns>
      <remarks>
        <para>
            The method must be a public instance method on the <paramref name="targetType" />.
            The method must be named <paramref name="name" /> or "Add" followed by <paramref name="name" />.
            The method must take a single parameter.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ConvertStringTo(System.Type,System.String)">
      <summary>
            Converts a string value to a target type.
            </summary>
      <param name="type">The type of object to convert the string to.</param>
      <param name="value">The string value to use as the value of the object.</param>
      <returns>
        <para>
            An object of type <paramref name="type" /> with value <paramref name="value" /> or 
            <c>null</c> when the conversion could not be performed.
            </para>
      </returns>
    </member>
    <member name="M:log4net.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(System.Xml.XmlElement,System.Type,System.Type)">
      <summary>
            Creates an object as specified in XML.
            </summary>
      <param name="element">The XML element that contains the definition of the object.</param>
      <param name="defaultTargetType">The object type to use if not explicitly specified.</param>
      <param name="typeConstraint">The type that the returned object must be or must inherit from.</param>
      <returns>The object or <c>null</c></returns>
      <remarks>
        <para>
            Parse an XML element and create an object instance based on the configuration
            data.
            </para>
        <para>
            The type of the instance may be specified in the XML. If not
            specified then the <paramref name="defaultTargetType" /> is used
            as the type. However the type is specified it must support the
            <paramref name="typeConstraint" /> type.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.LoggerRepositoryShutdownEventHandler">
      <summary>
            Delegate used to handle logger repository shutdown event notifications
            </summary>
      <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository" /> that is shutting down.</param>
      <param name="e">Empty event args</param>
      <remarks>
        <para>
            Delegate used to handle logger repository shutdown event notifications.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.LoggerRepositoryConfigurationResetEventHandler">
      <summary>
            Delegate used to handle logger repository configuration reset event notifications
            </summary>
      <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository" /> that has had its configuration reset.</param>
      <param name="e">Empty event args</param>
      <remarks>
        <para>
            Delegate used to handle logger repository configuration reset event notifications.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Repository.LoggerRepositoryConfigurationChangedEventHandler">
      <summary>
            Delegate used to handle event notifications for logger repository configuration changes.
            </summary>
      <param name="sender">The <see cref="T:log4net.Repository.ILoggerRepository" /> that has had its configuration changed.</param>
      <param name="e">Empty event arguments.</param>
      <remarks>
        <para>
            Delegate used to handle event notifications for logger repository configuration changes.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.AppDomainPatternConverter">
      <summary>
            Write the name of the current AppDomain to the output
            </summary>
      <remarks>
        <para>
            Write the name of the current AppDomain to the output writer
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.AppDomainPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the name of the current AppDomain to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Writes name of the current AppDomain to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.DatePatternConverter">
      <summary>
            Write the current date to the output
            </summary>
      <remarks>
        <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the current date and time to the writer as a string.
            </para>
        <para>
            The value of the <see cref="P:log4net.Util.PatternConverter.Option" /> determines 
            the formatting of the date. The following values are allowed:
            <list type="definition"><listheader><term>Option value</term><description>Output</description></listheader><item><term>ISO8601</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.Iso8601DateFormatter" /> formatter. 
            		Formats using the <c>"yyyy-MM-dd HH:mm:ss,fff"</c> pattern.
            		</description></item><item><term>DATE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> formatter. 
            		Formats using the <c>"dd MMM yyyy HH:mm:ss,fff"</c> for example, <c>"06 Nov 1994 15:49:37,459"</c>.
            		</description></item><item><term>ABSOLUTE</term><description>
            		Uses the <see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" /> formatter. 
            		Formats using the <c>"HH:mm:ss,fff"</c> for example, <c>"15:49:37,459"</c>.
            		</description></item><item><term>other</term><description>
            		Any other pattern string uses the <see cref="T:log4net.DateFormatter.SimpleDateFormatter" /> formatter. 
            		This formatter passes the pattern string to the <see cref="T:System.DateTime" /><see cref="M:System.DateTime.ToString(System.String)" /> method.
            		For details on valid patterns see 
            		<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemglobalizationdatetimeformatinfoclasstopic.asp">DateTimeFormatInfo Class</a>.
            		</description></item></list></para>
        <para>
            The date and time is in the local time zone and is rendered in that zone.
            To output the time in Universal time see <see cref="T:log4net.Util.PatternStringConverters.UtcDatePatternConverter" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.DatePatternConverter.m_dateFormatter">
      <summary>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.DateFormatter.IDateFormatter" /> used to render the date to a string
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions">
      <summary>
            Initialize the converter options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.DatePatternConverter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.DatePatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the current date to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Pass the current date and time to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
        <para>
            The date and time passed is in the local time zone.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.EnvironmentPatternConverter">
      <summary>
            Write an environment variable to the output
            </summary>
      <remarks>
        <para>
            Write an environment variable to the output writer.
            The value of the <see cref="P:log4net.Util.PatternConverter.Option" /> determines 
            the name of the variable to output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.EnvironmentPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write an environment variable to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Writes the environment variable to the output <paramref name="writer" />.
            The name of the environment variable to output must be set
            using the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.IdentityPatternConverter">
      <summary>
            Write the current thread identity to the output
            </summary>
      <remarks>
        <para>
            Write the current thread identity to the output writer
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.IdentityPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the current thread identity to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Writes the current thread identity to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.LiteralPatternConverter">
      <summary>
            Pattern converter for literal string instances in the pattern
            </summary>
      <remarks>
        <para>
            Writes the literal string value specified in the 
            <see cref="P:log4net.Util.PatternConverter.Option" /> property to 
            the output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.SetNext(log4net.Util.PatternConverter)">
      <summary>
            Set the next converter in the chain
            </summary>
      <param name="pc">The next pattern converter in the chain</param>
      <returns>The next pattern converter</returns>
      <remarks>
        <para>
            Special case the building of the pattern converter chain
            for <see cref="T:log4net.Util.PatternStringConverters.LiteralPatternConverter" /> instances. Two adjacent
            literals in the pattern can be represented by a single combined
            pattern converter. This implementation detects when a 
            <see cref="T:log4net.Util.PatternStringConverters.LiteralPatternConverter" /> is added to the chain
            after this converter and combines its value with this converter's
            literal value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.Format(System.IO.TextWriter,System.Object)">
      <summary>
            Write the literal to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, not set</param>
      <remarks>
        <para>
            Override the formatting behavior to ignore the FormattingInfo
            because we have a literal instead.
            </para>
        <para>
            Writes the value of <see cref="P:log4net.Util.PatternConverter.Option" />
            to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.LiteralPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Convert this pattern into the rendered message
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">null, not set</param>
      <remarks>
        <para>
            This method is not used.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.NewLinePatternConverter">
      <summary>
            Writes a newline to the output
            </summary>
      <remarks>
        <para>
            Writes the system dependent line terminator to the output.
            This behavior can be overridden by setting the <see cref="P:log4net.Util.PatternConverter.Option" />:
            </para>
        <list type="definition">
          <listheader>
            <term>Option Value</term>
            <description>Output</description>
          </listheader>
          <item>
            <term>DOS</term>
            <description>DOS or Windows line terminator <c>"\r\n"</c></description>
          </item>
          <item>
            <term>UNIX</term>
            <description>UNIX line terminator <c>"\n"</c></description>
          </item>
        </list>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions">
      <summary>
            Initialize the converter
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.ProcessIdPatternConverter">
      <summary>
            Write the current process ID to the output
            </summary>
      <remarks>
        <para>
            Write the current process ID to the output writer
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.ProcessIdPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the current process ID to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Write the current process ID to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.PropertyPatternConverter">
      <summary>
            Property pattern converter
            </summary>
      <remarks>
        <para>
            This pattern converter reads the thread and global properties.
            The thread properties take priority over global properties.
            See <see cref="P:log4net.ThreadContext.Properties" /> for details of the 
            thread properties. See <see cref="P:log4net.GlobalContext.Properties" /> for
            details of the global properties.
            </para>
        <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is specified then that will be used to
            lookup a single property. If no <see cref="P:log4net.Util.PatternConverter.Option" /> is specified
            then all properties will be dumped as a list of key value pairs.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.PropertyPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the property value to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Writes out the value of a named property. The property name
            should be set in the <see cref="P:log4net.Util.PatternConverter.Option" />
            property.
            </para>
        <para>
            If the <see cref="P:log4net.Util.PatternConverter.Option" /> is set to <c>null</c>
            then all the properties are written as key value pairs.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.RandomStringPatternConverter">
      <summary>
            A Pattern converter that generates a string of random characters
            </summary>
      <remarks>
        <para>
            The converter generates a string of random characters. By default
            the string is length 4. This can be changed by setting the <see cref="P:log4net.Util.PatternConverter.Option" />
            to the string value of the length required.
            </para>
        <para>
            The random characters in the string are limited to uppercase letters
            and numbers only.
            </para>
        <para>
            The random number generator used by this class is not cryptographically secure.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.RandomStringPatternConverter.s_random">
      <summary>
            Shared random number generator
            </summary>
    </member>
    <member name="F:log4net.Util.PatternStringConverters.RandomStringPatternConverter.m_length">
      <summary>
            Length of random string to generate. Default length 4.
            </summary>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions">
      <summary>
            Initialize the converter options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.RandomStringPatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write a randoim string to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Write a randoim string to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.UserNamePatternConverter">
      <summary>
            Write the current threads username to the output
            </summary>
      <remarks>
        <para>
            Write the current threads username to the output writer
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.UserNamePatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the current threads username to the output
            </summary>
      <param name="writer">the writer to write to</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Write the current threads username to the output <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternStringConverters.UtcDatePatternConverter">
      <summary>
            Write the UTC date time to the output
            </summary>
      <remarks>
        <para>
            Date pattern converter, uses a <see cref="T:log4net.DateFormatter.IDateFormatter" /> to format 
            the current date and time in Universal time.
            </para>
        <para>
            See the <see cref="T:log4net.Util.PatternStringConverters.DatePatternConverter" /> for details on the date pattern syntax.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.PatternStringConverters.DatePatternConverter" />
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.PatternStringConverters.UtcDatePatternConverter.Convert(System.IO.TextWriter,System.Object)">
      <summary>
            Write the current date and time to the output
            </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> that will receive the formatted result.</param>
      <param name="state">null, state is not set</param>
      <remarks>
        <para>
            Pass the current date and time to the <see cref="T:log4net.DateFormatter.IDateFormatter" />
            for it to render it to the writer.
            </para>
        <para>
            The date is in Universal time when it is rendered.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.PatternStringConverters.DatePatternConverter" />
    </member>
    <member name="T:log4net.Util.TypeConverters.BooleanConverter">
      <summary>
            Type converter for Boolean.
            </summary>
      <remarks>
        <para>
            Supports conversion from string to <c>bool</c> type.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.BooleanConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.BooleanConverter.ConvertFrom(System.Object)">
      <summary>
            Convert the source object to the type supported by this object
            </summary>
      <param name="source">the object to convert</param>
      <returns>the converted object</returns>
      <remarks>
        <para>
            Uses the <see cref="M:System.Boolean.Parse(System.String)" /> method to convert the
            <see cref="T:System.String" /> argument to a <see cref="T:System.Boolean" />.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.BooleanConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
      <summary>
            Exception base type for conversion errors.
            </summary>
      <remarks>
        <para>
            This type extends <see cref="T:System.ApplicationException" />. It
            does not add any new functionality but does differentiate the
            type of exception being thrown.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message to include with the exception.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class
            with the specified message.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message to include with the exception.</param>
      <param name="innerException">A nested exception to include.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class
            with the specified message and inner exception.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serialization constructor
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class 
            with serialized data.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.Create(System.Type,System.Object)">
      <summary>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </summary>
      <param name="destinationType">The conversion destination type.</param>
      <param name="sourceValue">The value to convert.</param>
      <returns>An instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" />.</returns>
      <remarks>
        <para>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConversionNotSupportedException.Create(System.Type,System.Object,System.Exception)">
      <summary>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </summary>
      <param name="destinationType">The conversion destination type.</param>
      <param name="sourceValue">The value to convert.</param>
      <param name="innerException">A nested exception to include.</param>
      <returns>An instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" />.</returns>
      <remarks>
        <para>
            Creates a new instance of the <see cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException" /> class.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.TypeConverters.ConverterRegistry">
      <summary>
            Register of type converters for specific types.
            </summary>
      <remarks>
        <para>
            Maintains a registry of type converters used to convert between
            types.
            </para>
        <para>
            Use the <see cref="M:log4net.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Object)" /> and 
            <see cref="M:log4net.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Type)" /> methods to register new converters.
            The <see cref="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertTo(System.Type,System.Type)" /> and <see cref="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertFrom(System.Type)" /> methods
            lookup appropriate converters to use.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.TypeConverters.ConverterRegistry.s_type2converter">
      <summary>
            Mapping from <see cref="T:System.Type" /> to type converter.
            </summary>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.#ctor">
      <summary>
            Private constructor
            </summary>
      <remarks>
            Initializes a new instance of the <see cref="T:log4net.Util.TypeConverters.ConverterRegistry" /> class.
            </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Object)">
      <summary>
            Adds a converter for a specific type.
            </summary>
      <param name="destinationType">The type being converted to.</param>
      <param name="converter">The type converter to use to convert to the destination type.</param>
      <remarks>
        <para>
            Adds a converter instance for a specific type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Type)">
      <summary>
            Adds a converter for a specific type.
            </summary>
      <param name="destinationType">The type being converted to.</param>
      <param name="converterType">The type of the type converter to use to convert to the destination type.</param>
      <remarks>
        <para>
            Adds a converter <see cref="T:System.Type" /> for a specific type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertTo(System.Type,System.Type)">
      <summary>
            Gets the type converter to use to convert values to the destination type.
            </summary>
      <param name="sourceType">The type being converted from.</param>
      <param name="destinationType">The type being converted to.</param>
      <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
      <remarks>
        <para>
            Gets the type converter to use to convert values to the destination type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConvertFrom(System.Type)">
      <summary>
            Gets the type converter to use to convert values to the destination type.
            </summary>
      <param name="destinationType">The type being converted to.</param>
      <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
      <remarks>
        <para>
            Gets the type converter to use to convert values to the destination type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.GetConverterFromAttribute(System.Type)">
      <summary>
            Lookups the type converter to use as specified by the attributes on the 
            destination type.
            </summary>
      <param name="destinationType">The type being converted to.</param>
      <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
    </member>
    <member name="M:log4net.Util.TypeConverters.ConverterRegistry.CreateConverterInstance(System.Type)">
      <summary>
            Creates the instance of the type converter.
            </summary>
      <param name="converterType">The type of the type converter.</param>
      <returns>
            The type converter instance to use for type conversions or <c>null</c> 
            if no type converter is found.
            </returns>
      <remarks>
        <para>
            The type specified for the type converter must implement 
            the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> or <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces 
            and must have a public default (no argument) constructor.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.TypeConverters.EncodingConverter">
      <summary>
            Supports conversion from string to <see cref="T:System.Text.Encoding" /> type.
            </summary>
      <remarks>
        <para>
            Supports conversion from string to <see cref="T:System.Text.Encoding" /> type.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.EncodingConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.EncodingConverter.ConvertFrom(System.Object)">
      <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
      <param name="source">the object to convert to an encoding</param>
      <returns>the encoding</returns>
      <remarks>
        <para>
            Uses the <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> method to 
            convert the <see cref="T:System.String" /> argument to an <see cref="T:System.Text.Encoding" />.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.EncodingConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.IConvertTo">
      <summary>
            Interface supported by type converters
            </summary>
      <remarks>
        <para>
            This interface supports conversion from a single type to arbitrary types.
            See <see cref="T:log4net.Util.TypeConverters.TypeConverterAttribute" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.IConvertTo.CanConvertTo(System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type
            </summary>
      <param name="targetType">A Type that represents the type you want to convert to</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Test if the type supported by this converter can be converted to the
            <paramref name="targetType" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.IConvertTo.ConvertTo(System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the arguments
            </summary>
      <param name="source">the object to convert</param>
      <param name="targetType">The Type to convert the value parameter to</param>
      <returns>the converted object</returns>
      <remarks>
        <para>
            Converts the <paramref name="source" /> (which must be of the type supported
            by this converter) to the <paramref name="targetType" /> specified..
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.TypeConverters.IPAddressConverter">
      <summary>
            Supports conversion from string to <see cref="T:System.Net.IPAddress" /> type.
            </summary>
      <remarks>
        <para>
            Supports conversion from string to <see cref="T:System.Net.IPAddress" /> type.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.TypeConverters.IPAddressConverter.validIpAddressChars">
      <summary>
            Valid characters in an IPv4 or IPv6 address string. (Does not support subnets)
            </summary>
    </member>
    <member name="M:log4net.Util.TypeConverters.IPAddressConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.IPAddressConverter.ConvertFrom(System.Object)">
      <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
      <param name="source">the object to convert to an IPAddress</param>
      <returns>the IPAddress</returns>
      <remarks>
        <para>
            Uses the <see cref="M:System.Net.IPAddress.Parse(System.String)" /> method to convert the
            <see cref="T:System.String" /> argument to an <see cref="T:System.Net.IPAddress" />.
            If that fails then the string is resolved as a DNS hostname.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.IPAddressConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.PatternLayoutConverter">
      <summary>
            Supports conversion from string to <see cref="T:log4net.Layout.PatternLayout" /> type.
            </summary>
      <remarks>
        <para>
            Supports conversion from string to <see cref="T:log4net.Layout.PatternLayout" /> type.
            </para>
        <para>
            The string is used as the <see cref="P:log4net.Layout.PatternLayout.ConversionPattern" /> 
            of the <see cref="T:log4net.Layout.PatternLayout" />.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternLayoutConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternLayoutConverter.ConvertFrom(System.Object)">
      <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
      <param name="source">the object to convert to a PatternLayout</param>
      <returns>the PatternLayout</returns>
      <remarks>
        <para>
            Creates and returns a new <see cref="T:log4net.Layout.PatternLayout" /> using
            the <paramref name="source" /><see cref="T:System.String" /> as the
            <see cref="P:log4net.Layout.PatternLayout.ConversionPattern" />.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.PatternLayoutConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.PatternStringConverter">
      <summary>
            Convert between string and <see cref="T:log4net.Util.PatternString" /></summary>
      <remarks>
        <para>
            Supports conversion from string to <see cref="T:log4net.Util.PatternString" /> type, 
            and from a <see cref="T:log4net.Util.PatternString" /> type to a string.
            </para>
        <para>
            The string is used as the <see cref="P:log4net.Util.PatternString.ConversionPattern" /> 
            of the <see cref="T:log4net.Util.PatternString" />.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertTo(System.Type)">
      <summary>
            Can the target type be converted to the type supported by this object
            </summary>
      <param name="targetType">A <see cref="T:System.Type" /> that represents the type you want to convert to</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="targetType" /> is
            assignable from a <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternStringConverter.ConvertTo(System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the arguments
            </summary>
      <param name="source">the object to convert</param>
      <param name="targetType">The Type to convert the value parameter to</param>
      <returns>the converted object</returns>
      <remarks>
        <para>
            Uses the <see cref="M:log4net.Util.PatternString.Format" /> method to convert the
            <see cref="T:log4net.Util.PatternString" /> argument to a <see cref="T:System.String" />.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            <paramref name="targetType" />. To check for this condition use the 
            <see cref="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertTo(System.Type)" /> method.
            </exception>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.PatternStringConverter.ConvertFrom(System.Object)">
      <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
      <param name="source">the object to convert to a PatternString</param>
      <returns>the PatternString</returns>
      <remarks>
        <para>
            Creates and returns a new <see cref="T:log4net.Util.PatternString" /> using
            the <paramref name="source" /><see cref="T:System.String" /> as the
            <see cref="P:log4net.Util.PatternString.ConversionPattern" />.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.PatternStringConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.TypeConverter">
      <summary>
            Supports conversion from string to <see cref="T:System.Type" /> type.
            </summary>
      <remarks>
        <para>
            Supports conversion from string to <see cref="T:System.Type" /> type.
            </para>
      </remarks>
      <seealso cref="T:log4net.Util.TypeConverters.ConverterRegistry" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertFrom" />
      <seealso cref="T:log4net.Util.TypeConverters.IConvertTo" />
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.TypeConverters.TypeConverter.CanConvertFrom(System.Type)">
      <summary>
            Can the source type be converted to the type supported by this object
            </summary>
      <param name="sourceType">the type to convert</param>
      <returns>true if the conversion is possible</returns>
      <remarks>
        <para>
            Returns <c>true</c> if the <paramref name="sourceType" /> is
            the <see cref="T:System.String" /> type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.TypeConverter.ConvertFrom(System.Object)">
      <summary>
            Overrides the ConvertFrom method of IConvertFrom.
            </summary>
      <param name="source">the object to convert to a Type</param>
      <returns>the Type</returns>
      <remarks>
        <para>
            Uses the <see cref="M:System.Type.GetType(System.String,System.Boolean)" /> method to convert the
            <see cref="T:System.String" /> argument to a <see cref="T:System.Type" />.
            Additional effort is made to locate partially specified types
            by searching the loaded assemblies.
            </para>
      </remarks>
      <exception cref="T:log4net.Util.TypeConverters.ConversionNotSupportedException">
            The <paramref name="source" /> object cannot be converted to the
            target type. To check for this condition use the <see cref="M:log4net.Util.TypeConverters.TypeConverter.CanConvertFrom(System.Type)" />
            method.
            </exception>
    </member>
    <member name="T:log4net.Util.TypeConverters.TypeConverterAttribute">
      <summary>
            Attribute used to associate a type converter
            </summary>
      <remarks>
        <para>
            Class and Interface level attribute that specifies a type converter
            to use with the associated type.
            </para>
        <para>
            To associate a type converter with a target type apply a
            <c>TypeConverterAttribute</c> to the target type. Specify the
            type of the type converter on the attribute.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.TypeConverters.TypeConverterAttribute.m_typeName">
      <summary>
            The string type name of the type converter
            </summary>
    </member>
    <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor(System.String)">
      <summary>
            Create a new type converter attribute for the specified type name
            </summary>
      <param name="typeName">The string type name of the type converter</param>
      <remarks>
        <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TypeConverters.TypeConverterAttribute.#ctor(System.Type)">
      <summary>
            Create a new type converter attribute for the specified type
            </summary>
      <param name="converterType">The type of the type converter</param>
      <remarks>
        <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.TypeConverters.TypeConverterAttribute.ConverterTypeName">
      <summary>
            The string type name of the type converter 
            </summary>
      <value>
            The string type name of the type converter 
            </value>
      <remarks>
        <para>
            The type specified must implement the <see cref="T:log4net.Util.TypeConverters.IConvertFrom" /> 
            or the <see cref="T:log4net.Util.TypeConverters.IConvertTo" /> interfaces.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.AppenderAttachedImpl">
      <summary>
            A straightforward implementation of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface.
            </summary>
      <remarks>
        <para>
            This is the default implementation of the <see cref="T:log4net.Core.IAppenderAttachable" />
            interface. Implementors of the <see cref="T:log4net.Core.IAppenderAttachable" /> interface
            should aggregate an instance of this type.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.AppenderAttachedImpl.m_appenderList">
      <summary>
            List of appenders
            </summary>
    </member>
    <member name="F:log4net.Util.AppenderAttachedImpl.m_appenderArray">
      <summary>
            Array of appenders, used to cache the m_appenderList
            </summary>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.AppenderAttachedImpl" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.AppendLoopOnAppenders(log4net.Core.LoggingEvent)">
      <summary>
            Append on on all attached appenders.
            </summary>
      <param name="loggingEvent">The event being logged.</param>
      <returns>The number of appenders called.</returns>
      <remarks>
        <para>
            Calls the <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method on all 
            attached appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.AppendLoopOnAppenders(log4net.Core.LoggingEvent[])">
      <summary>
            Append on on all attached appenders.
            </summary>
      <param name="loggingEvents">The array of events being logged.</param>
      <returns>The number of appenders called.</returns>
      <remarks>
        <para>
            Calls the <see cref="M:log4net.Appender.IAppender.DoAppend(log4net.Core.LoggingEvent)" /> method on all 
            attached appenders.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.CallAppend(log4net.Appender.IAppender,log4net.Core.LoggingEvent[])">
      <summary>
            Calls the DoAppende method on the <see cref="T:log4net.Appender.IAppender" /> with 
            the <see cref="T:log4net.Core.LoggingEvent" /> objects supplied.
            </summary>
      <param name="appender">The appender</param>
      <param name="loggingEvents">The events</param>
      <remarks>
        <para>
            If the <paramref name="appender" /> supports the <see cref="T:log4net.Appender.IBulkAppender" />
            interface then the <paramref name="loggingEvents" /> will be passed 
            through using that interface. Otherwise the <see cref="T:log4net.Core.LoggingEvent" />
            objects in the array will be passed one at a time.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.AddAppender(log4net.Appender.IAppender)">
      <summary>
            Attaches an appender.
            </summary>
      <param name="newAppender">The appender to add.</param>
      <remarks>
        <para>
            If the appender is already in the list it won't be added again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.GetAppender(System.String)">
      <summary>
            Gets an attached appender with the specified name.
            </summary>
      <param name="name">The name of the appender to get.</param>
      <returns>
            The appender with the name specified, or <c>null</c> if no appender with the
            specified name is found.
            </returns>
      <remarks>
        <para>
            Lookup an attached appender by name.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAllAppenders">
      <summary>
            Removes all attached appenders.
            </summary>
      <remarks>
        <para>
            Removes and closes all attached appenders
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAppender(log4net.Appender.IAppender)">
      <summary>
            Removes the specified appender from the list of attached appenders.
            </summary>
      <param name="appender">The appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.AppenderAttachedImpl.RemoveAppender(System.String)">
      <summary>
            Removes the appender with the specified name from the list of appenders.
            </summary>
      <param name="name">The name of the appender to remove.</param>
      <returns>The appender removed from the list</returns>
      <remarks>
        <para>
            The appender removed is not closed.
            If you are discarding the appender you must call
            <see cref="M:log4net.Appender.IAppender.Close" /> on the appender removed.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.AppenderAttachedImpl.Appenders">
      <summary>
            Gets all attached appenders.
            </summary>
      <returns>
            A collection of attached appenders, or <c>null</c> if there
            are no attached appenders.
            </returns>
      <remarks>
        <para>
            The read only collection of all currently attached appenders.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.CompositeProperties">
      <summary>
            This class aggregates several PropertiesDictionary collections together.
            </summary>
      <remarks>
        <para>
            Provides a dictionary style lookup over an ordered list of
            <see cref="T:log4net.Util.PropertiesDictionary" /> collections.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.CompositeProperties.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.CompositeProperties" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CompositeProperties.Add(log4net.Util.ReadOnlyPropertiesDictionary)">
      <summary>
            Add a Properties Dictionary to this composite collection
            </summary>
      <param name="properties">the properties to add</param>
      <remarks>
        <para>
            Properties dictionaries added first take precedence over dictionaries added
            later.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CompositeProperties.Flatten">
      <summary>
            Flatten this composite collection into a single properties dictionary
            </summary>
      <returns>the flattened dictionary</returns>
      <remarks>
        <para>
            Reduces the collection of ordered dictionaries to a single dictionary
            containing the resultant values for the keys.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.CompositeProperties.Item(System.String)">
      <summary>
            Gets the value of a property
            </summary>
      <value>
            The value for the property with the specified key
            </value>
      <remarks>
        <para>
            Looks up the value for the <paramref name="key" /> specified.
            The <see cref="T:log4net.Util.PropertiesDictionary" /> collections are searched
            in the order in which they were added to this collection. The value
            returned is the value held by the first collection that contains
            the specified key.
            </para>
        <para>
            If none of the collections contain the specified key then
            <c>null</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ContextPropertiesBase">
      <summary>
            Base class for Context Properties implementations
            </summary>
      <remarks>
        <para>
            This class defines a basic property get set accessor
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="P:log4net.Util.ContextPropertiesBase.Item(System.String)">
      <summary>
            Gets or sets the value of a property
            </summary>
      <value>
            The value for the property with the specified key
            </value>
      <remarks>
        <para>
            Gets or sets the value of a property
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.TextWriterAdapter">
      <summary>
            Adapter that extends <see cref="T:System.IO.TextWriter" /> and forwards all
            messages to an instance of <see cref="T:System.IO.TextWriter" />.
            </summary>
      <remarks>
        <para>
            Adapter that extends <see cref="T:System.IO.TextWriter" /> and forwards all
            messages to an instance of <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.TextWriterAdapter.m_writer">
      <summary>
            The writer to forward messages to
            </summary>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.#ctor(System.IO.TextWriter)">
      <summary>
            Create an instance of <see cref="T:log4net.Util.TextWriterAdapter" /> that forwards all
            messages to a <see cref="T:System.IO.TextWriter" />.
            </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to forward to</param>
      <remarks>
        <para>
            Create an instance of <see cref="T:log4net.Util.TextWriterAdapter" /> that forwards all
            messages to a <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Close">
      <summary>
            Closes the writer and releases any system resources associated with the writer
            </summary>
      <remarks>
        <para>
        </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Dispose(System.Boolean)">
      <summary>
            Dispose this writer
            </summary>
      <param name="disposing">flag indicating if we are being disposed</param>
      <remarks>
        <para>
            Dispose this writer
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Flush">
      <summary>
            Flushes any buffered output
            </summary>
      <remarks>
        <para>
            Clears all buffers for the writer and causes any buffered data to be written 
            to the underlying device
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Write(System.Char)">
      <summary>
            Writes a character to the wrapped TextWriter
            </summary>
      <param name="value">the value to write to the TextWriter</param>
      <remarks>
        <para>
            Writes a character to the wrapped TextWriter
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
            Writes a character buffer to the wrapped TextWriter
            </summary>
      <param name="buffer">the data buffer</param>
      <param name="index">the start index</param>
      <param name="count">the number of characters to write</param>
      <remarks>
        <para>
            Writes a character buffer to the wrapped TextWriter
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.TextWriterAdapter.Write(System.String)">
      <summary>
            Writes a string to the wrapped TextWriter
            </summary>
      <param name="value">the value to write to the TextWriter</param>
      <remarks>
        <para>
            Writes a string to the wrapped TextWriter
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.TextWriterAdapter.Writer">
      <summary>
            Gets or sets the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
      <value>
            The underlying <see cref="T:System.IO.TextWriter" />.
            </value>
      <remarks>
        <para>
            Gets or sets the underlying <see cref="T:System.IO.TextWriter" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.TextWriterAdapter.Encoding">
      <summary>
            The Encoding in which the output is written
            </summary>
      <value>
            The <see cref="P:log4net.Util.TextWriterAdapter.Encoding" /></value>
      <remarks>
        <para>
            The Encoding in which the output is written
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.TextWriterAdapter.FormatProvider">
      <summary>
            Gets an object that controls formatting
            </summary>
      <value>
            The format provider
            </value>
      <remarks>
        <para>
            Gets an object that controls formatting
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.TextWriterAdapter.NewLine">
      <summary>
            Gets or sets the line terminator string used by the TextWriter
            </summary>
      <value>
            The line terminator to use
            </value>
      <remarks>
        <para>
            Gets or sets the line terminator string used by the TextWriter
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.QuietTextWriter">
      <summary>
        <see cref="T:System.IO.TextWriter" /> that does not leak exceptions
            </summary>
      <remarks>
        <para>
          <see cref="T:log4net.Util.QuietTextWriter" /> does not throw exceptions when things go wrong. 
            Instead, it delegates error handling to its <see cref="T:log4net.Core.IErrorHandler" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.QuietTextWriter.m_errorHandler">
      <summary>
            The error handler instance to pass all errors to
            </summary>
    </member>
    <member name="F:log4net.Util.QuietTextWriter.m_closed">
      <summary>
            Flag to indicate if this writer is closed
            </summary>
    </member>
    <member name="M:log4net.Util.QuietTextWriter.#ctor(System.IO.TextWriter,log4net.Core.IErrorHandler)">
      <summary>
            Constructor
            </summary>
      <param name="writer">the writer to actually write to</param>
      <param name="errorHandler">the error handler to report error to</param>
      <remarks>
        <para>
            Create a new QuietTextWriter using a writer and error handler
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.QuietTextWriter.Write(System.Char)">
      <summary>
            Writes a character to the underlying writer
            </summary>
      <param name="value">the char to write</param>
      <remarks>
        <para>
            Writes a character to the underlying writer
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.QuietTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
            Writes a buffer to the underlying writer
            </summary>
      <param name="buffer">the buffer to write</param>
      <param name="index">the start index to write from</param>
      <param name="count">the number of characters to write</param>
      <remarks>
        <para>
            Writes a buffer to the underlying writer
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.QuietTextWriter.Write(System.String)">
      <summary>
            Writes a string to the output.
            </summary>
      <param name="value">The string data to write to the output.</param>
      <remarks>
        <para>
            Writes a string to the output.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.QuietTextWriter.Close">
      <summary>
            Closes the underlying output writer.
            </summary>
      <remarks>
        <para>
            Closes the underlying output writer.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.QuietTextWriter.ErrorHandler">
      <summary>
            Gets or sets the error handler that all errors are passed to.
            </summary>
      <value>
            The error handler that all errors are passed to.
            </value>
      <remarks>
        <para>
            Gets or sets the error handler that all errors are passed to.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.QuietTextWriter.Closed">
      <summary>
            Gets a value indicating whether this writer is closed.
            </summary>
      <value>
        <c>true</c> if this writer is closed, otherwise <c>false</c>.
            </value>
      <remarks>
        <para>
            Gets a value indicating whether this writer is closed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.CountingQuietTextWriter">
      <summary>
            Subclass of <see cref="T:log4net.Util.QuietTextWriter" /> that maintains a count of 
            the number of bytes written.
            </summary>
      <remarks>
        <para>
            This writer counts the number of bytes written.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.CountingQuietTextWriter.m_countBytes">
      <summary>
            Total number of bytes written.
            </summary>
    </member>
    <member name="M:log4net.Util.CountingQuietTextWriter.#ctor(System.IO.TextWriter,log4net.Core.IErrorHandler)">
      <summary>
            Constructor
            </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to actually write to.</param>
      <param name="errorHandler">The <see cref="T:log4net.Core.IErrorHandler" /> to report errors to.</param>
      <remarks>
        <para>
            Creates a new instance of the <see cref="T:log4net.Util.CountingQuietTextWriter" /> class 
            with the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:log4net.Core.IErrorHandler" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.Char)">
      <summary>
            Writes a character to the underlying writer and counts the number of bytes written.
            </summary>
      <param name="value">the char to write</param>
      <remarks>
        <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter" />. Counts
            the number of bytes written.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
            Writes a buffer to the underlying writer and counts the number of bytes written.
            </summary>
      <param name="buffer">the buffer to write</param>
      <param name="index">the start index to write from</param>
      <param name="count">the number of characters to write</param>
      <remarks>
        <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter" />. Counts
            the number of bytes written.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CountingQuietTextWriter.Write(System.String)">
      <summary>
            Writes a string to the output and counts the number of bytes written.
            </summary>
      <param name="str">The string data to write to the output.</param>
      <remarks>
        <para>
            Overrides implementation of <see cref="T:log4net.Util.QuietTextWriter" />. Counts
            the number of bytes written.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.CountingQuietTextWriter.Count">
      <summary>
            Gets or sets the total number of bytes written.
            </summary>
      <value>
            The total number of bytes written.
            </value>
      <remarks>
        <para>
            Gets or sets the total number of bytes written.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.CyclicBuffer">
      <summary>
            A fixed size rolling buffer of logging events.
            </summary>
      <remarks>
        <para>
            An array backed fixed size leaky bucket.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.CyclicBuffer.#ctor(System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="maxSize">The maximum number of logging events in the buffer.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.CyclicBuffer" /> class with 
            the specified maximum number of buffered logging events.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxSize" /> argument is not a positive integer.</exception>
    </member>
    <member name="M:log4net.Util.CyclicBuffer.Append(log4net.Core.LoggingEvent)">
      <summary>
            Appends a <paramref name="loggingEvent" /> to the buffer.
            </summary>
      <param name="loggingEvent">The event to append to the buffer.</param>
      <returns>The event discarded from the buffer, if the buffer is full, otherwise <c>null</c>.</returns>
      <remarks>
        <para>
            Append an event to the buffer. If the buffer still contains free space then
            <c>null</c> is returned. If the buffer is full then an event will be dropped
            to make space for the new event, the event dropped is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CyclicBuffer.PopOldest">
      <summary>
            Get and remove the oldest event in the buffer.
            </summary>
      <returns>The oldest logging event in the buffer</returns>
      <remarks>
        <para>
            Gets the oldest (first) logging event in the buffer and removes it 
            from the buffer.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CyclicBuffer.PopAll">
      <summary>
            Pops all the logging events from the buffer into an array.
            </summary>
      <returns>An array of all the logging events in the buffer.</returns>
      <remarks>
        <para>
            Get all the events in the buffer and clear the buffer.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.CyclicBuffer.Clear">
      <summary>
            Clear the buffer
            </summary>
      <remarks>
        <para>
            Clear the buffer of all events. The events in the buffer are lost.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.CyclicBuffer.Item(System.Int32)">
      <summary>
            Gets the <paramref name="i" />th oldest event currently in the buffer.
            </summary>
      <value>The <paramref name="i" />th oldest event currently in the buffer.</value>
      <remarks>
        <para>
            If <paramref name="i" /> is outside the range 0 to the number of events
            currently in the buffer, then <c>null</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.CyclicBuffer.MaxSize">
      <summary>
            Gets the maximum size of the buffer.
            </summary>
      <value>The maximum size of the buffer.</value>
      <remarks>
        <para>
            Gets the maximum size of the buffer
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.CyclicBuffer.Length">
      <summary>
            Gets the number of logging events in the buffer.
            </summary>
      <value>The number of logging events in the buffer.</value>
      <remarks>
        <para>
            This number is guaranteed to be in the range 0 to <see cref="P:log4net.Util.CyclicBuffer.MaxSize" />
            (inclusive).
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.EmptyCollection">
      <summary>
            An always empty <see cref="T:System.Collections.ICollection" />.
            </summary>
      <remarks>
        <para>
            A singleton implementation of the <see cref="T:System.Collections.ICollection" />
            interface that always represents an empty collection.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.EmptyCollection.s_instance">
      <summary>
            The singleton instance of the empty collection.
            </summary>
    </member>
    <member name="M:log4net.Util.EmptyCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.EmptyCollection" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an 
            <see cref="T:System.Array" />, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> 
            that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection" />. The Array must have zero-based 
            indexing.</param>
      <param name="index">The zero-based index in array at which 
            copying begins.</param>
      <remarks>
        <para>
            As the collection is empty no values are copied into the array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyCollection.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to 
            iterate through the collection.
            </returns>
      <remarks>
        <para>
            As the collection is empty a <see cref="T:log4net.Util.NullEnumerator" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyCollection.Instance">
      <summary>
            Gets the singleton instance of the empty collection.
            </summary>
      <returns>The singleton instance of the empty collection.</returns>
      <remarks>
        <para>
            Gets the singleton instance of the empty collection.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyCollection.IsSynchronized">
      <summary>
            Gets a value indicating if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe).
            </summary>
      <value>
        <b>true</b> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe); otherwise, <b>false</b>.
            </value>
      <remarks>
        <para>
            For the <see cref="T:log4net.Util.EmptyCollection" /> this property is always <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyCollection.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </summary>
      <value>
            The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </value>
      <remarks>
        <para>
            As the collection is empty the <see cref="P:log4net.Util.EmptyCollection.Count" /> is always <c>0</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
      <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </value>
      <remarks>
        <para>
            As the collection is empty and thread safe and synchronized this instance is also
            the <see cref="P:log4net.Util.EmptyCollection.SyncRoot" /> object.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.EmptyDictionary">
      <summary>
            An always empty <see cref="T:System.Collections.IDictionary" />.
            </summary>
      <remarks>
        <para>
            A singleton implementation of the <see cref="T:System.Collections.IDictionary" />
            interface that always represents an empty collection.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.EmptyDictionary.s_instance">
      <summary>
            The singleton instance of the empty dictionary.
            </summary>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.EmptyDictionary" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an 
            <see cref="T:System.Array" />, starting at a particular Array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> 
            that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection" />. The Array must have zero-based 
            indexing.</param>
      <param name="index">The zero-based index in array at which 
            copying begins.</param>
      <remarks>
        <para>
            As the collection is empty no values are copied into the array.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.Add(System.Object,System.Object)">
      <summary>
            Adds an element with the provided key and value to the 
            <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
      <remarks>
        <para>
            As the collection is empty no new values can be added. A <see cref="T:System.InvalidOperationException" />
            is thrown if this method is called.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.Clear">
      <summary>
            Removes all elements from the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <remarks>
        <para>
            As the collection is empty no values can be removed. A <see cref="T:System.InvalidOperationException" />
            is thrown if this method is called.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.Contains(System.Object)">
      <summary>
            Determines whether the <see cref="T:log4net.Util.EmptyDictionary" /> contains an element 
            with the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:log4net.Util.EmptyDictionary" />.</param>
      <returns>
        <c>false</c>
      </returns>
      <remarks>
        <para>
            As the collection is empty the <see cref="M:log4net.Util.EmptyDictionary.Contains(System.Object)" /> method always returns <c>false</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> that can be used to 
            iterate through the collection.
            </returns>
      <remarks>
        <para>
            As the collection is empty a <see cref="T:log4net.Util.NullEnumerator" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.EmptyDictionary.Remove(System.Object)">
      <summary>
            Removes the element with the specified key from the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <param name="key">The key of the element to remove.</param>
      <remarks>
        <para>
            As the collection is empty no values can be removed. A <see cref="T:System.InvalidOperationException" />
            is thrown if this method is called.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.Instance">
      <summary>
            Gets the singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <returns>The singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.</returns>
      <remarks>
        <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.IsSynchronized">
      <summary>
            Gets a value indicating if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe).
            </summary>
      <value>
        <b>true</b> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread-safe); otherwise, <b>false</b>.
            </value>
      <remarks>
        <para>
            For the <see cref="T:log4net.Util.EmptyCollection" /> this property is always <b>true</b>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" /></summary>
      <value>
            The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </value>
      <remarks>
        <para>
            As the collection is empty the <see cref="P:log4net.Util.EmptyDictionary.Count" /> is always <c>0</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
      <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </value>
      <remarks>
        <para>
            As the collection is empty and thread safe and synchronized this instance is also
            the <see cref="P:log4net.Util.EmptyDictionary.SyncRoot" /> object.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.IsFixedSize">
      <summary>
            Gets a value indicating whether the <see cref="T:log4net.Util.EmptyDictionary" /> has a fixed size.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            As the collection is empty <see cref="P:log4net.Util.EmptyDictionary.IsFixedSize" /> always returns <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:log4net.Util.EmptyDictionary" /> is read-only.
            </summary>
      <value>
        <c>true</c>
      </value>
      <remarks>
        <para>
            As the collection is empty <see cref="P:log4net.Util.EmptyDictionary.IsReadOnly" /> always returns <c>true</c>.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.Keys">
      <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <value>An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:log4net.Util.EmptyDictionary" />.</value>
      <remarks>
        <para>
            As the collection is empty a <see cref="T:log4net.Util.EmptyCollection" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.Values">
      <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> containing the values of the <see cref="T:log4net.Util.EmptyDictionary" />.
            </summary>
      <value>An <see cref="T:System.Collections.ICollection" /> containing the values of the <see cref="T:log4net.Util.EmptyDictionary" />.</value>
      <remarks>
        <para>
            As the collection is empty a <see cref="T:log4net.Util.EmptyCollection" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.EmptyDictionary.Item(System.Object)">
      <summary>
            Gets or sets the element with the specified key.
            </summary>
      <param name="key">The key of the element to get or set.</param>
      <value>
        <c>null</c>
      </value>
      <remarks>
        <para>
            As the collection is empty no values can be looked up or stored. 
            If the index getter is called then <c>null</c> is returned.
            A <see cref="T:System.InvalidOperationException" /> is thrown if the setter is called.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
    </member>
    <member name="T:log4net.Util.FormattingInfo">
      <summary>
            Contain the information obtained when parsing formatting modifiers 
            in conversion modifiers.
            </summary>
      <remarks>
        <para>
            Holds the formatting information extracted from the format string by
            the <see cref="T:log4net.Util.PatternParser" />. This is used by the <see cref="T:log4net.Util.PatternConverter" />
            objects when rendering the output.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.FormattingInfo.#ctor">
      <summary>
            Defaut Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.FormattingInfo" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.FormattingInfo.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.FormattingInfo" /> class
            with the specified parameters.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.FormattingInfo.Min">
      <summary>
            Gets or sets the minimum value.
            </summary>
      <value>
            The minimum value.
            </value>
      <remarks>
        <para>
            Gets or sets the minimum value.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.FormattingInfo.Max">
      <summary>
            Gets or sets the maximum value.
            </summary>
      <value>
            The maximum value.
            </value>
      <remarks>
        <para>
            Gets or sets the maximum value.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.FormattingInfo.LeftAlign">
      <summary>
            Gets or sets a flag indicating whether left align is enabled
            or not.
            </summary>
      <value>
            A flag indicating whether left align is enabled or not.
            </value>
      <remarks>
        <para>
            Gets or sets a flag indicating whether left align is enabled or not.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.GlobalContextProperties">
      <summary>
            Implementation of Properties collection for the <see cref="T:log4net.GlobalContext" /></summary>
      <remarks>
        <para>
            This class implements a properties collection that is thread safe and supports both
            storing properties and capturing a read only copy of the current propertied.
            </para>
        <para>
            This class is optimized to the scenario where the properties are read frequently
            and are modified infrequently.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.GlobalContextProperties.m_readOnlyProperties">
      <summary>
            The read only copy of the properties.
            </summary>
      <remarks>
        <para>
            This variable is declared <c>volatile</c> to prevent the compiler and JIT from
            reordering reads and writes of this thread performed on different threads.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Util.GlobalContextProperties.m_syncRoot">
      <summary>
            Lock object used to synchronize updates within this instance
            </summary>
    </member>
    <member name="M:log4net.Util.GlobalContextProperties.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.GlobalContextProperties" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.GlobalContextProperties.Remove(System.String)">
      <summary>
            Remove a property from the global context
            </summary>
      <param name="key">the key for the entry to remove</param>
      <remarks>
        <para>
            Removing an entry from the global context properties is relatively expensive compared
            with reading a value. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.GlobalContextProperties.Clear">
      <summary>
            Clear the global context properties
            </summary>
    </member>
    <member name="M:log4net.Util.GlobalContextProperties.GetReadOnlyProperties">
      <summary>
            Get a readonly immutable copy of the properties
            </summary>
      <returns>the current global context properties</returns>
      <remarks>
        <para>
            This implementation is fast because the GlobalContextProperties class
            stores a readonly copy of the properties.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.GlobalContextProperties.Item(System.String)">
      <summary>
            Gets or sets the value of a property
            </summary>
      <value>
            The value for the property with the specified key
            </value>
      <remarks>
        <para>
            Reading the value for a key is faster than setting the value.
            When the value is written a new read only copy of 
            the properties is created.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.LevelMapping">
      <summary>
            Manages a mapping from levels to <see cref="T:log4net.Util.LevelMappingEntry" /></summary>
      <remarks>
        <para>
            Manages an ordered mapping from <see cref="T:log4net.Core.Level" /> instances 
            to <see cref="T:log4net.Util.LevelMappingEntry" /> subclasses.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.LevelMapping.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initialise a new instance of <see cref="T:log4net.Util.LevelMapping" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LevelMapping.Add(log4net.Util.LevelMappingEntry)">
      <summary>
            Add a <see cref="T:log4net.Util.LevelMappingEntry" /> to this mapping
            </summary>
      <param name="entry">the entry to add</param>
      <remarks>
        <para>
            If a <see cref="T:log4net.Util.LevelMappingEntry" /> has previously been added
            for the same <see cref="T:log4net.Core.Level" /> then that entry will be 
            overwritten.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LevelMapping.Lookup(log4net.Core.Level)">
      <summary>
            Lookup the mapping for the specified level
            </summary>
      <param name="level">the level to lookup</param>
      <returns>the <see cref="T:log4net.Util.LevelMappingEntry" /> for the level or <c>null</c> if no mapping found</returns>
      <remarks>
        <para>
            Lookup the value for the specified level. Finds the nearest
            mapping value for the level that is equal to or less than the
            <paramref name="level" /> specified.
            </para>
        <para>
            If no mapping could be found then <c>null</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LevelMapping.ActivateOptions">
      <summary>
            Initialize options
            </summary>
      <remarks>
        <para>
            Caches the sorted list of <see cref="T:log4net.Util.LevelMappingEntry" /> in an array
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.LogicalThreadContextProperties">
      <summary>
            Implementation of Properties collection for the <see cref="T:log4net.LogicalThreadContext" /></summary>
      <remarks>
        <para>
            Class implements a collection of properties that is specific to each thread.
            The class is not synchronized as each thread has its own <see cref="T:log4net.Util.PropertiesDictionary" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.LogicalThreadContextProperties.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.LogicalThreadContextProperties" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogicalThreadContextProperties.Remove(System.String)">
      <summary>
            Remove a property
            </summary>
      <param name="key">the key for the entry to remove</param>
      <remarks>
        <para>
            Remove the value for the specified <paramref name="key" /> from the context.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogicalThreadContextProperties.Clear">
      <summary>
            Clear all the context properties
            </summary>
      <remarks>
        <para>
            Clear all the context properties
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogicalThreadContextProperties.GetProperties(System.Boolean)">
      <summary>
            Get the PropertiesDictionary stored in the LocalDataStoreSlot for this thread.
            </summary>
      <param name="create">create the dictionary if it does not exist, otherwise return null if is does not exist</param>
      <returns>the properties for this thread</returns>
      <remarks>
        <para>
            The collection returned is only to be used on the calling thread. If the
            caller needs to share the collection between different threads then the 
            caller must clone the collection before doings so.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.LogicalThreadContextProperties.Item(System.String)">
      <summary>
            Gets or sets the value of a property
            </summary>
      <value>
            The value for the property with the specified key
            </value>
      <remarks>
        <para>
            Get or set the property value for the <paramref name="key" /> specified.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.LogLog">
      <summary>
            Outputs log statements from within the log4net assembly.
            </summary>
      <remarks>
        <para>
            Log4net components cannot make log4net logging calls. However, it is
            sometimes useful for the user to learn about what log4net is
            doing.
            </para>
        <para>
            All log4net internal debug calls go to the standard output stream
            whereas internal error messages are sent to the standard error output 
            stream.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.LogLog.s_debugEnabled">
      <summary>
             Default debug level
            </summary>
    </member>
    <member name="F:log4net.Util.LogLog.s_quietMode">
      <summary>
            In quietMode not even errors generate any output.
            </summary>
    </member>
    <member name="M:log4net.Util.LogLog.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.LogLog" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.Debug(System.String)">
      <summary>
            Writes log4net internal debug messages to the 
            standard output stream.
            </summary>
      <param name="message">The message to log.</param>
      <remarks>
        <para>
            All internal debug messages are prepended with 
            the string "log4net: ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.Debug(System.String,System.Exception)">
      <summary>
            Writes log4net internal debug messages to the 
            standard output stream.
            </summary>
      <param name="message">The message to log.</param>
      <param name="exception">An exception to log.</param>
      <remarks>
        <para>
            All internal debug messages are prepended with 
            the string "log4net: ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.Warn(System.String)">
      <summary>
            Writes log4net internal warning messages to the 
            standard error stream.
            </summary>
      <param name="message">The message to log.</param>
      <remarks>
        <para>
            All internal warning messages are prepended with 
            the string "log4net:WARN ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.Warn(System.String,System.Exception)">
      <summary>
            Writes log4net internal warning messages to the 
            standard error stream.
            </summary>
      <param name="message">The message to log.</param>
      <param name="exception">An exception to log.</param>
      <remarks>
        <para>
            All internal warning messages are prepended with 
            the string "log4net:WARN ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.Error(System.String)">
      <summary>
            Writes log4net internal error messages to the 
            standard error stream.
            </summary>
      <param name="message">The message to log.</param>
      <remarks>
        <para>
            All internal error messages are prepended with 
            the string "log4net:ERROR ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.Error(System.String,System.Exception)">
      <summary>
            Writes log4net internal error messages to the 
            standard error stream.
            </summary>
      <param name="message">The message to log.</param>
      <param name="exception">An exception to log.</param>
      <remarks>
        <para>
            All internal debug messages are prepended with 
            the string "log4net:ERROR ".
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.EmitOutLine(System.String)">
      <summary>
            Writes output to the standard output stream.  
            </summary>
      <param name="message">The message to log.</param>
      <remarks>
        <para>
            Writes to both Console.Out and System.Diagnostics.Trace.
            Note that the System.Diagnostics.Trace is not supported
            on the Compact Framework.
            </para>
        <para>
            If the AppDomain is not configured with a config file then
            the call to System.Diagnostics.Trace may fail. This is only
            an issue if you are programmatically creating your own AppDomains.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.LogLog.EmitErrorLine(System.String)">
      <summary>
            Writes output to the standard error stream.  
            </summary>
      <param name="message">The message to log.</param>
      <remarks>
        <para>
            Writes to both Console.Error and System.Diagnostics.Trace.
            Note that the System.Diagnostics.Trace is not supported
            on the Compact Framework.
            </para>
        <para>
            If the AppDomain is not configured with a config file then
            the call to System.Diagnostics.Trace may fail. This is only
            an issue if you are programmatically creating your own AppDomains.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.LogLog.InternalDebugging">
      <summary>
            Gets or sets a value indicating whether log4net internal logging
            is enabled or disabled.
            </summary>
      <value>
        <c>true</c> if log4net internal logging is enabled, otherwise 
            <c>false</c>.
            </value>
      <remarks>
        <para>
            When set to <c>true</c>, internal debug level logging will be 
            displayed.
            </para>
        <para>
            This value can be set by setting the application setting 
            <c>log4net.Internal.Debug</c> in the application configuration
            file.
            </para>
        <para>
            The default value is <c>false</c>, i.e. debugging is
            disabled.
            </para>
      </remarks>
      <example>
        <para>
            The following example enables internal debugging using the 
            application configuration file :
            </para>
        <code lang="XML" escaped="true">
          <configuration>
            <appSettings>
              <add key="log4net.Internal.Debug" value="true" />
            </appSettings>
          </configuration>
        </code>
      </example>
    </member>
    <member name="P:log4net.Util.LogLog.QuietMode">
      <summary>
            Gets or sets a value indicating whether log4net should generate no output
            from internal logging, not even for errors. 
            </summary>
      <value>
        <c>true</c> if log4net should generate no output at all from internal 
            logging, otherwise <c>false</c>.
            </value>
      <remarks>
        <para>
            When set to <c>true</c> will cause internal logging at all levels to be 
            suppressed. This means that no warning or error reports will be logged. 
            This option overrides the <see cref="P:log4net.Util.LogLog.InternalDebugging" /> setting and 
            disables all debug also.
            </para>
        <para>This value can be set by setting the application setting
            <c>log4net.Internal.Quiet</c> in the application configuration file.
            </para>
        <para>
            The default value is <c>false</c>, i.e. internal logging is not
            disabled.
            </para>
      </remarks>
      <example>
            The following example disables internal logging using the 
            application configuration file :
            <code lang="XML" escaped="true"><configuration><appSettings><add key="log4net.Internal.Quiet" value="true" /></appSettings></configuration></code></example>
    </member>
    <member name="P:log4net.Util.LogLog.IsDebugEnabled">
      <summary>
            Test if LogLog.Debug is enabled for output.
            </summary>
      <value>
        <c>true</c> if Debug is enabled
            </value>
      <remarks>
        <para>
            Test if LogLog.Debug is enabled for output.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.LogLog.IsWarnEnabled">
      <summary>
            Test if LogLog.Warn is enabled for output.
            </summary>
      <value>
        <c>true</c> if Warn is enabled
            </value>
      <remarks>
        <para>
            Test if LogLog.Warn is enabled for output.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.LogLog.IsErrorEnabled">
      <summary>
            Test if LogLog.Error is enabled for output.
            </summary>
      <value>
        <c>true</c> if Error is enabled
            </value>
      <remarks>
        <para>
            Test if LogLog.Error is enabled for output.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.NativeError">
      <summary>
            Represents a native error code and message.
            </summary>
      <remarks>
        <para>
            Represents a Win32 platform native error.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.NativeError.#ctor(System.Int32,System.String)">
      <summary>
            Create an instance of the <see cref="T:log4net.Util.NativeError" /> class with the specified 
            error number and message.
            </summary>
      <param name="number">The number of the native error.</param>
      <param name="message">The message of the native error.</param>
      <remarks>
        <para>
            Create an instance of the <see cref="T:log4net.Util.NativeError" /> class with the specified 
            error number and message.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NativeError.GetLastError">
      <summary>
            Create a new instance of the <see cref="T:log4net.Util.NativeError" /> class for the last Windows error.
            </summary>
      <returns>
            An instance of the <see cref="T:log4net.Util.NativeError" /> class for the last windows error.
            </returns>
      <remarks>
        <para>
            The message for the <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" /> error number is lookup up using the 
            native Win32 <c>FormatMessage</c> function.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NativeError.GetError(System.Int32)">
      <summary>
            Create a new instance of the <see cref="T:log4net.Util.NativeError" /> class.
            </summary>
      <param name="number">the error number for the native error</param>
      <returns>
            An instance of the <see cref="T:log4net.Util.NativeError" /> class for the specified 
            error number.
            </returns>
      <remarks>
        <para>
            The message for the specified error number is lookup up using the 
            native Win32 <c>FormatMessage</c> function.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NativeError.GetErrorMessage(System.Int32)">
      <summary>
            Retrieves the message corresponding with a Win32 message identifier.
            </summary>
      <param name="messageId">Message identifier for the requested message.</param>
      <returns>
            The message corresponding with the specified message identifier.
            </returns>
      <remarks>
        <para>
            The message will be searched for in system message-table resource(s)
            using the native <c>FormatMessage</c> function.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NativeError.ToString">
      <summary>
            Return error information string
            </summary>
      <returns>error information string</returns>
      <remarks>
        <para>
            Return error information string
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NativeError.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr)">
      <summary>
            Formats a message string.
            </summary>
      <param name="dwFlags">Formatting options, and how to interpret the <paramref name="lpSource" /> parameter.</param>
      <param name="lpSource">Location of the message definition.</param>
      <param name="dwMessageId">Message identifier for the requested message.</param>
      <param name="dwLanguageId">Language identifier for the requested message.</param>
      <param name="lpBuffer">If <paramref name="dwFlags" /> includes FORMAT_MESSAGE_ALLOCATE_BUFFER, the function allocates a buffer using the <c>LocalAlloc</c> function, and places the pointer to the buffer at the address specified in <paramref name="lpBuffer" />.</param>
      <param name="nSize">If the FORMAT_MESSAGE_ALLOCATE_BUFFER flag is not set, this parameter specifies the maximum number of TCHARs that can be stored in the output buffer. If FORMAT_MESSAGE_ALLOCATE_BUFFER is set, this parameter specifies the minimum number of TCHARs to allocate for an output buffer.</param>
      <param name="Arguments">Pointer to an array of values that are used as insert values in the formatted message.</param>
      <remarks>
        <para>
            The function requires a message definition as input. The message definition can come from a 
            buffer passed into the function. It can come from a message table resource in an 
            already-loaded module. Or the caller can ask the function to search the system's message 
            table resource(s) for the message definition. The function finds the message definition 
            in a message table resource based on a message identifier and a language identifier. 
            The function copies the formatted message text to an output buffer, processing any embedded 
            insert sequences if requested.
            </para>
        <para>
            To prevent the usage of unsafe code, this stub does not support inserting values in the formatted message.
            </para>
      </remarks>
      <returns>
        <para>
            If the function succeeds, the return value is the number of TCHARs stored in the output 
            buffer, excluding the terminating null character.
            </para>
        <para>
            If the function fails, the return value is zero. To get extended error information, 
            call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
            </para>
      </returns>
    </member>
    <member name="P:log4net.Util.NativeError.Number">
      <summary>
            Gets the number of the native error.
            </summary>
      <value>
            The number of the native error.
            </value>
      <remarks>
        <para>
            Gets the number of the native error.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.NativeError.Message">
      <summary>
            Gets the message of the native error.
            </summary>
      <value>
            The message of the native error.
            </value>
      <remarks>
        <para>
        </para>
            Gets the message of the native error.
            </remarks>
    </member>
    <member name="T:log4net.Util.NullDictionaryEnumerator">
      <summary>
            An always empty <see cref="T:System.Collections.IDictionaryEnumerator" />.
            </summary>
      <remarks>
        <para>
            A singleton implementation of the <see cref="T:System.Collections.IDictionaryEnumerator" /> over a collection
            that is empty and not modifiable.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.NullDictionaryEnumerator.s_instance">
      <summary>
            The singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </summary>
    </member>
    <member name="M:log4net.Util.NullDictionaryEnumerator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullDictionaryEnumerator.MoveNext">
      <summary>
            Test if the enumerator can advance, if so advance.
            </summary>
      <returns>
        <c>false</c> as the <see cref="T:log4net.Util.NullDictionaryEnumerator" /> cannot advance.</returns>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="M:log4net.Util.NullDictionaryEnumerator.MoveNext" />
            will always return <c>false</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullDictionaryEnumerator.Reset">
      <summary>
            Resets the enumerator back to the start.
            </summary>
      <remarks>
        <para>
            As the enumerator is over an empty collection <see cref="M:log4net.Util.NullDictionaryEnumerator.Reset" /> does nothing.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.NullDictionaryEnumerator.Instance">
      <summary>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </summary>
      <returns>The singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.</returns>
      <remarks>
        <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullDictionaryEnumerator" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.NullDictionaryEnumerator.Current">
      <summary>
            Gets the current object from the enumerator.
            </summary>
      <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
    </member>
    <member name="P:log4net.Util.NullDictionaryEnumerator.Key">
      <summary>
            Gets the current key from the enumerator.
            </summary>
      <remarks>
            Throws an exception because the <see cref="T:log4net.Util.NullDictionaryEnumerator" />
            never has a current value.
            </remarks>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Key" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
    </member>
    <member name="P:log4net.Util.NullDictionaryEnumerator.Value">
      <summary>
            Gets the current value from the enumerator.
            </summary>
      <value>The current value from the enumerator.</value>
      <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Value" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
    </member>
    <member name="P:log4net.Util.NullDictionaryEnumerator.Entry">
      <summary>
            Gets the current entry from the enumerator.
            </summary>
      <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current entry.
            </remarks>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullDictionaryEnumerator.Entry" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullDictionaryEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
    </member>
    <member name="T:log4net.Util.NullEnumerator">
      <summary>
            An always empty <see cref="T:System.Collections.IEnumerator" />.
            </summary>
      <remarks>
        <para>
            A singleton implementation of the <see cref="T:System.Collections.IEnumerator" /> over a collection
            that is empty and not modifiable.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.NullEnumerator.s_instance">
      <summary>
            The singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </summary>
    </member>
    <member name="M:log4net.Util.NullEnumerator.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.NullEnumerator" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to enforce the singleton pattern.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullEnumerator.MoveNext">
      <summary>
            Test if the enumerator can advance, if so advance
            </summary>
      <returns>
        <c>false</c> as the <see cref="T:log4net.Util.NullEnumerator" /> cannot advance.</returns>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="M:log4net.Util.NullEnumerator.MoveNext" />
            will always return <c>false</c>.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullEnumerator.Reset">
      <summary>
            Resets the enumerator back to the start.
            </summary>
      <remarks>
        <para>
            As the enumerator is over an empty collection <see cref="M:log4net.Util.NullEnumerator.Reset" /> does nothing.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.NullEnumerator.Instance">
      <summary>
            Get the singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </summary>
      <returns>The singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.</returns>
      <remarks>
        <para>
            Gets the singleton instance of the <see cref="T:log4net.Util.NullEnumerator" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.NullEnumerator.Current">
      <summary>
            Gets the current object from the enumerator.
            </summary>
      <remarks>
            Throws an <see cref="T:System.InvalidOperationException" /> because the 
            <see cref="T:log4net.Util.NullDictionaryEnumerator" /> never has a current value.
            </remarks>
      <remarks>
        <para>
            As the enumerator is over an empty collection its <see cref="P:log4net.Util.NullEnumerator.Current" />
            value cannot be moved over a valid position, therefore <see cref="P:log4net.Util.NullEnumerator.Current" />
            will throw an <see cref="T:System.InvalidOperationException" />.
            </para>
      </remarks>
      <exception cref="T:System.InvalidOperationException">The collection is empty and <see cref="P:log4net.Util.NullEnumerator.Current" /> 
            cannot be positioned over a valid location.</exception>
    </member>
    <member name="T:log4net.Util.NullSecurityContext">
      <summary>
            A SecurityContext used when a SecurityContext is not required
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.Util.NullSecurityContext" /> is a no-op implementation of the
            <see cref="T:log4net.Core.SecurityContext" /> base class. It is used where a <see cref="T:log4net.Core.SecurityContext" />
            is required but one has not been provided.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.NullSecurityContext.Instance">
      <summary>
            Singleton instance of <see cref="T:log4net.Util.NullSecurityContext" /></summary>
      <remarks>
        <para>
            Singleton instance of <see cref="T:log4net.Util.NullSecurityContext" /></para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullSecurityContext.#ctor">
      <summary>
            Private constructor
            </summary>
      <remarks>
        <para>
            Private constructor for singleton pattern.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.NullSecurityContext.Impersonate(System.Object)">
      <summary>
            Impersonate this SecurityContext
            </summary>
      <param name="state">State supplied by the caller</param>
      <returns>
        <c>null</c>
      </returns>
      <remarks>
        <para>
            No impersonation is done and <c>null</c> is always returned.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.OnlyOnceErrorHandler">
      <summary>
            Implements log4net's default error handling policy which consists 
            of emitting a message for the first error in an appender and 
            ignoring all subsequent errors.
            </summary>
      <remarks>
        <para>
            The error message is printed on the standard error output stream.
            </para>
        <para>
            This policy aims at protecting an otherwise working application
            from being flooded with error messages when logging fails.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.OnlyOnceErrorHandler.m_firstTime">
      <summary>
            Flag to indicate if it is the first error
            </summary>
    </member>
    <member name="F:log4net.Util.OnlyOnceErrorHandler.m_prefix">
      <summary>
            String to prefix each message with
            </summary>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.#ctor">
      <summary>
            Default Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.OnlyOnceErrorHandler" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="prefix">The prefix to use for each message.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.OnlyOnceErrorHandler" /> class
            with the specified prefix.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String,System.Exception,log4net.Core.ErrorCode)">
      <summary>
            Log an Error
            </summary>
      <param name="message">The error message.</param>
      <param name="e">The exception.</param>
      <param name="errorCode">The internal error code.</param>
      <remarks>
        <para>
            Prints the message and the stack trace of the exception on the standard
            error output stream.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String,System.Exception)">
      <summary>
            Log an Error
            </summary>
      <param name="message">The error message.</param>
      <param name="e">The exception.</param>
      <remarks>
        <para>
            Prints the message and the stack trace of the exception on the standard
            error output stream.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OnlyOnceErrorHandler.Error(System.String)">
      <summary>
            Log an error
            </summary>
      <param name="message">The error message.</param>
      <remarks>
        <para>
            Print a the error message passed as parameter on the standard
            error output stream.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.OnlyOnceErrorHandler.IsEnabled">
      <summary>
            Is error logging enabled
            </summary>
      <remarks>
        <para>
            Is error logging enabled. Logging is only enabled for the
            first error delivered to the <see cref="T:log4net.Util.OnlyOnceErrorHandler" />.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.OptionConverter">
      <summary>
            A convenience class to convert property values to specific types.
            </summary>
      <remarks>
        <para>
            Utility functions for converting types and parsing values.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.OptionConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.OptionConverter" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.ToBoolean(System.String,System.Boolean)">
      <summary>
            Converts a string to a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="argValue">String to convert.</param>
      <param name="defaultValue">The default value.</param>
      <returns>The <see cref="T:System.Boolean" /> value of <paramref name="argValue" />.</returns>
      <remarks>
        <para>
            If <paramref name="argValue" /> is "true", then <c>true</c> is returned. 
            If <paramref name="argValue" /> is "false", then <c>false</c> is returned. 
            Otherwise, <paramref name="defaultValue" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.ToFileSize(System.String,System.Int64)">
      <summary>
            Parses a file size into a number.
            </summary>
      <param name="argValue">String to parse.</param>
      <param name="defaultValue">The default value.</param>
      <returns>The <see cref="T:System.Int64" /> value of <paramref name="argValue" />.</returns>
      <remarks>
        <para>
            Parses a file size of the form: number[KB|MB|GB] into a
            long value. It is scaled with the appropriate multiplier.
            </para>
        <para>
          <paramref name="defaultValue" /> is returned when <paramref name="argValue" />
            cannot be converted to a <see cref="T:System.Int64" /> value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.ConvertStringTo(System.Type,System.String)">
      <summary>
            Converts a string to an object.
            </summary>
      <param name="target">The target type to convert to.</param>
      <param name="txt">The string to convert to an object.</param>
      <returns>
            The object converted from a string or <c>null</c> when the 
            conversion failed.
            </returns>
      <remarks>
        <para>
            Converts a string to an object. Uses the converter registry to try
            to convert the string value into the specified target type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.CanConvertTypeTo(System.Type,System.Type)">
      <summary>
            Checks if there is an appropriate type conversion from the source type to the target type.
            </summary>
      <param name="sourceType">The type to convert from.</param>
      <param name="targetType">The type to convert to.</param>
      <returns>
        <c>true</c> if there is a conversion from the source type to the target type.</returns>
      <remarks>
            Checks if there is an appropriate type conversion from the source type to the target type.
            <para></para></remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.ConvertTypeTo(System.Object,System.Type)">
      <summary>
            Converts an object to the target type.
            </summary>
      <param name="sourceInstance">The object to convert to the target type.</param>
      <param name="targetType">The type to convert to.</param>
      <returns>The converted object.</returns>
      <remarks>
        <para>
            Converts an object to the target type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.InstantiateByClassName(System.String,System.Type,System.Object)">
      <summary>
            Instantiates an object given a class name.
            </summary>
      <param name="className">The fully qualified class name of the object to instantiate.</param>
      <param name="superClass">The class to which the new object should belong.</param>
      <param name="defaultValue">The object to return in case of non-fulfillment.</param>
      <returns>
            An instance of the <paramref name="className" /> or <paramref name="defaultValue" />
            if the object could not be instantiated.
            </returns>
      <remarks>
        <para>
            Checks that the <paramref name="className" /> is a subclass of
            <paramref name="superClass" />. If that test fails or the object could
            not be instantiated, then <paramref name="defaultValue" /> is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.SubstituteVariables(System.String,System.Collections.IDictionary)">
      <summary>
            Performs variable substitution in string <paramref name="val" /> from the 
            values of keys found in <paramref name="props" />.
            </summary>
      <param name="value">The string on which variable substitution is performed.</param>
      <param name="props">The dictionary to use to lookup variables.</param>
      <returns>The result of the substitutions.</returns>
      <remarks>
        <para>
            The variable substitution delimiters are <b>${</b> and <b>}</b>.
            </para>
        <para>
            For example, if props contains <c>key=value</c>, then the call
            </para>
        <para>
          <code lang="C#">
            string s = OptionConverter.SubstituteVariables("Value of key is ${key}.");
            </code>
        </para>
        <para>
            will set the variable <c>s</c> to "Value of key is value.".
            </para>
        <para>
            If no value could be found for the specified key, then substitution 
            defaults to an empty string.
            </para>
        <para>
            For example, if system properties contains no value for the key
            "nonExistentKey", then the call
            </para>
        <para>
          <code lang="C#">
            string s = OptionConverter.SubstituteVariables("Value of nonExistentKey is [${nonExistentKey}]");
            </code>
        </para>
        <para>
            will set <s>s</s> to "Value of nonExistentKey is []".	 
            </para>
        <para>
            An Exception is thrown if <paramref name="value" /> contains a start 
            delimiter "${" which is not balanced by a stop delimiter "}". 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.OptionConverter.ParseEnum(System.Type,System.String,System.Boolean)">
      <summary>
            Converts the string representation of the name or numeric value of one or 
            more enumerated constants to an equivalent enumerated object.
            </summary>
      <param name="enumType">The type to convert to.</param>
      <param name="value">The enum string value.</param>
      <param name="ignoreCase">If <c>true</c>, ignore case; otherwise, regard case.</param>
      <returns>An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</returns>
    </member>
    <member name="T:log4net.Util.PatternParser">
      <summary>
            Most of the work of the <see cref="T:log4net.Layout.PatternLayout" /> class
            is delegated to the PatternParser class.
            </summary>
      <remarks>
        <para>
            The <c>PatternParser</c> processes a pattern string and
            returns a chain of <see cref="T:log4net.Util.PatternConverter" /> objects.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="T:log4net.Util.PatternParser.StringLengthComparer">
      <summary>
            Sort strings by length
            </summary>
      <remarks>
        <para>
          <see cref="T:System.Collections.IComparer" /> that orders strings by string length.
            The longest strings are placed first
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Util.PatternParser.m_head">
      <summary>
            The first pattern converter in the chain
            </summary>
    </member>
    <member name="F:log4net.Util.PatternParser.m_tail">
      <summary>
             the last pattern converter in the chain
            </summary>
    </member>
    <member name="F:log4net.Util.PatternParser.m_pattern">
      <summary>
            The pattern
            </summary>
    </member>
    <member name="F:log4net.Util.PatternParser.m_patternConverters">
      <summary>
            Internal map of converter identifiers to converter types
            </summary>
      <remarks>
        <para>
            This map overrides the static s_globalRulesRegistry map.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternParser.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="pattern">The pattern to parse.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PatternParser" /> class 
            with the specified pattern string.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternParser.Parse">
      <summary>
            Parses the pattern into a chain of pattern converters.
            </summary>
      <returns>The head of a chain of pattern converters.</returns>
      <remarks>
        <para>
            Parses the pattern into a chain of pattern converters.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternParser.BuildCache">
      <summary>
            Build the unified cache of converters from the static and instance maps
            </summary>
      <returns>the list of all the converter names</returns>
      <remarks>
        <para>
            Build the unified cache of converters from the static and instance maps
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternParser.ParseInternal(System.String,System.String[])">
      <summary>
            Internal method to parse the specified pattern to find specified matches
            </summary>
      <param name="pattern">the pattern to parse</param>
      <param name="matches">the converter names to match in the pattern</param>
      <remarks>
        <para>
            The matches param must be sorted such that longer strings come before shorter ones.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternParser.ProcessLiteral(System.String)">
      <summary>
            Process a parsed literal
            </summary>
      <param name="text">the literal text</param>
    </member>
    <member name="M:log4net.Util.PatternParser.ProcessConverter(System.String,System.String,log4net.Util.FormattingInfo)">
      <summary>
            Process a parsed converter pattern
            </summary>
      <param name="converterName">the name of the converter</param>
      <param name="option">the optional option for the converter</param>
      <param name="formattingInfo">the formatting info for the converter</param>
    </member>
    <member name="M:log4net.Util.PatternParser.AddConverter(log4net.Util.PatternConverter)">
      <summary>
            Resets the internal state of the parser and adds the specified pattern converter 
            to the chain.
            </summary>
      <param name="pc">The pattern converter to add.</param>
    </member>
    <member name="P:log4net.Util.PatternParser.PatternConverters">
      <summary>
            Get the converter registry used by this parser
            </summary>
      <value>
            The converter registry used by this parser
            </value>
      <remarks>
        <para>
            Get the converter registry used by this parser
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.PatternString">
      <summary>
            This class implements a patterned string.
            </summary>
      <remarks>
        <para>
            This string has embedded patterns that are resolved and expanded
            when the string is formatted.
            </para>
        <para>
            This class functions similarly to the <see cref="T:log4net.Layout.PatternLayout" />
            in that it accepts a pattern and renders it to a string. Unlike the 
            <see cref="T:log4net.Layout.PatternLayout" /> however the <c>PatternString</c>
            does not render the properties of a specific <see cref="T:log4net.Core.LoggingEvent" /> but
            of the process in general.
            </para>
        <para>
            The recognized conversion pattern names are:
            </para>
        <list type="table">
          <listheader>
            <term>Conversion Pattern Name</term>
            <description>Effect</description>
          </listheader>
          <item>
            <term>appdomain</term>
            <description>
              <para>
                        Used to output the friendly name of the current AppDomain.
                        </para>
            </description>
          </item>
          <item>
            <term>date</term>
            <description>
              <para>
            			Used to output the date of the logging event in the local time zone. 
            			To output the date in universal time use the <c>%utcdate</c> pattern.
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%date{HH:mm:ss,fff}</b> or
            			<b>%date{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
              <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:System.DateTime.ToString(System.String)" />.
            			</para>
              <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%date{ISO8601}</b> or <b>%date{ABSOLUTE}</b>.
            			</para>
              <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:System.DateTime.ToString(System.String)" />.
            			</para>
            </description>
          </item>
          <item>
            <term>env</term>
            <description>
              <para>
            			Used to output the a specific environment variable. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%env{COMPUTERNAME}</b> would include the value
            			of the <c>COMPUTERNAME</c> environment variable.
                        </para>
              <para>
                        The <c>env</c> pattern is not supported on the .NET Compact Framework.
                        </para>
            </description>
          </item>
          <item>
            <term>identity</term>
            <description>
              <para>
            			Used to output the user name for the currently active user
            			(Principal.Identity.Name).
            			</para>
            </description>
          </item>
          <item>
            <term>newline</term>
            <description>
              <para>
            			Outputs the platform dependent line separator character or
            			characters.
            			</para>
              <para>
            			This conversion pattern name offers the same performance as using 
            			non-portable line separator strings such as	"\n", or "\r\n". 
            			Thus, it is the preferred way of specifying a line separator.
            			</para>
            </description>
          </item>
          <item>
            <term>processid</term>
            <description>
              <para>
            			Used to output the system process ID for the current process.
                        </para>
            </description>
          </item>
          <item>
            <term>property</term>
            <description>
              <para>
            			Used to output a specific context property. The key to 
            			lookup must be specified within braces and directly following the
            			pattern specifier, e.g. <b>%property{user}</b> would include the value
            			from the property that is keyed by the string 'user'. Each property value
            			that is to be included in the log must be specified separately.
            			Properties are stored in logging contexts. By default 
            			the <c>log4net:HostName</c> property is set to the name of machine on 
            			which the event was originally logged.
            			</para>
              <para>
            			If no key is specified, e.g. <b>%property</b> then all the keys and their
            			values are printed in a comma separated list.
            			</para>
              <para>
            			The properties of an event are combined from a number of different
            			contexts. These are listed below in the order in which they are searched.
            			</para>
              <list type="definition">
                <item>
                  <term>the thread properties</term>
                  <description>
            					The <see cref="P:log4net.ThreadContext.Properties" /> that are set on the current
            					thread. These properties are shared by all events logged on this thread.
            					</description>
                </item>
                <item>
                  <term>the global properties</term>
                  <description>
            					The <see cref="P:log4net.GlobalContext.Properties" /> that are set globally. These 
            					properties are shared by all the threads in the AppDomain.
            					</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>random</term>
            <description>
              <para>
                        Used to output a random string of characters. The string is made up of
                        uppercase letters and numbers. By default the string is 4 characters long.
                        The length of the string can be specified within braces directly following the
            			pattern specifier, e.g. <b>%random{8}</b> would output an 8 character string.
                        </para>
            </description>
          </item>
          <item>
            <term>username</term>
            <description>
              <para>
            			Used to output the WindowsIdentity for the currently
            			active user.
            			</para>
            </description>
          </item>
          <item>
            <term>utcdate</term>
            <description>
              <para>
            			Used to output the date of the logging event in universal time. 
            			The date conversion 
            			specifier may be followed by a <i>date format specifier</i> enclosed 
            			between braces. For example, <b>%utcdate{HH:mm:ss,fff}</b> or
            			<b>%utcdate{dd MMM yyyy HH:mm:ss,fff}</b>.  If no date format specifier is 
            			given then ISO8601 format is
            			assumed (<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />).
            			</para>
              <para>
            			The date format specifier admits the same syntax as the
            			time pattern string of the <see cref="M:System.DateTime.ToString(System.String)" />.
            			</para>
              <para>
            			For better results it is recommended to use the log4net date
            			formatters. These can be specified using one of the strings
            			"ABSOLUTE", "DATE" and "ISO8601" for specifying 
            			<see cref="T:log4net.DateFormatter.AbsoluteTimeDateFormatter" />, 
            			<see cref="T:log4net.DateFormatter.DateTimeDateFormatter" /> and respectively 
            			<see cref="T:log4net.DateFormatter.Iso8601DateFormatter" />. For example, 
            			<b>%utcdate{ISO8601}</b> or <b>%utcdate{ABSOLUTE}</b>.
            			</para>
              <para>
            			These dedicated date formatters perform significantly
            			better than <see cref="M:System.DateTime.ToString(System.String)" />.
            			</para>
            </description>
          </item>
          <item>
            <term>%</term>
            <description>
              <para>
            			The sequence %% outputs a single percent sign.
            			</para>
            </description>
          </item>
        </list>
        <para>
            Additional pattern converters may be registered with a specific <see cref="T:log4net.Util.PatternString" />
            instance using <see cref="M:log4net.Util.PatternString.AddConverter(log4net.Util.PatternString.ConverterInfo)" /> or
            <see cref="M:log4net.Util.PatternString.AddConverter(System.String,System.Type)" />.
            </para>
        <para>
            See the <see cref="T:log4net.Layout.PatternLayout" /> for details on the 
            <i>format modifiers</i> supported by the patterns.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Util.PatternString.ConverterInfo">
      <summary>
            Wrapper class used to map converter names to converter types
            </summary>
      <remarks>
        <para>
            Wrapper class used to map converter names to converter types
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.ConverterInfo.#ctor">
      <summary>
            default constructor
            </summary>
    </member>
    <member name="P:log4net.Util.PatternString.ConverterInfo.Name">
      <summary>
            Gets or sets the name of the conversion pattern
            </summary>
      <value>
            The name of the conversion pattern
            </value>
      <remarks>
        <para>
            Gets or sets the name of the conversion pattern
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PatternString.ConverterInfo.Type">
      <summary>
            Gets or sets the type of the converter
            </summary>
      <value>
            The type of the converter
            </value>
      <remarks>
        <para>
            Gets or sets the type of the converter
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Util.PatternString.s_globalRulesRegistry">
      <summary>
            Internal map of converter identifiers to converter types.
            </summary>
    </member>
    <member name="F:log4net.Util.PatternString.m_pattern">
      <summary>
            the pattern
            </summary>
    </member>
    <member name="F:log4net.Util.PatternString.m_head">
      <summary>
            the head of the pattern converter chain
            </summary>
    </member>
    <member name="F:log4net.Util.PatternString.m_instanceRulesRegistry">
      <summary>
            patterns defined on this PatternString only
            </summary>
    </member>
    <member name="M:log4net.Util.PatternString.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Initialize a new instance of <see cref="T:log4net.Util.PatternString" /></para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.#ctor(System.String)">
      <summary>
            Constructs a PatternString
            </summary>
      <param name="pattern">The pattern to use with this PatternString</param>
      <remarks>
        <para>
            Initialize a new instance of <see cref="T:log4net.Util.PatternString" /> with the pattern specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.ActivateOptions">
      <summary>
            Initialize object options
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.PatternString.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.PatternString.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.PatternString.ActivateOptions" /> must be called again.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.CreatePatternParser(System.String)">
      <summary>
            Create the <see cref="T:log4net.Util.PatternParser" /> used to parse the pattern
            </summary>
      <param name="pattern">the pattern to parse</param>
      <returns>The <see cref="T:log4net.Util.PatternParser" /></returns>
      <remarks>
        <para>
            Returns PatternParser used to parse the conversion string. Subclasses
            may override this to return a subclass of PatternParser which recognize
            custom conversion pattern name.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.Format(System.IO.TextWriter)">
      <summary>
            Produces a formatted string as specified by the conversion pattern.
            </summary>
      <param name="writer">The TextWriter to write the formatted event to</param>
      <remarks>
        <para>
            Format the pattern to the <paramref name="writer" />.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.Format">
      <summary>
            Format the pattern as a string
            </summary>
      <returns>the pattern formatted as a string</returns>
      <remarks>
        <para>
            Format the pattern to a string.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.AddConverter(log4net.Util.PatternString.ConverterInfo)">
      <summary>
            Add a converter to this PatternString
            </summary>
      <param name="converterInfo">the converter info</param>
      <remarks>
        <para>
            This version of the method is used by the configurator.
            Programmatic users should use the alternative <see cref="M:log4net.Util.PatternString.AddConverter(System.String,System.Type)" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PatternString.AddConverter(System.String,System.Type)">
      <summary>
            Add a converter to this PatternString
            </summary>
      <param name="name">the name of the conversion pattern for this converter</param>
      <param name="type">the type of the converter</param>
      <remarks>
        <para>
            Add a converter to this PatternString
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PatternString.ConversionPattern">
      <summary>
            Gets or sets the pattern formatting string
            </summary>
      <value>
            The pattern formatting string
            </value>
      <remarks>
        <para>
            The <b>ConversionPattern</b> option. This is the string which
            controls formatting and consists of a mix of literal content and
            conversion specifiers.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ReadOnlyPropertiesDictionary">
      <summary>
            String keyed object map that is read only.
            </summary>
      <remarks>
        <para>
            This collection is readonly and cannot be modified.
            </para>
        <para>
            While this collection is serializable only member 
            objects that are serializable will
            be serialized along with this collection.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.Util.ReadOnlyPropertiesDictionary.m_hashtable">
      <summary>
            The Hashtable used to store the properties data
            </summary>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor(log4net.Util.ReadOnlyPropertiesDictionary)">
      <summary>
            Copy Constructor
            </summary>
      <param name="propertiesDictionary">properties to copy</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReadOnlyPropertiesDictionary" /> class 
            with serialized data.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.GetKeys">
      <summary>
            Gets the key names.
            </summary>
      <returns>An array of all the keys.</returns>
      <remarks>
        <para>
            Gets the key names.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.Contains(System.String)">
      <summary>
            Test if the dictionary contains a specified key
            </summary>
      <param name="key">the key to look for</param>
      <returns>true if the dictionary contains the specified key</returns>
      <remarks>
        <para>
            Test if the dictionary contains a specified key
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
      <remarks>
        <para>
            Serializes this object into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> provided.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReadOnlyPropertiesDictionary.Clear">
      <summary>
            Remove all properties from the properties collection
            </summary>
    </member>
    <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.Item(System.String)">
      <summary>
            Gets or sets the value of the  property with the specified key.
            </summary>
      <value>
            The value of the property with the specified key.
            </value>
      <param name="key">The key of the property to get or set.</param>
      <remarks>
        <para>
            The property value will only be serialized if it is serializable.
            If it cannot be serialized it will be silently ignored if
            a serialization operation is performed.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.InnerHashtable">
      <summary>
            The hashtable used to store the properties
            </summary>
      <value>
            The internal collection used to store the properties
            </value>
      <remarks>
        <para>
            The hashtable used to store the properties
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ReadOnlyPropertiesDictionary.Count">
      <summary>
            The number of properties in this collection
            </summary>
    </member>
    <member name="T:log4net.Util.PropertiesDictionary">
      <summary>
            String keyed object map.
            </summary>
      <remarks>
        <para>
            While this collection is serializable only member 
            objects that are serializable will
            be serialized along with this collection.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.PropertiesDictionary.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PropertiesDictionary.#ctor(log4net.Util.ReadOnlyPropertiesDictionary)">
      <summary>
            Constructor
            </summary>
      <param name="propertiesDictionary">properties to copy</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PropertiesDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.PropertiesDictionary" /> class 
            with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
            Because this class is sealed the serialization constructor is private.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PropertiesDictionary.Remove(System.String)">
      <summary>
            Remove the entry with the specified key from this dictionary
            </summary>
      <param name="key">the key for the entry to remove</param>
      <remarks>
        <para>
            Remove the entry with the specified key from this dictionary
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.PropertiesDictionary.Clear">
      <summary>
            Remove all properties from the properties collection
            </summary>
      <remarks>
        <para>
            Remove all properties from the properties collection
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.PropertiesDictionary.Item(System.String)">
      <summary>
            Gets or sets the value of the  property with the specified key.
            </summary>
      <value>
            The value of the property with the specified key.
            </value>
      <param name="key">The key of the property to get or set.</param>
      <remarks>
        <para>
            The property value will only be serialized if it is serializable.
            If it cannot be serialized it will be silently ignored if
            a serialization operation is performed.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ProtectCloseTextWriter">
      <summary>
            A <see cref="T:System.IO.TextWriter" /> that ignores the <see cref="M:log4net.Util.ProtectCloseTextWriter.Close" /> message
            </summary>
      <remarks>
        <para>
            This writer is used in special cases where it is necessary 
            to protect a writer from being closed by a client.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.ProtectCloseTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Constructor
            </summary>
      <param name="writer">the writer to actually write to</param>
      <remarks>
        <para>
            Create a new ProtectCloseTextWriter using a writer
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ProtectCloseTextWriter.Attach(System.IO.TextWriter)">
      <summary>
            Attach this instance to a different underlying <see cref="T:System.IO.TextWriter" /></summary>
      <param name="writer">the writer to attach to</param>
      <remarks>
        <para>
            Attach this instance to a different underlying <see cref="T:System.IO.TextWriter" /></para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ProtectCloseTextWriter.Close">
      <summary>
            Does not close the underlying output writer.
            </summary>
      <remarks>
        <para>
            Does not close the underlying output writer.
            This method does nothing.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ReaderWriterLock">
      <summary>
            Defines a lock that supports single writers and multiple readers
            </summary>
      <remarks>
        <para>
          <c>ReaderWriterLock</c> is used to synchronize access to a resource. 
            At any given time, it allows either concurrent read access for 
            multiple threads, or write access for a single thread. In a 
            situation where a resource is changed infrequently, a 
            <c>ReaderWriterLock</c> provides better throughput than a simple 
            one-at-a-time lock, such as <see cref="T:System.Threading.Monitor" />.
            </para>
        <para>
            If a platform does not support a <c>System.Threading.ReaderWriterLock</c> 
            implementation then all readers and writers are serialized. Therefore 
            the caller must not rely on multiple simultaneous readers.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.ReaderWriterLock.#ctor">
      <summary>
            Constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ReaderWriterLock" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReaderWriterLock.AcquireReaderLock">
      <summary>
            Acquires a reader lock
            </summary>
      <remarks>
        <para>
          <see cref="M:log4net.Util.ReaderWriterLock.AcquireReaderLock" /> blocks if a different thread has the writer 
            lock, or if at least one thread is waiting for the writer lock.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReaderWriterLock.ReleaseReaderLock">
      <summary>
            Decrements the lock count
            </summary>
      <remarks>
        <para>
          <see cref="M:log4net.Util.ReaderWriterLock.ReleaseReaderLock" /> decrements the lock count. When the count 
            reaches zero, the lock is released.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReaderWriterLock.AcquireWriterLock">
      <summary>
            Acquires the writer lock
            </summary>
      <remarks>
        <para>
            This method blocks if another thread has a reader lock or writer lock.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReaderWriterLock.ReleaseWriterLock">
      <summary>
            Decrements the lock count on the writer lock
            </summary>
      <remarks>
        <para>
            ReleaseWriterLock decrements the writer lock count. 
            When the count reaches zero, the writer lock is released.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ReusableStringWriter">
      <summary>
            A <see cref="T:System.IO.StringWriter" /> that can be <see cref="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)" /> and reused
            </summary>
      <remarks>
        <para>
            A <see cref="T:System.IO.StringWriter" /> that can be <see cref="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)" /> and reused.
            This uses a single buffer for string operations.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.ReusableStringWriter.#ctor(System.IFormatProvider)">
      <summary>
            Create an instance of <see cref="T:log4net.Util.ReusableStringWriter" /></summary>
      <param name="formatProvider">the format provider to use</param>
      <remarks>
        <para>
            Create an instance of <see cref="T:log4net.Util.ReusableStringWriter" /></para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReusableStringWriter.Dispose(System.Boolean)">
      <summary>
            Override Dispose to prevent closing of writer
            </summary>
      <param name="disposing">flag</param>
      <remarks>
        <para>
            Override Dispose to prevent closing of writer
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)">
      <summary>
            Reset this string writer so that it can be reused.
            </summary>
      <param name="maxCapacity">the maximum buffer capacity before it is trimmed</param>
      <param name="defaultSize">the default size to make the buffer</param>
      <remarks>
        <para>
            Reset this string writer so that it can be reused.
            The internal buffers are cleared and reset.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.SystemInfo">
      <summary>
            Utility class for system specific information.
            </summary>
      <remarks>
        <para>
            Utility class of static methods for system specific information.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
      <author>Alexey Solofnenko</author>
    </member>
    <member name="F:log4net.Util.SystemInfo.EmptyTypes">
      <summary>
            Gets an empty array of types.
            </summary>
      <remarks>
        <para>
            The <c>Type.EmptyTypes</c> field is not available on
            the .NET Compact Framework 1.0.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Util.SystemInfo.s_hostName">
      <summary>
            Cache the host name for the current machine
            </summary>
    </member>
    <member name="F:log4net.Util.SystemInfo.s_appFriendlyName">
      <summary>
            Cache the application friendly name
            </summary>
    </member>
    <member name="F:log4net.Util.SystemInfo.s_nullText">
      <summary>
            Text to output when a <c>null</c> is encountered.
            </summary>
    </member>
    <member name="F:log4net.Util.SystemInfo.s_notAvailableText">
      <summary>
            Text to output when an unsupported feature is requested.
            </summary>
    </member>
    <member name="F:log4net.Util.SystemInfo.s_processStartTime">
      <summary>
            Start time for the current process.
            </summary>
    </member>
    <member name="M:log4net.Util.SystemInfo.#ctor">
      <summary>
            Private constructor to prevent instances.
            </summary>
      <remarks>
        <para>
            Only static methods are exposed from this type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.AssemblyLocationInfo(System.Reflection.Assembly)">
      <summary>
            Gets the assembly location path for the specified assembly.
            </summary>
      <param name="myAssembly">The assembly to get the location for.</param>
      <returns>The location of the assembly.</returns>
      <remarks>
        <para>
            This method does not guarantee to return the correct path
            to the assembly. If only tries to give an indication as to
            where the assembly was loaded from.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.AssemblyQualifiedName(System.Type)">
      <summary>
            Gets the fully qualified name of the <see cref="T:System.Type" />, including 
            the name of the assembly from which the <see cref="T:System.Type" /> was 
            loaded.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> to get the fully qualified name for.</param>
      <returns>The fully qualified name for the <see cref="T:System.Type" />.</returns>
      <remarks>
        <para>
            This is equivalent to the <c>Type.AssemblyQualifiedName</c> property,
            but this method works on the .NET Compact Framework 1.0 as well as
            the full .NET runtime.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.AssemblyShortName(System.Reflection.Assembly)">
      <summary>
            Gets the short name of the <see cref="T:System.Reflection.Assembly" />.
            </summary>
      <param name="myAssembly">The <see cref="T:System.Reflection.Assembly" /> to get the name for.</param>
      <returns>The short name of the <see cref="T:System.Reflection.Assembly" />.</returns>
      <remarks>
        <para>
            The short name of the assembly is the <see cref="P:System.Reflection.Assembly.FullName" /> 
            without the version, culture, or public key. i.e. it is just the 
            assembly's file name without the extension.
            </para>
        <para>
            Use this rather than <c>Assembly.GetName().Name</c> because that
            is not available on the Compact Framework.
            </para>
        <para>
            Because of a FileIOPermission security demand we cannot do
            the obvious Assembly.GetName().Name. We are allowed to get
            the <see cref="P:System.Reflection.Assembly.FullName" /> of the assembly so we 
            start from there and strip out just the assembly name.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.AssemblyFileName(System.Reflection.Assembly)">
      <summary>
            Gets the file name portion of the <see cref="T:System.Reflection.Assembly" />, including the extension.
            </summary>
      <param name="myAssembly">The <see cref="T:System.Reflection.Assembly" /> to get the file name for.</param>
      <returns>The file name of the assembly.</returns>
      <remarks>
        <para>
            Gets the file name portion of the <see cref="T:System.Reflection.Assembly" />, including the extension.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>
            Loads the type specified in the type string.
            </summary>
      <param name="relativeType">A sibling type to use to load the type.</param>
      <param name="typeName">The name of the type to load.</param>
      <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
      <param name="ignoreCase">
        <c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
      <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>
      <remarks>
        <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:System.Type.GetType(System.String,System.Boolean)" />.
            </para>
        <para>
            If the type name is not fully qualified, it will be loaded from the assembly
            containing the specified relative type. If the type is not found in the assembly 
            then all the loaded assemblies will be searched for the type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.String,System.Boolean,System.Boolean)">
      <summary>
            Loads the type specified in the type string.
            </summary>
      <param name="typeName">The name of the type to load.</param>
      <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
      <param name="ignoreCase">
        <c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
      <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>
      <remarks>
        <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:System.Type.GetType(System.String,System.Boolean)" />.
            </para>
        <para>
            If the type name is not fully qualified it will be loaded from the
            assembly that is directly calling this method. If the type is not found 
            in the assembly then all the loaded assemblies will be searched for the type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.GetTypeFromString(System.Reflection.Assembly,System.String,System.Boolean,System.Boolean)">
      <summary>
            Loads the type specified in the type string.
            </summary>
      <param name="relativeAssembly">An assembly to load the type from.</param>
      <param name="typeName">The name of the type to load.</param>
      <param name="throwOnError">Flag set to <c>true</c> to throw an exception if the type cannot be loaded.</param>
      <param name="ignoreCase">
        <c>true</c> to ignore the case of the type name; otherwise, <c>false</c></param>
      <returns>The type loaded or <c>null</c> if it could not be loaded.</returns>
      <remarks>
        <para>
            If the type name is fully qualified, i.e. if contains an assembly name in 
            the type name, the type will be loaded from the system using 
            <see cref="M:System.Type.GetType(System.String,System.Boolean)" />.
            </para>
        <para>
            If the type name is not fully qualified it will be loaded from the specified
            assembly. If the type is not found in the assembly then all the loaded assemblies 
            will be searched for the type.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.NewGuid">
      <summary>
            Generate a new guid
            </summary>
      <returns>A new Guid</returns>
      <remarks>
        <para>
            Generate a new guid
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)">
      <summary>
            Create an <see cref="T:System.ArgumentOutOfRangeException" /></summary>
      <param name="parameterName">The name of the parameter that caused the exception</param>
      <param name="actualValue">The value of the argument that causes this exception</param>
      <param name="message">The message that describes the error</param>
      <returns>the ArgumentOutOfRangeException object</returns>
      <remarks>
        <para>
            Create a new instance of the <see cref="T:System.ArgumentOutOfRangeException" /> class 
            with a specified error message, the parameter name, and the value 
            of the argument.
            </para>
        <para>
            The Compact Framework does not support the 3 parameter constructor for the
            <see cref="T:System.ArgumentOutOfRangeException" /> type. This method provides an
            implementation that works for all platforms.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.TryParse(System.String,System.Int32@)">
      <summary>
            Parse a string into an <see cref="T:System.Int32" /> value
            </summary>
      <param name="s">the string to parse</param>
      <param name="val">out param where the parsed value is placed</param>
      <returns>
        <c>true</c> if the string was able to be parsed into an integer</returns>
      <remarks>
        <para>
            Attempts to parse the string into an integer. If the string cannot
            be parsed then this method returns <c>false</c>. The method does not throw an exception.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.TryParse(System.String,System.Int64@)">
      <summary>
            Parse a string into an <see cref="T:System.Int64" /> value
            </summary>
      <param name="s">the string to parse</param>
      <param name="val">out param where the parsed value is placed</param>
      <returns>
        <c>true</c> if the string was able to be parsed into an integer</returns>
      <remarks>
        <para>
            Attempts to parse the string into an integer. If the string cannot
            be parsed then this method returns <c>false</c>. The method does not throw an exception.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.GetAppSetting(System.String)">
      <summary>
            Lookup an application setting
            </summary>
      <param name="key">the application settings key to lookup</param>
      <returns>the value for the key, or <c>null</c></returns>
      <remarks>
        <para>
            Configuration APIs are not supported under the Compact Framework
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.ConvertToFullPath(System.String)">
      <summary>
            Convert a path into a fully qualified local file path.
            </summary>
      <param name="path">The path to convert.</param>
      <returns>The fully qualified path.</returns>
      <remarks>
        <para>
            Converts the path specified to a fully
            qualified path. If the path is relative it is
            taken as relative from the application base 
            directory.
            </para>
        <para>
            The path specified must be a local file path, a URI is not supported.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemInfo.CreateCaseInsensitiveHashtable">
      <summary>
            Creates a new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class with the default initial capacity. 
            </summary>
      <returns>A new case-insensitive instance of the <see cref="T:System.Collections.Hashtable" /> class with the default initial capacity</returns>
      <remarks>
        <para>
            The new Hashtable instance uses the default load factor, the CaseInsensitiveHashCodeProvider, and the CaseInsensitiveComparer.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.NewLine">
      <summary>
            Gets the system dependent line terminator.
            </summary>
      <value>
            The system dependent line terminator.
            </value>
      <remarks>
        <para>
            Gets the system dependent line terminator.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.ApplicationBaseDirectory">
      <summary>
            Gets the base directory for this <see cref="T:System.AppDomain" />.
            </summary>
      <value>The base directory path for the current <see cref="T:System.AppDomain" />.</value>
      <remarks>
        <para>
            Gets the base directory for this <see cref="T:System.AppDomain" />.
            </para>
        <para>
            The value returned may be either a local file path or a URI.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.ConfigurationFileLocation">
      <summary>
            Gets the path to the configuration file for the current <see cref="T:System.AppDomain" />.
            </summary>
      <value>The path to the configuration file for the current <see cref="T:System.AppDomain" />.</value>
      <remarks>
        <para>
            The .NET Compact Framework 1.0 does not have a concept of a configuration
            file. For this runtime, we use the entry assembly location as the root for
            the configuration file name.
            </para>
        <para>
            The value returned may be either a local file path or a URI.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.EntryAssemblyLocation">
      <summary>
            Gets the path to the file that first executed in the current <see cref="T:System.AppDomain" />.
            </summary>
      <value>The path to the entry assembly.</value>
      <remarks>
        <para>
            Gets the path to the file that first executed in the current <see cref="T:System.AppDomain" />.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.CurrentThreadId">
      <summary>
            Gets the ID of the current thread.
            </summary>
      <value>The ID of the current thread.</value>
      <remarks>
        <para>
            On the .NET framework, the <c>AppDomain.GetCurrentThreadId</c> method
            is used to obtain the thread ID for the current thread. This is the 
            operating system ID for the thread.
            </para>
        <para>
            On the .NET Compact Framework 1.0 it is not possible to get the 
            operating system thread ID for the current thread. The native method 
            <c>GetCurrentThreadId</c> is implemented inline in a header file
            and cannot be called.
            </para>
        <para>
            On the .NET Framework 2.0 the <c>Thread.ManagedThreadId</c> is used as this
            gives a stable id unrelated to the operating system thread ID which may 
            change if the runtime is using fibers.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.HostName">
      <summary>
            Get the host name or machine name for the current machine
            </summary>
      <value>
            The hostname or machine name
            </value>
      <remarks>
        <para>
            Get the host name or machine name for the current machine
            </para>
        <para>
            The host name (<see cref="M:System.Net.Dns.GetHostName" />) or
            the machine name (<c>Environment.MachineName</c>) for
            the current machine, or if neither of these are available
            then <c>NOT AVAILABLE</c> is returned.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.ApplicationFriendlyName">
      <summary>
            Get this application's friendly name
            </summary>
      <value>
            The friendly name of this application as a string
            </value>
      <remarks>
        <para>
            If available the name of the application is retrieved from
            the <c>AppDomain</c> using <c>AppDomain.CurrentDomain.FriendlyName</c>.
            </para>
        <para>
            Otherwise the file name of the entry assembly is used.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.ProcessStartTime">
      <summary>
            Get the start time for the current process.
            </summary>
      <remarks>
        <para>
            This is the time at which the log4net library was loaded into the
            AppDomain. Due to reports of a hang in the call to <c>System.Diagnostics.Process.StartTime</c>
            this is not the start time for the current process.
            </para>
        <para>
            The log4net library should be loaded by an application early during its
            startup, therefore this start time should be a good approximation for
            the actual start time.
            </para>
        <para>
            Note that AppDomains may be loaded and unloaded within the
            same process without the process terminating, however this start time
            will be set per AppDomain.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.NullText">
      <summary>
            Text to output when a <c>null</c> is encountered.
            </summary>
      <remarks>
        <para>
            Use this value to indicate a <c>null</c> has been encountered while
            outputting a string representation of an item.
            </para>
        <para>
            The default value is <c>(null)</c>. This value can be overridden by specifying
            a value for the <c>log4net.NullText</c> appSetting in the application's
            .config file.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.SystemInfo.NotAvailableText">
      <summary>
            Text to output when an unsupported feature is requested.
            </summary>
      <remarks>
        <para>
            Use this value when an unsupported feature is requested.
            </para>
        <para>
            The default value is <c>NOT AVAILABLE</c>. This value can be overridden by specifying
            a value for the <c>log4net.NotAvailableText</c> appSetting in the application's
            .config file.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.SystemStringFormat">
      <summary>
            Utility class that represents a format string.
            </summary>
      <remarks>
        <para>
            Utility class that represents a format string.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.#ctor(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Initialise the <see cref="T:log4net.Util.SystemStringFormat" /></summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.ToString">
      <summary>
            Format the string and arguments
            </summary>
      <returns>the formatted string</returns>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.StringFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent 
            of the value of a corresponding <see cref="T:System.Object" /> instance in a specified array.
            A specified parameter supplies culture-specific formatting information.
            </summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">A <see cref="T:System.String" /> containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
      <returns>
            A copy of format in which the format items have been replaced by the <see cref="T:System.String" /> 
            equivalent of the corresponding instances of <see cref="T:System.Object" /> in args.
            </returns>
      <remarks>
        <para>
            This method does not throw exceptions. If an exception thrown while formatting the result the
            exception and arguments are returned in the result string.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.StringFormatError(System.Exception,System.String,System.Object[])">
      <summary>
            Process an error during StringFormat
            </summary>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.RenderArray(System.Array,System.Text.StringBuilder)">
      <summary>
            Dump the contents of an array into a string builder
            </summary>
    </member>
    <member name="M:log4net.Util.SystemStringFormat.RenderObject(System.Object,System.Text.StringBuilder)">
      <summary>
            Dump an object to a string
            </summary>
    </member>
    <member name="T:log4net.Util.ThreadContextProperties">
      <summary>
            Implementation of Properties collection for the <see cref="T:log4net.ThreadContext" /></summary>
      <remarks>
        <para>
            Class implements a collection of properties that is specific to each thread.
            The class is not synchronized as each thread has its own <see cref="T:log4net.Util.PropertiesDictionary" />.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.Util.ThreadContextProperties.s_threadLocalSlot">
      <summary>
            The thread local data slot to use to store a PropertiesDictionary.
            </summary>
    </member>
    <member name="M:log4net.Util.ThreadContextProperties.#ctor">
      <summary>
            Internal constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextProperties" /> class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextProperties.Remove(System.String)">
      <summary>
            Remove a property
            </summary>
      <param name="key">the key for the entry to remove</param>
      <remarks>
        <para>
            Remove a property
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextProperties.Clear">
      <summary>
            Clear all properties
            </summary>
      <remarks>
        <para>
            Clear all properties
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextProperties.GetProperties(System.Boolean)">
      <summary>
            Get the <c>PropertiesDictionary</c> for this thread.
            </summary>
      <param name="create">create the dictionary if it does not exist, otherwise return null if is does not exist</param>
      <returns>the properties for this thread</returns>
      <remarks>
        <para>
            The collection returned is only to be used on the calling thread. If the
            caller needs to share the collection between different threads then the 
            caller must clone the collection before doing so.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextProperties.Item(System.String)">
      <summary>
            Gets or sets the value of a property
            </summary>
      <value>
            The value for the property with the specified key
            </value>
      <remarks>
        <para>
            Gets or sets the value of a property
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ThreadContextStack">
      <summary>
            Implementation of Stack for the <see cref="T:log4net.ThreadContext" /></summary>
      <remarks>
        <para>
            Implementation of Stack for the <see cref="T:log4net.ThreadContext" /></para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="T:log4net.Util.ThreadContextStack.StackFrame">
      <summary>
            Inner class used to represent a single context frame in the stack.
            </summary>
      <remarks>
        <para>
            Inner class used to represent a single context frame in the stack.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.StackFrame.#ctor(System.String,log4net.Util.ThreadContextStack.StackFrame)">
      <summary>
            Constructor
            </summary>
      <param name="message">The message for this context.</param>
      <param name="parent">The parent context in the chain.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack.StackFrame" /> class
            with the specified message and parent context.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextStack.StackFrame.Message">
      <summary>
            Get the message.
            </summary>
      <value>The message.</value>
      <remarks>
        <para>
            Get the message.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextStack.StackFrame.FullMessage">
      <summary>
            Gets the full text of the context down to the root level.
            </summary>
      <value>
            The full text of the context down to the root level.
            </value>
      <remarks>
        <para>
            Gets the full text of the context down to the root level.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ThreadContextStack.AutoPopStackFrame">
      <summary>
            Struct returned from the <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)" /> method.
            </summary>
      <remarks>
        <para>
            This struct implements the <see cref="T:System.IDisposable" /> and is designed to be used
            with the <see langword="using" /> pattern to remove the stack frame at the end of the scope.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.AutoPopStackFrame.#ctor(System.Collections.Stack,System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="frameStack">The internal stack used by the ThreadContextStack.</param>
      <param name="frameDepth">The depth to return the stack to when this object is disposed.</param>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack.AutoPopStackFrame" /> class with
            the specified stack and return depth.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.AutoPopStackFrame.Dispose">
      <summary>
            Returns the stack to the correct depth.
            </summary>
      <remarks>
        <para>
            Returns the stack to the correct depth.
            </para>
      </remarks>
    </member>
    <member name="F:log4net.Util.ThreadContextStack.m_stack">
      <summary>
            The stack store.
            </summary>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.#ctor">
      <summary>
            Internal constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStack" /> class. 
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.Clear">
      <summary>
            Clears all the contextual information held in this stack.
            </summary>
      <remarks>
        <para>
            Clears all the contextual information held in this stack.
            Only call this if you think that this tread is being reused after
            a previous call execution which may not have completed correctly.
            You do not need to use this method if you always guarantee to call
            the <see cref="M:System.IDisposable.Dispose" /> method of the <see cref="T:System.IDisposable" />
            returned from <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)" /> even in exceptional circumstances,
            for example by using the <c>using(log4net.ThreadContext.Stacks["NDC"].Push("Stack_Message"))</c> 
            syntax.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.Pop">
      <summary>
            Removes the top context from this stack.
            </summary>
      <returns>The message in the context that was removed from the top of this stack.</returns>
      <remarks>
        <para>
            Remove the top context from this stack, and return
            it to the caller. If this stack is empty then an
            empty string (not <see langword="null" />) is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.Push(System.String)">
      <summary>
            Pushes a new context message into this stack.
            </summary>
      <param name="message">The new context message.</param>
      <returns>
            An <see cref="T:System.IDisposable" /> that can be used to clean up the context stack.
            </returns>
      <remarks>
        <para>
            Pushes a new context onto this stack. An <see cref="T:System.IDisposable" />
            is returned that can be used to clean up this stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
      </remarks>
      <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            using(log4net.ThreadContext.Stacks["NDC"].Push("Stack_Message"))
            {
            	log.Warn("This should have an ThreadContext Stack message");
            }
            </code></example>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.GetFullMessage">
      <summary>
            Gets the current context information for this stack.
            </summary>
      <returns>The current context information.</returns>
    </member>
    <member name="M:log4net.Util.ThreadContextStack.ToString">
      <summary>
            Gets the current context information for this stack.
            </summary>
      <returns>Gets the current context information</returns>
      <remarks>
        <para>
            Gets the current context information for this stack.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextStack.Count">
      <summary>
            The number of messages in the stack
            </summary>
      <value>
            The current number of messages in the stack
            </value>
      <remarks>
        <para>
            The current number of messages in the stack. That is
            the number of times <see cref="M:log4net.Util.ThreadContextStack.Push(System.String)" /> has been called
            minus the number of times <see cref="M:log4net.Util.ThreadContextStack.Pop" /> has been called.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextStack.InternalStack">
      <summary>
            Gets and sets the internal stack used by this <see cref="T:log4net.Util.ThreadContextStack" /></summary>
      <value>The internal storage stack</value>
      <remarks>
        <para>
            This property is provided only to support backward compatability 
            of the <see cref="T:log4net.NDC" />. Tytpically the internal stack should not
            be modified.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.ThreadContextStacks">
      <summary>
            Implementation of Stacks collection for the <see cref="T:log4net.ThreadContext" /></summary>
      <remarks>
        <para>
            Implementation of Stacks collection for the <see cref="T:log4net.ThreadContext" /></para>
      </remarks>
      <author>Nicko Cadell</author>
    </member>
    <member name="M:log4net.Util.ThreadContextStacks.#ctor(log4net.Util.ContextPropertiesBase)">
      <summary>
            Internal constructor
            </summary>
      <remarks>
        <para>
            Initializes a new instance of the <see cref="T:log4net.Util.ThreadContextStacks" /> class.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.ThreadContextStacks.Item(System.String)">
      <summary>
            Gets the named thread context stack
            </summary>
      <value>
            The named stack
            </value>
      <remarks>
        <para>
            Gets the named thread context stack
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.Transform">
      <summary>
            Utility class for transforming strings.
            </summary>
      <remarks>
        <para>
            Utility class for transforming strings.
            </para>
      </remarks>
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.Util.Transform.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.Util.Transform" /> class. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.Transform.WriteEscapedXmlString(System.Xml.XmlWriter,System.String,System.String)">
      <summary>
            Write a string to an <see cref="T:System.Xml.XmlWriter" /></summary>
      <param name="writer">the writer to write to</param>
      <param name="textData">the string to write</param>
      <param name="invalidCharReplacement">The string to replace non XML compliant chars with</param>
      <remarks>
        <para>
            The test is escaped either using XML escape entities
            or using CDATA sections.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.Transform.MaskXmlInvalidCharacters(System.String,System.String)">
      <summary>
            Replace invalid XML characters in text string
            </summary>
      <param name="textData">the XML text input string</param>
      <param name="mask">the string to use in place of invalid characters</param>
      <returns>A string that does not contain invalid XML characters.</returns>
      <remarks>
        <para>
            Certain Unicode code points are not allowed in the XML InfoSet, for
            details see: <a href="http://www.w3.org/TR/REC-xml/#charsets">http://www.w3.org/TR/REC-xml/#charsets</a>.
            </para>
        <para>
            This method replaces any illegal characters in the input string
            with the mask string specified.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.Transform.CountSubstrings(System.String,System.String)">
      <summary>
            Count the number of times that the substring occurs in the text
            </summary>
      <param name="text">the text to search</param>
      <param name="substring">the substring to find</param>
      <returns>the number of times the substring occurs in the text</returns>
      <remarks>
        <para>
            The substring is assumed to be non repeating within itself.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.WindowsSecurityContext">
      <summary>
            Impersonate a Windows Account
            </summary>
      <remarks>
        <para>
            This <see cref="T:log4net.Core.SecurityContext" /> impersonates a Windows account.
            </para>
        <para>
            How the impersonation is done depends on the value of <see cref="M:log4net.Util.WindowsSecurityContext.Impersonate(System.Object)" />.
            This allows the context to either impersonate a set of user credentials specified 
            using username, domain name and password or to revert to the process credentials.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.WindowsSecurityContext.ImpersonationMode">
      <summary>
            The impersonation modes for the <see cref="T:log4net.Util.WindowsSecurityContext" /></summary>
      <remarks>
        <para>
            See the <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" /> property for
            details.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext">
      <summary>
            Adds <see cref="T:System.IDisposable" /> to <see cref="T:System.Security.Principal.WindowsImpersonationContext" /></summary>
      <remarks>
        <para>
            Helper class to expose the <see cref="T:System.Security.Principal.WindowsImpersonationContext" />
            through the <see cref="T:System.IDisposable" /> interface.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext.#ctor(System.Security.Principal.WindowsImpersonationContext)">
      <summary>
            Constructor
            </summary>
      <param name="impersonationContext">the impersonation context being wrapped</param>
      <remarks>
        <para>
            Constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.DisposableImpersonationContext.Dispose">
      <summary>
            Revert the impersonation
            </summary>
      <remarks>
        <para>
            Revert the impersonation
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.#ctor">
      <summary>
            Default constructor
            </summary>
      <remarks>
        <para>
            Default constructor
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.ActivateOptions">
      <summary>
            Initialize the SecurityContext based on the options set.
            </summary>
      <remarks>
        <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
            activation scheme. The <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions" /> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions" /> is called this
            object is in an undefined state and must not be used. 
            </para>
        <para>
            If any of the configuration properties are modified then 
            <see cref="M:log4net.Util.WindowsSecurityContext.ActivateOptions" /> must be called again.
            </para>
        <para>
            The security context will try to Logon the specified user account and
            capture a primary token for impersonation.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">The required <see cref="P:log4net.Util.WindowsSecurityContext.UserName" />, 
            <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> or <see cref="P:log4net.Util.WindowsSecurityContext.Password" /> properties were not specified.</exception>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.Impersonate(System.Object)">
      <summary>
            Impersonate the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> properties.
            </summary>
      <param name="state">caller provided state</param>
      <returns>
            An <see cref="T:System.IDisposable" /> instance that will revoke the impersonation of this SecurityContext
            </returns>
      <remarks>
        <para>
            Depending on the <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" /> property either
            impersonate a user using credentials supplied or revert 
            to the process credentials.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.Util.WindowsSecurityContext.LogonUser(System.String,System.String,System.String)">
      <summary>
            Create a <see cref="T:System.Security.Principal.WindowsIdentity" /> given the userName, domainName and password.
            </summary>
      <param name="userName">the user name</param>
      <param name="domainName">the domain name</param>
      <param name="password">the password</param>
      <returns>the <see cref="T:System.Security.Principal.WindowsIdentity" /> for the account specified</returns>
      <remarks>
        <para>
            Uses the Windows API call LogonUser to get a principal token for the account. This
            token is used to initialize the WindowsIdentity.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.WindowsSecurityContext.Credentials">
      <summary>
            Gets or sets the impersonation mode for this security context
            </summary>
      <value>
            The impersonation mode for this security context
            </value>
      <remarks>
        <para>
            Impersonate either a user with user credentials or
            revert this thread to the credentials of the process.
            The value is one of the <see cref="T:log4net.Util.WindowsSecurityContext.ImpersonationMode" />
            enum.
            </para>
        <para>
            The default value is <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /></para>
        <para>
            When the mode is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" />
            the user's credentials are established using the
            <see cref="P:log4net.Util.WindowsSecurityContext.UserName" />, <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.Password" />
            values.
            </para>
        <para>
            When the mode is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.Process" />
            no other properties need to be set. If the calling thread is 
            impersonating then it will be reverted back to the process credentials.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.WindowsSecurityContext.UserName">
      <summary>
            Gets or sets the Windows username for this security context
            </summary>
      <value>
            The Windows username for this security context
            </value>
      <remarks>
        <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" />
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /> (the default setting).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.WindowsSecurityContext.DomainName">
      <summary>
            Gets or sets the Windows domain name for this security context
            </summary>
      <value>
            The Windows domain name for this security context
            </value>
      <remarks>
        <para>
            The default value for <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> is the local machine name
            taken from the <see cref="P:System.Environment.MachineName" /> property.
            </para>
        <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" />
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /> (the default setting).
            </para>
      </remarks>
    </member>
    <member name="P:log4net.Util.WindowsSecurityContext.Password">
      <summary>
            Sets the password for the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> properties.
            </summary>
      <value>
            The password for the Windows account specified by the <see cref="P:log4net.Util.WindowsSecurityContext.UserName" /> and <see cref="P:log4net.Util.WindowsSecurityContext.DomainName" /> properties.
            </value>
      <remarks>
        <para>
            This property must be set if <see cref="P:log4net.Util.WindowsSecurityContext.Credentials" />
            is set to <see cref="F:log4net.Util.WindowsSecurityContext.ImpersonationMode.User" /> (the default setting).
            </para>
      </remarks>
    </member>
    <member name="T:log4net.GlobalContext">
      <summary>
            The log4net Global Context.
            </summary>
      <remarks>
        <para>
            The <c>GlobalContext</c> provides a location for global debugging 
            information to be stored.
            </para>
        <para>
            The global context has a properties map and these properties can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout" />
            supports selecting and outputing these properties.
            </para>
        <para>
            By default the <c>log4net:HostName</c> property is set to the name of 
            the current machine.
            </para>
      </remarks>
      <example>
        <code lang="C#">
            GlobalContext.Properties["hostname"] = Environment.MachineName;
            </code>
      </example>
      <threadsafety static="true" instance="true" />
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.GlobalContext.s_properties">
      <summary>
            The global context properties instance
            </summary>
    </member>
    <member name="M:log4net.GlobalContext.#ctor">
      <summary>
            Private Constructor. 
            </summary>
      <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
    </member>
    <member name="P:log4net.GlobalContext.Properties">
      <summary>
            The global properties map.
            </summary>
      <value>
            The global properties map.
            </value>
      <remarks>
        <para>
            The global properties map.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.LogicalThreadContext">
      <summary>
            The log4net Logical Thread Context.
            </summary>
      <remarks>
        <para>
            The <c>LogicalThreadContext</c> provides a location for <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> specific debugging 
            information to be stored.
            The <c>LogicalThreadContext</c> properties override any <see cref="T:log4net.ThreadContext" /> or <see cref="T:log4net.GlobalContext" />
            properties with the same name.
            </para>
        <para>
            The Logical Thread Context has a properties map and a stack.
            The properties and stack can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout" />
            supports selecting and outputting these properties.
            </para>
        <para>
            The Logical Thread Context provides a diagnostic context for the current call context. 
            This is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
        <para>
            The Logical Thread Context is managed on a per <see cref="T:System.Runtime.Remoting.Messaging.CallContext" /> basis.
            </para>
      </remarks>
      <example>Example of using the thread context properties to store a username.
            <code lang="C#">
            LogicalThreadContext.Properties["user"] = userName;
            log.Info("This log message has a LogicalThreadContext Property called 'user'");
            </code></example>
      <example>Example of how to push a message into the context stack
            <code lang="C#">
            using(LogicalThreadContext.Stacks["LDC"].Push("my context message"))
            {
            	log.Info("This log message has a LogicalThreadContext Stack message that includes 'my context message'");
            
            } // at the end of the using block the message is automatically popped 
            </code></example>
      <threadsafety static="true" instance="true" />
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.LogicalThreadContext.s_properties">
      <summary>
            The thread context properties instance
            </summary>
    </member>
    <member name="F:log4net.LogicalThreadContext.s_stacks">
      <summary>
            The thread context stacks instance
            </summary>
    </member>
    <member name="M:log4net.LogicalThreadContext.#ctor">
      <summary>
            Private Constructor. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.LogicalThreadContext.Properties">
      <summary>
            The thread properties map
            </summary>
      <value>
            The thread properties map
            </value>
      <remarks>
        <para>
            The <c>LogicalThreadContext</c> properties override any <see cref="T:log4net.ThreadContext" /> 
            or <see cref="T:log4net.GlobalContext" /> properties with the same name.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.LogicalThreadContext.Stacks">
      <summary>
            The thread stacks
            </summary>
      <value>
            stack map
            </value>
      <remarks>
        <para>
            The logical thread stacks.
            </para>
      </remarks>
    </member>
    <member name="T:log4net.LogManager">
      <summary>
            This class is used by client applications to request logger instances.
            </summary>
      <remarks>
        <para>
            This class has static methods that are used by a client to request
            a logger instance. The <see cref="M:log4net.LogManager.GetLogger(System.String)" /> method is 
            used to retrieve a logger.
            </para>
        <para>
            See the <see cref="T:log4net.ILog" /> interface for more details.
            </para>
      </remarks>
      <example>Simple example of logging messages
            <code lang="C#">
            ILog log = LogManager.GetLogger("application-log");
            
            log.Info("Application Start");
            log.Debug("This is a debug message");
            
            if (log.IsDebugEnabled)
            {
            	log.Debug("This is another debug message");
            }
            </code></example>
      <threadsafety static="true" instance="true" />
      <seealso cref="T:log4net.ILog" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="F:log4net.LogManager.s_wrapperMap">
      <summary>
            The wrapper map to use to hold the <see cref="T:log4net.Core.LogImpl" /> objects.
            </summary>
    </member>
    <member name="M:log4net.LogManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.LogManager" /> class. 
            </summary>
      <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
    </member>
    <member name="M:log4net.LogManager.Exists(System.String)">
      <overloads>Returns the named logger if it exists.</overloads>
      <summary>
            Returns the named logger if it exists.
            </summary>
      <remarks>
        <para>
            If the named logger exists (in the default repository) then it
            returns a reference to the logger, otherwise it returns <c>null</c>.
            </para>
      </remarks>
      <param name="name">The fully qualified logger name to look for.</param>
      <returns>The logger found, or <c>null</c> if no logger could be found.</returns>
    </member>
    <member name="M:log4net.LogManager.Exists(System.String,System.String)">
      <summary>
            Returns the named logger if it exists.
            </summary>
      <remarks>
        <para>
            If the named logger exists (in the specified repository) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
      </remarks>
      <param name="repository">The repository to lookup in.</param>
      <param name="name">The fully qualified logger name to look for.</param>
      <returns>
            The logger found, or <c>null</c> if the logger doesn't exist in the specified 
            repository.
            </returns>
    </member>
    <member name="M:log4net.LogManager.Exists(System.Reflection.Assembly,System.String)">
      <summary>
            Returns the named logger if it exists.
            </summary>
      <remarks>
        <para>
            If the named logger exists (in the repository for the specified assembly) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <param name="name">The fully qualified logger name to look for.</param>
      <returns>
            The logger, or <c>null</c> if the logger doesn't exist in the specified
            assembly's repository.
            </returns>
    </member>
    <member name="M:log4net.LogManager.GetCurrentLoggers">
      <overloads>Get the currently defined loggers.</overloads>
      <summary>
            Returns all the currently defined loggers in the default repository.
            </summary>
      <remarks>
        <para>The root logger is <b>not</b> included in the returned array.</para>
      </remarks>
      <returns>All the defined loggers.</returns>
    </member>
    <member name="M:log4net.LogManager.GetCurrentLoggers(System.String)">
      <summary>
            Returns all the currently defined loggers in the specified repository.
            </summary>
      <param name="repository">The repository to lookup in.</param>
      <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
      <returns>All the defined loggers.</returns>
    </member>
    <member name="M:log4net.LogManager.GetCurrentLoggers(System.Reflection.Assembly)">
      <summary>
            Returns all the currently defined loggers in the specified assembly's repository.
            </summary>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
      <returns>All the defined loggers.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.String)">
      <overloads>Get or create a logger.</overloads>
      <summary>
            Retrieves or creates a named logger.
            </summary>
      <remarks>
        <para>
            Retrieves a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
        <para>By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
      </remarks>
      <param name="name">The name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.String,System.String)">
      <summary>
            Retrieves or creates a named logger.
            </summary>
      <remarks>
        <para>
            Retrieve a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
        <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
      </remarks>
      <param name="repository">The repository to lookup in.</param>
      <param name="name">The name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.String)">
      <summary>
            Retrieves or creates a named logger.
            </summary>
      <remarks>
        <para>
            Retrieve a logger named as the <paramref name="name" />
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.
            </para>
        <para>
            By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <param name="name">The name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.Type)">
      <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)" />.
            </summary>
      <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
      <param name="type">The full name of <paramref name="type" /> will be used as the name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.String,System.Type)">
      <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)" />.
            </summary>
      <remarks>
            Gets the logger for the fully qualified name of the type specified.
            </remarks>
      <param name="repository">The repository to lookup in.</param>
      <param name="type">The full name of <paramref name="type" /> will be used as the name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLogger(System.Reflection.Assembly,System.Type)">
      <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)" />.
            </summary>
      <remarks>
            Gets the logger for the fully qualified name of the type specified.
            </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
      <param name="type">The full name of <paramref name="type" /> will be used as the name of the logger to retrieve.</param>
      <returns>The logger with the name specified.</returns>
    </member>
    <member name="M:log4net.LogManager.Shutdown">
      <summary>
            Shuts down the log4net system.
            </summary>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in all the
            default repositories.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.LogManager.ShutdownRepository">
      <overloads>Shutdown a logger repository.</overloads>
      <summary>
            Shuts down the default repository.
            </summary>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            default repository.
            </para>
        <para>Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.LogManager.ShutdownRepository(System.String)">
      <summary>
            Shuts down the repository for the repository specified.
            </summary>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            <paramref name="repository" /> specified.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
      <param name="repository">The repository to shutdown.</param>
    </member>
    <member name="M:log4net.LogManager.ShutdownRepository(System.Reflection.Assembly)">
      <summary>
            Shuts down the repository specified.
            </summary>
      <remarks>
        <para>
            Calling this method will <b>safely</b> close and remove all
            appenders in all the loggers including root contained in the
            repository. The repository is looked up using
            the <paramref name="repositoryAssembly" /> specified.
            </para>
        <para>
            Some appenders need to be closed before the application exists. 
            Otherwise, pending logging events might be lost.
            </para>
        <para>
            The <c>shutdown</c> method is careful to close nested
            appenders before closing regular appenders. This is allows
            configurations where a regular appender is attached to a logger
            and again to a nested appender.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
    </member>
    <member name="M:log4net.LogManager.ResetConfiguration">
      <overloads>Reset the configuration of a repository</overloads>
      <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
      <remarks>
        <para>
            Resets all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set to its default "off" value.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.LogManager.ResetConfiguration(System.String)">
      <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
      <remarks>
        <para>
            Reset all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set to its default "off" value.
            </para>
      </remarks>
      <param name="repository">The repository to reset.</param>
    </member>
    <member name="M:log4net.LogManager.ResetConfiguration(System.Reflection.Assembly)">
      <summary>
            Resets all values contained in this repository instance to their defaults.
            </summary>
      <remarks>
        <para>
            Reset all values contained in the repository instance to their
            defaults.  This removes all appenders from all loggers, sets
            the level of all non-root loggers to <c>null</c>,
            sets their additivity flag to <c>true</c> and sets the level
            of the root logger to <see cref="F:log4net.Core.Level.Debug" />. Moreover,
            message disabling is set to its default "off" value.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository to reset.</param>
    </member>
    <member name="M:log4net.LogManager.GetLoggerRepository">
      <overloads>Get the logger repository.</overloads>
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the callers assembly (<see cref="M:System.Reflection.Assembly.GetCallingAssembly" />).
            </para>
      </remarks>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> instance for the default repository.</returns>
    </member>
    <member name="M:log4net.LogManager.GetLoggerRepository(System.String)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
      </remarks>
      <param name="repository">The repository to lookup in.</param>
    </member>
    <member name="M:log4net.LogManager.GetLoggerRepository(System.Reflection.Assembly)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repositoryAssembly" /> argument.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
    </member>
    <member name="M:log4net.LogManager.GetRepository">
      <overloads>Get a logger repository.</overloads>
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the callers assembly (<see cref="M:System.Reflection.Assembly.GetCallingAssembly" />).
            </para>
      </remarks>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> instance for the default repository.</returns>
    </member>
    <member name="M:log4net.LogManager.GetRepository(System.String)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repository" /> argument.
            </para>
      </remarks>
      <param name="repository">The repository to lookup in.</param>
    </member>
    <member name="M:log4net.LogManager.GetRepository(System.Reflection.Assembly)">
      <summary>
            Returns the default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.
            </summary>
      <returns>The default <see cref="T:log4net.Repository.ILoggerRepository" /> instance.</returns>
      <remarks>
        <para>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified
            by the <paramref name="repositoryAssembly" /> argument.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to lookup the repository.</param>
    </member>
    <member name="M:log4net.LogManager.CreateDomain(System.Type)">
      <overloads>Create a domain</overloads>
      <summary>
            Creates a repository with the specified repository type.
            </summary>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.LogManager.GetRepository" /> will return 
            the same repository instance.
            </para>
      </remarks>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
    </member>
    <member name="M:log4net.LogManager.CreateRepository(System.Type)">
      <overloads>Create a logger repository.</overloads>
      <summary>
            Creates a repository with the specified repository type.
            </summary>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.LogManager.GetRepository" /> will return 
            the same repository instance.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.LogManager.CreateDomain(System.String)">
      <summary>
            Creates a repository with the specified name.
            </summary>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.LogManager.CreateRepository(System.String)">
      <summary>
            Creates a repository with the specified name.
            </summary>
      <remarks>
        <para>
            Creates the default type of <see cref="T:log4net.Repository.ILoggerRepository" /> which is a
            <see cref="T:log4net.Repository.Hierarchy.Hierarchy" /> object.
            </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <param name="repository">The name of the repository, this must be unique amongst repositories.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.LogManager.CreateDomain(System.String,System.Type)">
      <summary>
            Creates a repository with the specified name and repository type.
            </summary>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <param name="repository">The name of the repository, this must be unique to the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.LogManager.CreateRepository(System.String,System.Type)">
      <summary>
            Creates a repository with the specified name and repository type.
            </summary>
      <remarks>
        <para>
            The <paramref name="repository" /> name must be unique. Repositories cannot be redefined.
            An <see cref="T:System.Exception" /> will be thrown if the repository already exists.
            </para>
      </remarks>
      <param name="repository">The name of the repository, this must be unique to the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
      <exception cref="T:log4net.Core.LogException">The specified repository already exists.</exception>
    </member>
    <member name="M:log4net.LogManager.CreateDomain(System.Reflection.Assembly,System.Type)">
      <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
      <remarks>
        <para>
          <b>CreateDomain is obsolete. Use CreateRepository instead of CreateDomain.</b>
        </para>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.LogManager.GetRepository(System.Reflection.Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
    </member>
    <member name="M:log4net.LogManager.CreateRepository(System.Reflection.Assembly,System.Type)">
      <summary>
            Creates a repository for the specified assembly and repository type.
            </summary>
      <remarks>
        <para>
            The <see cref="T:log4net.Repository.ILoggerRepository" /> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.LogManager.GetRepository(System.Reflection.Assembly)" /> with the
            same assembly specified will return the same repository instance.
            </para>
      </remarks>
      <param name="repositoryAssembly">The assembly to use to get the name of the repository.</param>
      <param name="repositoryType">A <see cref="T:System.Type" /> that implements <see cref="T:log4net.Repository.ILoggerRepository" />
            and has a no arg constructor. An instance of this type will be created to act
            as the <see cref="T:log4net.Repository.ILoggerRepository" /> for the repository specified.</param>
      <returns>The <see cref="T:log4net.Repository.ILoggerRepository" /> created for the repository.</returns>
    </member>
    <member name="M:log4net.LogManager.GetAllRepositories">
      <summary>
            Gets the list of currently defined repositories.
            </summary>
      <remarks>
        <para>
            Get an array of all the <see cref="T:log4net.Repository.ILoggerRepository" /> objects that have been created.
            </para>
      </remarks>
      <returns>An array of all the known <see cref="T:log4net.Repository.ILoggerRepository" /> objects.</returns>
    </member>
    <member name="M:log4net.LogManager.WrapLogger(log4net.Core.ILogger)">
      <summary>
            Looks up the wrapper object for the logger specified.
            </summary>
      <param name="logger">The logger to get the wrapper for.</param>
      <returns>The wrapper for the logger specified.</returns>
    </member>
    <member name="M:log4net.LogManager.WrapLoggers(log4net.Core.ILogger[])">
      <summary>
            Looks up the wrapper objects for the loggers specified.
            </summary>
      <param name="loggers">The loggers to get the wrappers for.</param>
      <returns>The wrapper objects for the loggers specified.</returns>
    </member>
    <member name="M:log4net.LogManager.WrapperCreationHandler(log4net.Core.ILogger)">
      <summary>
            Create the <see cref="T:log4net.Core.ILoggerWrapper" /> objects used by
            this manager.
            </summary>
      <param name="logger">The logger to wrap.</param>
      <returns>The wrapper for the logger specified.</returns>
    </member>
    <member name="T:log4net.MDC">
      <summary>
            Implementation of Mapped Diagnostic Contexts.
            </summary>
      <remarks>
        <note>
          <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
        </note>
        <para>
            The MDC class is similar to the <see cref="T:log4net.NDC" /> class except that it is
            based on a map instead of a stack. It provides <i>mapped
            diagnostic contexts</i>. A <i>Mapped Diagnostic Context</i>, or
            MDC in short, is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
        <para>
            The MDC is managed on a per thread basis.
            </para>
      </remarks>
      <threadsafety static="true" instance="true" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.MDC.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.MDC" /> class. 
            </summary>
      <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
    </member>
    <member name="M:log4net.MDC.Get(System.String)">
      <summary>
            Gets the context value identified by the <paramref name="key" /> parameter.
            </summary>
      <param name="key">The key to lookup in the MDC.</param>
      <returns>The string value held for the key, or a <c>null</c> reference if no corresponding value is found.</returns>
      <remarks>
        <note>
          <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
        </note>
        <para>
            If the <paramref name="key" /> parameter does not look up to a
            previously defined context then <c>null</c> will be returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.MDC.Set(System.String,System.String)">
      <summary>
            Add an entry to the MDC
            </summary>
      <param name="key">The key to store the value under.</param>
      <param name="value">The value to store.</param>
      <remarks>
        <note>
          <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
        </note>
        <para>
            Puts a context value (the <paramref name="val" /> parameter) as identified
            with the <paramref name="key" /> parameter into the current thread's
            context map.
            </para>
        <para>
            If a value is already defined for the <paramref name="key" />
            specified then the value will be replaced. If the <paramref name="val" /> 
            is specified as <c>null</c> then the key value mapping will be removed.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.MDC.Remove(System.String)">
      <summary>
            Removes the key value mapping for the key specified.
            </summary>
      <param name="key">The key to remove.</param>
      <remarks>
        <note>
          <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
        </note>
        <para>
            Remove the specified entry from this thread's MDC
            </para>
      </remarks>
    </member>
    <member name="M:log4net.MDC.Clear">
      <summary>
            Clear all entries in the MDC
            </summary>
      <remarks>
        <note>
          <para>
            The MDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Properties" />.
            The current MDC implementation forwards to the <c>ThreadContext.Properties</c>.
            </para>
        </note>
        <para>
            Remove all the entries from this thread's MDC
            </para>
      </remarks>
    </member>
    <member name="T:log4net.NDC">
      <summary>
            Implementation of Nested Diagnostic Contexts.
            </summary>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            A Nested Diagnostic Context, or NDC in short, is an instrument
            to distinguish interleaved log output from different sources. Log
            output is typically interleaved when a server handles multiple
            clients near-simultaneously.
            </para>
        <para>
            Interleaved log output can still be meaningful if each log entry
            from different contexts had a distinctive stamp. This is where NDCs
            come into play.
            </para>
        <para>
            Note that NDCs are managed on a per thread basis. The NDC class
            is made up of static methods that operate on the context of the
            calling thread.
            </para>
      </remarks>
      <example>How to push a message into the context
            <code lang="C#">
            using(NDC.Push("my context message"))
            {
            	... all log calls will have 'my context message' included ...
            
            } // at the end of the using block the message is automatically removed 
            </code></example>
      <threadsafety static="true" instance="true" />
      <author>Nicko Cadell</author>
      <author>Gert Driesen</author>
    </member>
    <member name="M:log4net.NDC.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:log4net.NDC" /> class. 
            </summary>
      <remarks>
            Uses a private access modifier to prevent instantiation of this class.
            </remarks>
    </member>
    <member name="M:log4net.NDC.Clear">
      <summary>
            Clears all the contextual information held on the current thread.
            </summary>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            Clears the stack of NDC data held on the current thread.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.NDC.CloneStack">
      <summary>
            Creates a clone of the stack of context information.
            </summary>
      <returns>A clone of the context info for this thread.</returns>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            The results of this method can be passed to the <see cref="M:log4net.NDC.Inherit(System.Collections.Stack)" /> 
            method to allow child threads to inherit the context of their 
            parent thread.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.NDC.Inherit(System.Collections.Stack)">
      <summary>
            Inherits the contextual information from another thread.
            </summary>
      <param name="stack">The context stack to inherit.</param>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            This thread will use the context information from the stack
            supplied. This can be used to initialize child threads with
            the same contextual information as their parent threads. These
            contexts will <b>NOT</b> be shared. Any further contexts that
            are pushed onto the stack will not be visible to the other.
            Call <see cref="M:log4net.NDC.CloneStack" /> to obtain a stack to pass to
            this method.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.NDC.Pop">
      <summary>
            Removes the top context from the stack.
            </summary>
      <returns>
            The message in the context that was removed from the top 
            of the stack.
            </returns>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            Remove the top context from the stack, and return
            it to the caller. If the stack is empty then an
            empty string (not <c>null</c>) is returned.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.NDC.Push(System.String)">
      <summary>
            Pushes a new context message.
            </summary>
      <param name="message">The new context message.</param>
      <returns>
            An <see cref="T:System.IDisposable" /> that can be used to clean up 
            the context stack.
            </returns>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            Pushes a new context onto the context stack. An <see cref="T:System.IDisposable" />
            is returned that can be used to clean up the context stack. This
            can be easily combined with the <c>using</c> keyword to scope the
            context.
            </para>
      </remarks>
      <example>Simple example of using the <c>Push</c> method with the <c>using</c> keyword.
            <code lang="C#">
            using(log4net.NDC.Push("NDC_Message"))
            {
            	log.Warn("This should have an NDC message");
            }
            </code></example>
    </member>
    <member name="M:log4net.NDC.Remove">
      <summary>
            Removes the context information for this thread. It is
            not required to call this method.
            </summary>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            This method is not implemented.
            </para>
      </remarks>
    </member>
    <member name="M:log4net.NDC.SetMaxDepth(System.Int32)">
      <summary>
            Forces the stack depth to be at most <paramref name="maxDepth" />.
            </summary>
      <param name="maxDepth">The maximum depth of the stack</param>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            Forces the stack depth to be at most <paramref name="maxDepth" />.
            This may truncate the head of the stack. This only affects the 
            stack in the current thread. Also it does not prevent it from
            growing, it only sets the maximum depth at the time of the
            call. This can be used to return to a known context depth.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.NDC.Depth">
      <summary>
            Gets the current context depth.
            </summary>
      <value>The current context depth.</value>
      <remarks>
        <note>
          <para>
            The NDC is deprecated and has been replaced by the <see cref="P:log4net.ThreadContext.Stacks" />.
            The current NDC implementation forwards to the <c>ThreadContext.Stacks["NDC"]</c>.
            </para>
        </note>
        <para>
            The number of context values pushed onto the context stack.
            </para>
        <para>
            Used to record the current depth of the context. This can then 
            be restored using the <see cref="M:log4net.NDC.SetMaxDepth(System.Int32)" /> method.
            </para>
      </remarks>
      <seealso cref="M:log4net.NDC.SetMaxDepth(System.Int32)" />
    </member>
    <member name="T:log4net.ThreadContext">
      <summary>
            The log4net Thread Context.
            </summary>
      <remarks>
        <para>
            The <c>ThreadContext</c> provides a location for thread specific debugging 
            information to be stored.
            The <c>ThreadContext</c> properties override any <see cref="T:log4net.GlobalContext" />
            properties with the same name.
            </para>
        <para>
            The thread context has a properties map and a stack.
            The properties and stack can 
            be included in the output of log messages. The <see cref="T:log4net.Layout.PatternLayout" />
            supports selecting and outputting these properties.
            </para>
        <para>
            The Thread Context provides a diagnostic context for the current thread. 
            This is an instrument for distinguishing interleaved log
            output from different sources. Log output is typically interleaved
            when a server handles multiple clients near-simultaneously.
            </para>
        <para>
            The Thread Context is managed on a per thread basis.
            </para>
      </remarks>
      <example>Example of using the thread context properties to store a username.
            <code lang="C#">
            ThreadContext.Properties["user"] = userName;
            log.Info("This log message has a ThreadContext Property called 'user'");
            </code></example>
      <example>Example of how to push a message into the context stack
            <code lang="C#">
            using(ThreadContext.Stacks["NDC"].Push("my context message"))
            {
            	log.Info("This log message has a ThreadContext Stack message that includes 'my context message'");
            
            } // at the end of the using block the message is automatically popped 
            </code></example>
      <threadsafety static="true" instance="true" />
      <author>Nicko Cadell</author>
    </member>
    <member name="F:log4net.ThreadContext.s_properties">
      <summary>
            The thread context properties instance
            </summary>
    </member>
    <member name="F:log4net.ThreadContext.s_stacks">
      <summary>
            The thread context stacks instance
            </summary>
    </member>
    <member name="M:log4net.ThreadContext.#ctor">
      <summary>
            Private Constructor. 
            </summary>
      <remarks>
        <para>
            Uses a private access modifier to prevent instantiation of this class.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.ThreadContext.Properties">
      <summary>
            The thread properties map
            </summary>
      <value>
            The thread properties map
            </value>
      <remarks>
        <para>
            The <c>ThreadContext</c> properties override any <see cref="T:log4net.GlobalContext" />
            properties with the same name.
            </para>
      </remarks>
    </member>
    <member name="P:log4net.ThreadContext.Stacks">
      <summary>
            The thread stacks
            </summary>
      <value>
            stack map
            </value>
      <remarks>
        <para>
            The thread local stacks.
            </para>
      </remarks>
    </member>
    <member name="T:Autofac.Core.Service">
      <summary>
            Services are the lookup keys used to locate component instances.
            </summary>
    </member>
    <member name="M:Autofac.Core.Service.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Autofac.Core.Service.op_Equality(Autofac.Core.Service,Autofac.Core.Service)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Autofac.Core.Service.op_Inequality(Autofac.Core.Service,Autofac.Core.Service)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left operand.</param>
      <param name="right">The right operand.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Autofac.Core.Service.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:Autofac.Core.Service.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Autofac.Core.Service.Description">
      <summary>
            Gets a human-readable description of the service.
            </summary>
      <value>The description.</value>
    </member>
    <member name="T:Autofac.Core.AutoActivateService">
      <summary>
            Service used as a "flag" to indicate a particular component should be
            automatically activated on container build.
            </summary>
    </member>
    <member name="M:Autofac.Core.AutoActivateService.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is not <see langword="null" />
            and is an <see cref="T:Autofac.Core.AutoActivateService" />; otherwise, <see langword="false" />.
            </returns>
      <remarks>
        <para>
            All services of this type are considered "equal."
            </para>
      </remarks>
    </member>
    <member name="M:Autofac.Core.AutoActivateService.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />. Always <c>0</c> for this type.
            </returns>
      <remarks>
        <para>
            All services of this type are considered "equal" and use the same hash code.
            </para>
      </remarks>
    </member>
    <member name="P:Autofac.Core.AutoActivateService.Description">
      <summary>
            Gets the service description.
            </summary>
      <value>
            Always returns <c>AutoActivate</c>.
            </value>
    </member>
    <member name="T:Autofac.Builder.MetadataConfiguration`1">
      <summary>
            Used with the WithMetadata configuration method to
            associate key-value pairs with an <see cref="T:Autofac.Core.IComponentRegistration" />.
            </summary>
      <typeparam name="TMetadata">Interface with properties whose names correspond to
            the property keys.</typeparam>
      <remarks>This feature was suggested by OJ Reeves (@TheColonial).</remarks>
    </member>
    <member name="M:Autofac.Builder.MetadataConfiguration`1.For``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
            Set one of the property values.
            </summary>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <param name="propertyAccessor">An expression that accesses the property to set.</param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MostParametersConstructorSelectorResources.UnableToChooseFromMultipleConstructors">
      <summary>
              Looks up a localized string similar to Cannot choose between multiple constructors with equal length {0} on type '{1}'. Select the constructor explicitly, with the UsingConstructor() configuration method, when the component is registered..
            </summary>
    </member>
    <member name="T:Autofac.Core.DependencyResolutionExceptionResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.DependencyResolutionExceptionResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.DependencyResolutionExceptionResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.DependencyResolutionExceptionResources.MessageNestingFormat">
      <summary>
              Looks up a localized string similar to {0} ---&gt; {1} (See inner exception for details.).
            </summary>
    </member>
    <member name="T:Autofac.Core.IRegistrationSource">
      <summary>
            Allows registrations to be made on-the-fly when unregistered
            services are requested (lazy registrations.)
            </summary>
    </member>
    <member name="M:Autofac.Core.IRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
      <remarks>
            If the source is queried for service s, and it returns a component that implements both s and s', then it
            will not be queried again for either s or s'. This means that if the source can return other implementations
            of s', it should return these, plus the transitive closure of other components implementing their 
            additional services, along with the implementation of s. It is not an error to return components
            that do not implement <paramref name="service" />.
            </remarks>
    </member>
    <member name="P:Autofac.Core.IRegistrationSource.IsAdapterForIndividualComponents">
      <summary>
            Gets whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
    </member>
    <member name="T:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSource">
      <summary>
            Support the <c>System.Lazy&lt;T, TMetadata&gt;</c>
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            When a dependency of a lazy type is used, the instantiation of the underlying
            component will be delayed until the Value property is first accessed.
            </summary>
    </member>
    <member name="T:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSourceResources.LazyWithMetadataRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Lazy&lt;T, TMetadata&gt; Support.
            </summary>
    </member>
    <member name="T:Autofac.Features.Metadata.MetadataViewProviderResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetadataViewProviderResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetadataViewProviderResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetadataViewProviderResources.InvalidViewImplementation">
      <summary>
              Looks up a localized string similar to The type '{0}' cannot be used as a metadata view. A metadata view must be a concrete class with a parameterless or dictionary constructor..
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetadataViewProviderResources.MissingMetadata">
      <summary>
              Looks up a localized string similar to Export metadata for '{0}' is missing and no default value was supplied..
            </summary>
    </member>
    <member name="T:Autofac.Features.Metadata.Meta`2">
      <summary>
            Provides a value along with metadata describing the value.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <typeparam name="TMetadata">An interface to which metadata values can be bound.</typeparam>
    </member>
    <member name="M:Autofac.Features.Metadata.Meta`2.#ctor(`0,`1)">
      <summary>
            Create a new instance.
            </summary>
      <param name="value">The value described by the instance.</param>
      <param name="metadata">The metadata describing the value.</param>
    </member>
    <member name="P:Autofac.Features.Metadata.Meta`2.Value">
      <summary>
            The value described by <see cref="P:Autofac.Features.Metadata.Meta`2.Metadata" />.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.Meta`2.Metadata">
      <summary>
            Metadata describing the value.
            </summary>
    </member>
    <member name="T:Autofac.Features.Metadata.StronglyTypedMetaRegistrationSource">
      <summary>
            Support the <see cref="T:Autofac.Features.Metadata.Meta`2" />
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.IConstructorFinder">
      <summary>
            Find suitable constructors from which to select.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.IConstructorFinder.FindConstructors(System.Type)">
      <summary>
            Finds suitable constructors on the target type.
            </summary>
      <param name="targetType">Type to search for constructors.</param>
      <returns>Suitable constructors.</returns>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.DefaultConstructorFinder">
      <summary>
            Finds constructors that match a finder function.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.DefaultConstructorFinder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.DefaultConstructorFinder" /> class.
            </summary>
      <remarks>
            Default to selecting all public constructors.
            </remarks>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.DefaultConstructorFinder.#ctor(System.Func{System.Type,System.Reflection.ConstructorInfo[]})">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Activators.Reflection.DefaultConstructorFinder" /> class.
            </summary>
      <param name="finder">The finder function.</param>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.DefaultConstructorFinder.FindConstructors(System.Type)">
      <summary>
            Finds suitable constructors on the target type.
            </summary>
      <param name="targetType">Type to search for constructors.</param>
      <returns>Suitable constructors.</returns>
    </member>
    <member name="T:Autofac.ModuleResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.ModuleResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.ModuleResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.ModuleResources.ThisAssemblyUnavailable">
      <summary>
              Looks up a localized string similar to Module.ThisAssembly is only available in modules that inherit directly from Module..
            </summary>
    </member>
    <member name="T:Autofac.Features.LazyDependencies.LazyRegistrationSource">
      <summary>
            Support the <see cref="T:System.Lazy`1" /> 
            type automatically whenever type T is registered with the container.
            When a dependency of a lazy type is used, the instantiation of the underlying
            component will be delayed until the Value property is first accessed.
            </summary>
    </member>
    <member name="T:Autofac.Features.GeneratedFactories.FactoryGenerator">
      <summary>
            Generates context-bound closures that represent factories from
            a set of heuristics based on delegate type signatures.
            </summary>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.#ctor(System.Type,Autofac.Core.Service,Autofac.Features.GeneratedFactories.ParameterMapping)">
      <summary>
            Create a factory generator.
            </summary>
      <param name="service">The service that will be activated in
            order to create the products of the factory.</param>
      <param name="delegateType">The delegate to provide as a factory.</param>
      <param name="parameterMapping">The parameter mapping mode to use.</param>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.#ctor(System.Type,Autofac.Core.IComponentRegistration,Autofac.Features.GeneratedFactories.ParameterMapping)">
      <summary>
            Create a factory generator.
            </summary>
      <param name="productRegistration">The component that will be activated in
            order to create the products of the factory.</param>
      <param name="delegateType">The delegate to provide as a factory.</param>
      <param name="parameterMapping">The parameter mapping mode to use.</param>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.GenerateFactory(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
      <param name="context">The context in which the factory will be used.</param>
      <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
      <returns>A factory delegate that will work within the context.</returns>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.GenerateFactory``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
      <param name="context">The context in which the factory will be used.</param>
      <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
      <returns>A factory delegate that will work within the context.</returns>
    </member>
    <member name="T:Autofac.Builder.ReflectionActivatorData">
      <summary>
            Builder for reflection-based activators.
            </summary>
    </member>
    <member name="M:Autofac.Builder.ReflectionActivatorData.#ctor(System.Type)">
      <summary>
            Specify a reflection activator for the given type.
            </summary>
      <param name="implementer">Type that will be activated.</param>
    </member>
    <member name="P:Autofac.Builder.ReflectionActivatorData.ImplementationType">
      <summary>
            Get the implementation type.
            </summary>
    </member>
    <member name="P:Autofac.Builder.ReflectionActivatorData.ConstructorFinder">
      <summary>
            The constructor finder for the registration.
            </summary>
    </member>
    <member name="P:Autofac.Builder.ReflectionActivatorData.ConstructorSelector">
      <summary>
            The constructor selector for the registration.
            </summary>
    </member>
    <member name="P:Autofac.Builder.ReflectionActivatorData.ConfiguredParameters">
      <summary>
            The explicitly bound constructor parameters.
            </summary>
    </member>
    <member name="P:Autofac.Builder.ReflectionActivatorData.ConfiguredProperties">
      <summary>
            The explicitly bound properties.
            </summary>
    </member>
    <member name="T:Autofac.Builder.IConcreteActivatorData">
      <summary>
            Activator data that can provide an IInstanceActivator instance.
            </summary>
    </member>
    <member name="P:Autofac.Builder.IConcreteActivatorData.Activator">
      <summary>
            The instance activator based on the provided data.
            </summary>
    </member>
    <member name="T:Autofac.Builder.ConcreteReflectionActivatorData">
      <summary>
            Reflection activator data for concrete types.
            </summary>
    </member>
    <member name="M:Autofac.Builder.ConcreteReflectionActivatorData.#ctor(System.Type)">
      <summary>
            Specify a reflection activator for the given type.
            </summary>
      <param name="implementer">Type that will be activated.</param>
    </member>
    <member name="P:Autofac.Builder.ConcreteReflectionActivatorData.Activator">
      <summary>
            The instance activator based on the provided data.
            </summary>
    </member>
    <member name="T:Autofac.Builder.ContainerBuildOptions">
      <summary>
            Parameterises the construction of a container by a <see cref="T:Autofac.ContainerBuilder" />.
            </summary>
    </member>
    <member name="F:Autofac.Builder.ContainerBuildOptions.None">
      <summary>
            No options - the default behavior for container building.
            </summary>
    </member>
    <member name="F:Autofac.Builder.ContainerBuildOptions.ExcludeDefaultModules">
      <summary>
            Prevents inclusion of standard modules like support for
            relationship types including <see cref="T:System.Collections.Generic.IEnumerable`1" /> etc.
            </summary>
    </member>
    <member name="F:Autofac.Builder.ContainerBuildOptions.IgnoreStartableComponents">
      <summary>
            Does not call <see cref="M:Autofac.IStartable.Start" /> on components implementing
            this interface (useful for module testing.)
            </summary>
    </member>
    <member name="T:Autofac.Builder.IRegistrationBuilder`3">
      <summary>
            Data structure used to construct registrations.
            </summary>
      <typeparam name="TLimit">The most specific type to which instances of the registration
            can be cast.</typeparam>
      <typeparam name="TActivatorData">Activator builder type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style type.</typeparam>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.ExternallyOwned">
      <summary>
            Configure the component so that instances are never disposed by the container.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.OwnedByLifetimeScope">
      <summary>
            Configure the component so that instances that support IDisposable are
            disposed by the container (default.)
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerDependency">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets a new, unique instance (default.)
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.SingleInstance">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets the same, shared instance.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerLifetimeScope">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a single ILifetimeScope gets the same, shared instance. Dependent components in
            different lifetime scopes will get different instances.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])">
      <summary>
            Configure the component so that every dependent component or call to Resolve() within
            a ILifetimeScope tagged with any of the provided tags value gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the tagged scope will
            share the parent's instance. If no appropriately tagged scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="lifetimeScopeTag">Tag applied to matching lifetime scopes.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned``1">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <typeparam name="TService">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned(System.Type)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="serviceType">Service type.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned``1(System.Object)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <param name="serviceKey">Key to associate with the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned(System.Object,System.Type)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.As``1">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.As``2">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService1">Service type.</typeparam>
      <typeparam name="TService2">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.As``3">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService1">Service type.</typeparam>
      <typeparam name="TService2">Service type.</typeparam>
      <typeparam name="TService3">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.As(System.Type[])">
      <summary>
            Configure the services that the component will provide.
            </summary>
      <param name="services">Service types to expose.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.As(Autofac.Core.Service[])">
      <summary>
            Configure the services that the component will provide.
            </summary>
      <param name="services">Services to expose.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.Named(System.String,System.Type)">
      <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
      <param name="serviceName">Named service to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.Named``1(System.String)">
      <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
      <param name="serviceName">Named service to associate with the component.</param>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.Keyed(System.Object,System.Type)">
      <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.Keyed``1(System.Object)">
      <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnPreparing(System.Action{Autofac.Core.PreparingEventArgs})">
      <summary>
            Add a handler for the Preparing event. This event allows manipulating of the parameters
            that will be provided to the component.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnActivating(System.Action{Autofac.Core.IActivatingEventArgs{`0}})">
      <summary>
            Add a handler for the Activating event.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnActivated(System.Action{Autofac.Core.IActivatedEventArgs{`0}})">
      <summary>
            Add a handler for the Activated event.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.PropertiesAutowired(Autofac.PropertyWiringOptions)">
      <summary>
            Configure the component so that any properties whose types are registered in the
            container will be wired to instances of the appropriate service.
            </summary>
      <param name="options">Set wiring options such as circular dependency wiring support.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.WithMetadata(System.String,System.Object)">
      <summary>
            Associates data with the component.
            </summary>
      <param name="key">Key by which the data can be located.</param>
      <param name="value">The data value.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.WithMetadata(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>
            Associates data with the component.
            </summary>
      <param name="properties">The extended properties to associate with the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.WithMetadata``1(System.Action{Autofac.Builder.MetadataConfiguration{``0}})">
      <summary>
            Associates data with the component.
            </summary>
      <typeparam name="TMetadata">A type with properties whose names correspond to the
            property names to configure.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="P:Autofac.Builder.IRegistrationBuilder`3.ActivatorData">
      <summary>
            The activator data.
            </summary>
    </member>
    <member name="P:Autofac.Builder.IRegistrationBuilder`3.RegistrationStyle">
      <summary>
            The registration style.
            </summary>
    </member>
    <member name="P:Autofac.Builder.IRegistrationBuilder`3.RegistrationData">
      <summary>
            The registration data.
            </summary>
    </member>
    <member name="T:Autofac.Core.IComponentRegistry">
      <summary>
            Provides component registrations according to the services they provide.
            </summary>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.TryGetRegistration(Autofac.Core.Service,Autofac.Core.IComponentRegistration@)">
      <summary>
            Attempts to find a default registration for the specified service.
            </summary>
      <param name="service">The service to look up.</param>
      <param name="registration">The default registration for the service.</param>
      <returns>True if a registration exists.</returns>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.IsRegistered(Autofac.Core.Service)">
      <summary>
            Determines whether the specified service is registered.
            </summary>
      <param name="service">The service to test.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.Register(Autofac.Core.IComponentRegistration)">
      <summary>
            Register a component.
            </summary>
      <param name="registration">The component registration.</param>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.Register(Autofac.Core.IComponentRegistration,System.Boolean)">
      <summary>
            Register a component.
            </summary>
      <param name="registration">The component registration.</param>
      <param name="preserveDefaults">If true, existing defaults for the services provided by the
            component will not be changed.</param>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.RegistrationsFor(Autofac.Core.Service)">
      <summary>
            Selects from the available registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service" />
            have been invoked.
            </summary>
      <param name="service">The service for which registrations are sought.</param>
      <returns>Registrations supporting <paramref name="service" />.</returns>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.AddRegistrationSource(Autofac.Core.IRegistrationSource)">
      <summary>
            Add a registration source that will provide registrations on-the-fly.
            </summary>
      <param name="source">The source to register.</param>
    </member>
    <member name="P:Autofac.Core.IComponentRegistry.Registrations">
      <summary>
            Enumerate the registered components.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistry.Sources">
      <summary>
            Gets the registration sources that are used by the registry.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistry.HasLocalComponents">
      <summary>
            True if the registry contains its own components; false if it is forwarding
            registrations from another external registry.
            </summary>
      <remarks>This property is used when walking up the scope tree looking for
            registrations for a new customised scope. (See issue 336.)</remarks>
    </member>
    <member name="E:Autofac.Core.IComponentRegistry.Registered">
      <summary>
            Fired whenever a component is registered - either explicitly or via a
            <see cref="T:Autofac.Core.IRegistrationSource" />.
            </summary>
    </member>
    <member name="E:Autofac.Core.IComponentRegistry.RegistrationSourceAdded">
      <summary>
            Fired when an <see cref="T:Autofac.Core.IRegistrationSource" /> is added to the registry.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.CopyOnWriteRegistry">
      <summary>
            Delegates registration lookups to a specified registry. When write operations are applied,
            initialises a new 'writeable' registry.
            </summary>
      <remarks>
            Safe for concurrent access by multiple readers. Write operations are single-threaded.
            </remarks>
    </member>
    <member name="T:Autofac.Features.Variance.ContravariantRegistrationSource">
      <summary>
            Enables contravariant <code>Resolve()</code> for interfaces that have a single contravariant ('in') parameter.
            </summary>
      <example>
            interface IHandler&lt;in TCommand&gt;
            {
                void Handle(TCommand command);
            }
            
            class Command { }
            
            class DerivedCommand : Command { }
            
            class CommandHandler : IHandler&lt;Command&gt; { ... }
            
            var builder = new ContainerBuilder();
            builder.RegisterSource(new ContravariantRegistrationSource());
            builder.RegisterType&lt;CommandHandler&gt;();
            var container = builder.Build();
            // Source enables this line, even though IHandler&lt;Command&gt; is the
            // actual registered type.
            var handler = container.Resolve&lt;IHandler&lt;DerivedCommand&gt;&gt;();
            handler.Handle(new DerivedCommand());
            </example>
    </member>
    <member name="M:Autofac.Features.Variance.ContravariantRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
      <remarks>
            If the source is queried for service s, and it returns a component that implements both s and s', then it
            will not be queried again for either s or s'. This means that if the source can return other implementations
            of s', it should return these, plus the transitive closure of other components implementing their 
            additional services, along with the implementation of s. It is not an error to return components
            that do not implement <paramref name="service" />.
            </remarks>
    </member>
    <member name="P:Autofac.Features.Variance.ContravariantRegistrationSource.IsAdapterForIndividualComponents">
      <summary>
            Gets whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
    </member>
    <member name="T:Autofac.PropertyWiringOptions">
      <summary>
            Options that can be applied when autowiring properties on a component. (Multiple options can
            be specified using bitwise 'or' - e.g. AllowCircularDependencies | PreserveSetValues.
            </summary>
    </member>
    <member name="F:Autofac.PropertyWiringOptions.None">
      <summary>
            Default behavior. Circular dependencies are not allowed; existing non-default
            property values are overwritten.
            </summary>
    </member>
    <member name="F:Autofac.PropertyWiringOptions.AllowCircularDependencies">
      <summary>
            Allows property-property and property-constructor circular dependency wiring.
            This flag moves property wiring from the Activating to the Activated event.
            </summary>
    </member>
    <member name="F:Autofac.PropertyWiringOptions.PreserveSetValues">
      <summary>
            If specified, properties that already have a non-default value will be left
            unchanged in the wiring operation.
            </summary>
    </member>
    <member name="T:Autofac.Builder.RegistrationBuilder">
      <summary>
            Static factory methods to simplify the creation and handling of IRegistrationBuilder{L,A,R}.
            </summary>
      <example>
            To create an <see cref="T:Autofac.Core.IComponentRegistration" /> for a specific type, use:
            <code>
            var cr = RegistrationBuilder.ForType(t).CreateRegistration();
            </code>
            The full builder syntax is supported:
            <code>
            var cr = RegistrationBuilder.ForType(t).Named("foo").ExternallyOwned().CreateRegistration();
            </code></example>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.ForDelegate``1(System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
      <summary>
            Creates a registration builder for the provided delegate.
            </summary>
      <typeparam name="T">Instance type returned by delegate.</typeparam>
      <param name="delegate">Delegate to register.</param>
      <returns>A registration builder.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.ForDelegate(System.Type,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
      <summary>
            Creates a registration builder for the provided delegate.
            </summary>
      <param name="delegate">Delegate to register.</param>
      <param name="limitType">Most specific type return value of delegate can be cast to.</param>
      <returns>A registration builder.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.ForType``1">
      <summary>
            Creates a registration builder for the provided type.
            </summary>
      <typeparam name="TImplementer">Implementation type to register.</typeparam>
      <returns>A registration builder.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.ForType(System.Type)">
      <summary>
            Creates a registration builder for the provided type.
            </summary>
      <param name="implementationType">Implementation type to register.</param>
      <returns>A registration builder.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.CreateRegistration``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Create an <see cref="T:Autofac.Core.IComponentRegistration" /> from a <see cref="T:Autofac.Builder.RegistrationBuilder" />.
            (There is no need to call
            this method when registering components through a <see cref="T:Autofac.ContainerBuilder" />.)
            </summary>
      <remarks>
            When called on the result of one of the <see cref="T:Autofac.ContainerBuilder" /> methods,
            the returned registration will be different from the one the builder itself registers
            in the container.
            </remarks>
      <example>
        <code>
            var registration = RegistrationBuilder.ForType&lt;Foo&gt;().CreateRegistration();
            </code>
      </example>
      <typeparam name="TLimit">
      </typeparam>
      <typeparam name="TActivatorData">
      </typeparam>
      <typeparam name="TSingleRegistrationStyle">
      </typeparam>
      <param name="builder">The registration builder.</param>
      <returns>An IComponentRegistration.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.CreateRegistration(System.Guid,Autofac.Builder.RegistrationData,Autofac.Core.IInstanceActivator,System.Collections.Generic.IEnumerable{Autofac.Core.Service})">
      <summary>
            Create an IComponentRegistration from data.
            </summary>
      <param name="id">Id of the registration.</param>
      <param name="data">Registration data.</param>
      <param name="activator">Activator.</param>
      <param name="services">Services provided by the registration.</param>
      <returns>An IComponentRegistration.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.CreateRegistration(System.Guid,Autofac.Builder.RegistrationData,Autofac.Core.IInstanceActivator,System.Collections.Generic.IEnumerable{Autofac.Core.Service},Autofac.Core.IComponentRegistration)">
      <summary>
            Create an IComponentRegistration from data.
            </summary>
      <param name="id">Id of the registration.</param>
      <param name="data">Registration data.</param>
      <param name="activator">Activator.</param>
      <param name="services">Services provided by the registration.</param>
      <param name="target">Optional; target registration.</param>
      <returns>An IComponentRegistration.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="activator" /> or <paramref name="data" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.RegisterSingleComponent``3(Autofac.Core.IComponentRegistry,Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Register a component in the component registry. This helper method is necessary
            in order to execute OnRegistered hooks and respect PreserveDefaults. 
            </summary>
      <remarks>Hoping to refactor this out.</remarks>
      <typeparam name="TLimit">
      </typeparam>
      <typeparam name="TActivatorData">
      </typeparam>
      <typeparam name="TSingleRegistrationStyle">
      </typeparam>
      <param name="cr">Component registry to make registration in.</param>
      <param name="builder">Registration builder with data for new registration.</param>
    </member>
    <member name="T:Autofac.Builder.RegistrationBuilderResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilderResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilderResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilderResources.ComponentDoesNotSupportService">
      <summary>
              Looks up a localized string similar to The type '{0}' is not assignable to service '{1}'..
            </summary>
    </member>
    <member name="T:Autofac.Builder.RegistrationExtensions">
      <summary>
            Adds registration syntax for less commonly-used features.
            </summary>
      <remarks>
            These features are in this namespace because they will remain accessible to
            applications originally written against Autofac 1.4. In Autofac 2, this functionality
            is implicitly provided and thus making explicit registrations is rarely necessary.
            </remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory(Autofac.ContainerBuilder,System.Type)">
      <summary>
            Registers a factory delegate.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="delegateType">Factory type to generate.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory(Autofac.ContainerBuilder,System.Type,Autofac.Core.Service)">
      <summary>
            Registers a factory delegate.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="delegateType">Factory type to generate.</param>
      <param name="service">The service that the delegate will return instances of.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Factory delegates are provided automatically in Autofac 2, and
            this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory``1(Autofac.ContainerBuilder,Autofac.Core.Service)">
      <summary>
            Registers a factory delegate.
            </summary>
      <typeparam name="TDelegate">The type of the delegate.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="service">The service that the delegate will return instances of.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory``1(Autofac.ContainerBuilder)">
      <summary>
            Registers a factory delegate.
            </summary>
      <typeparam name="TDelegate">The type of the delegate.</typeparam>
      <param name="builder">Container builder.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.NamedParameterMapping``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by name.
            </summary>
      <typeparam name="TDelegate">Factory delegate type</typeparam>
      <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
      <param name="registration">Registration to change parameter mapping mode of.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.PositionalParameterMapping``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by position.
            </summary>
      <typeparam name="TDelegate">Factory delegate type</typeparam>
      <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
      <param name="registration">Registration to change parameter mapping mode of.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.TypedParameterMapping``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by type.
            </summary>
      <typeparam name="TDelegate">Factory delegate type</typeparam>
      <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
      <param name="registration">Registration to change parameter mapping mode of.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterCollection(Autofac.ContainerBuilder,System.String,System.Type)">
      <summary>
            Registers the type as a collection. If no services or names are specified, the
            default services will be IList&lt;T&gt;, ICollection&lt;T&gt;, and IEnumerable&lt;T&gt;        
            </summary>
      <param name="elementType">The type of the collection elements.</param>
      <param name="builder">Container builder.</param>
      <param name="collectionName">A unique name for the collection that can be passed to MemberOf().</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Collections are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterCollection``1(Autofac.ContainerBuilder,System.String)">
      <summary>
            Registers the type as a collection. If no services or names are specified, the
            default services will be IList&lt;T&gt;, ICollection&lt;T&gt;, and IEnumerable&lt;T&gt;        
            </summary>
      <typeparam name="T">The type of the collection elements.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="collectionName">A unique name for the collection that can be passed to MemberOf().</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Collections are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.MemberOf``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String)">
      <summary>
            Include the element explicitly in a collection configured using RegisterCollection.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to export.</param>
      <param name="collectionName">The collection name, as passed to RegisterCollection.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="T:Autofac.ContainerBuilderResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.ContainerBuilderResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.ContainerBuilderResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.ContainerBuilderResources.BuildCanOnlyBeCalledOnce">
      <summary>
              Looks up a localized string similar to Build() or Update() can only be called once on a ContainerBuilder..
            </summary>
    </member>
    <member name="P:Autofac.ContainerBuilderResources.ErrorAutoActivating">
      <summary>
              Looks up a localized string similar to An error occurred while attempting to automatically activate registration '{0}'. See the inner exception for information on the source of the failure..
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Delegate.DelegateActivatorResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Delegate.DelegateActivatorResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Delegate.DelegateActivatorResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Delegate.DelegateActivatorResources.NullFromActivationDelegateFor">
      <summary>
              Looks up a localized string similar to A delegate registered to create instances of '{0}' returned null..
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.BoundConstructor">
      <summary>
              Looks up a localized string similar to Bound constructor '{0}'..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.CannotInstantitate">
      <summary>
              Looks up a localized string similar to The binding cannot be instantiated..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.ExceptionDuringInstantiation">
      <summary>
              Looks up a localized string similar to An exception was thrown while invoking the constructor '{0}' on type '{1}'..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.NonBindableConstructor">
      <summary>
              Looks up a localized string similar to Cannot resolve parameter '{1}' of constructor '{0}'..
            </summary>
    </member>
    <member name="T:Autofac.Core.Parameter">
      <summary>
            Used in order to provide a value to a constructor parameter or property on an instance
            being created by the container.
            </summary>
      <remarks>
            Not all parameters can be applied to all sites.
            </remarks>
    </member>
    <member name="M:Autofac.Core.Parameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
      <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
      <param name="pi">Constructor, method, or property-mutator parameter.</param>
      <param name="context">The component context in which the value is being provided.</param>
      <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
      <returns>True if a value can be supplied; otherwise, false.</returns>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.DefaultValueParameter">
      <summary>
            Provides parameters that have a default value, set with an optional parameter
            declaration in C# or VB.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.DefaultValueParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
      <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
      <param name="pi">Constructor, method, or property-mutator parameter.</param>
      <param name="context">The component context in which the value is being provided.</param>
      <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
      <returns>True if a value can be supplied; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="pi" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:Autofac.Core.ContainerResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.ContainerResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.ContainerResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.ContainerResources.SelfRegistrationCannotBeActivated">
      <summary>
              Looks up a localized string similar to The container's self-registration of context interfaces should never be activated as it is hard-wired into the LifetimeScope class..
            </summary>
    </member>
    <member name="T:Autofac.Core.Diagnostics.IContainerAwareComponent">
      <summary>
            Marks a module as container-aware (for the purposes of attaching to diagnostic events.)
            </summary>
    </member>
    <member name="M:Autofac.Core.Diagnostics.IContainerAwareComponent.SetContainer(Autofac.IContainer)">
      <summary>
            Initialise the module with the container into which it is being registered.
            </summary>
      <param name="container">The container.</param>
    </member>
    <member name="T:Autofac.Core.IActivatedEventArgs`1">
      <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatedEventArgs`1.Context">
      <summary>
            The context in which the activation occurred.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatedEventArgs`1.Component">
      <summary>
            The component providing the instance.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatedEventArgs`1.Parameters">
      <summary>
            The paramters provided when resolved.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatedEventArgs`1.Instance">
      <summary>
            The instance that will be used to satisfy the request.
            </summary>
    </member>
    <member name="T:Autofac.Core.IActivatingEventArgs`1">
      <summary>
            Fired after the construction of an instance but before that instance
            is shared with any other or any members are invoked on it.
            </summary>
    </member>
    <member name="M:Autofac.Core.IActivatingEventArgs`1.ReplaceInstance(System.Object)">
      <summary>
            The instance can be replaced if needed, e.g. by an interface proxy.
            </summary>
      <param name="instance">The object to use instead of the activated instance.</param>
    </member>
    <member name="P:Autofac.Core.IActivatingEventArgs`1.Context">
      <summary>
            The context in which the activation occurred.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatingEventArgs`1.Component">
      <summary>
            The component providing the instance.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatingEventArgs`1.Instance">
      <summary>
            The instance that will be used to satisfy the request.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatingEventArgs`1.Parameters">
      <summary>
            The parameters supplied to the activator.
            </summary>
    </member>
    <member name="T:Autofac.Core.IServiceWithType">
      <summary>
            Interface supported by services that carry type information.
            </summary>
    </member>
    <member name="M:Autofac.Core.IServiceWithType.ChangeType(System.Type)">
      <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType" /> as the <see cref="P:Autofac.Core.IServiceWithType.ServiceType" />.
            </summary>
      <param name="newType">The new service type.</param>
      <returns>A new service with the service type.</returns>
    </member>
    <member name="P:Autofac.Core.IServiceWithType.ServiceType">
      <summary>
            Gets the type of the service.
            </summary>
      <value>The type of the service.</value>
    </member>
    <member name="T:Autofac.Core.KeyedService">
      <summary>
            Identifies a service using a key in addition to its type.
            </summary>
    </member>
    <member name="M:Autofac.Core.KeyedService.#ctor(System.Object,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.KeyedService" /> class.
            </summary>
      <param name="serviceKey">Key of the service.</param>
      <param name="serviceType">Type of the service.</param>
    </member>
    <member name="M:Autofac.Core.KeyedService.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:Autofac.Core.KeyedService.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Autofac.Core.KeyedService.ChangeType(System.Type)">
      <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType" /> as the <see cref="P:Autofac.Core.KeyedService.ServiceType" />.
            </summary>
      <param name="newType">The new service type.</param>
      <returns>A new service with the service type.</returns>
    </member>
    <member name="P:Autofac.Core.KeyedService.ServiceKey">
      <summary>
            Gets or sets the key of the service.
            </summary>
      <value>The key of the service.</value>
    </member>
    <member name="P:Autofac.Core.KeyedService.ServiceType">
      <summary>
            Gets the type of the service.
            </summary>
      <value>The type of the service.</value>
    </member>
    <member name="P:Autofac.Core.KeyedService.Description">
      <summary>
            Gets a human-readable description of the service.
            </summary>
      <value>The description.</value>
    </member>
    <member name="T:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs">
      <summary>
            Describes when a lifetime scope is beginning.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs.#ctor(Autofac.ILifetimeScope)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs" /> class.
            </summary>
      <param name="lifetimeScope">The lifetime scope that is beginning.</param>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs.LifetimeScope">
      <summary>
            The lifetime scope that is beginning.
            </summary>
    </member>
    <member name="T:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs">
      <summary>
            Describes when a lifetime scope is ending.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs.#ctor(Autofac.ILifetimeScope)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs" /> class.
            </summary>
      <param name="lifetimeScope">The lifetime scope that is ending.</param>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs.LifetimeScope">
      <summary>
            The lifetime scope that is ending.
            </summary>
    </member>
    <member name="T:Autofac.Core.Lifetime.LifetimeScopeResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScopeResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScopeResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScopeResources.ScopeIsDisposed">
      <summary>
              Looks up a localized string similar to Instances cannot be resolved and nested lifetimes cannot be created from this LifetimeScope as it has already been disposed..
            </summary>
    </member>
    <member name="T:Autofac.Core.RegistrationSourceAddedEventArgs">
      <summary>
            Fired when an <see cref="T:Autofac.Core.IRegistrationSource" /> is added to the registry.
            </summary>
    </member>
    <member name="M:Autofac.Core.RegistrationSourceAddedEventArgs.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.IRegistrationSource)">
      <summary>
            Construct an instance of the <see cref="T:Autofac.Core.RegistrationSourceAddedEventArgs" /> class.
            </summary>
      <param name="componentRegistry">The registry to which the source was added.</param>
      <param name="registrationSource">The source that was added.</param>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="P:Autofac.Core.RegistrationSourceAddedEventArgs.RegistrationSource">
      <summary>
            The registry to which the source was added.
            </summary>
    </member>
    <member name="P:Autofac.Core.RegistrationSourceAddedEventArgs.ComponentRegistry">
      <summary>
            The source that was added.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.IInstanceLookup">
      <summary>
            Represents the process of finding a component during a resolve operation.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.IInstanceLookup.ComponentRegistration">
      <summary>
            The component for which an instance is to be looked up.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.IInstanceLookup.ActivationScope">
      <summary>
            The scope in which the instance will be looked up.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.IInstanceLookup.Parameters">
      <summary>
            The parameters provided for new instance creation.
            </summary>
    </member>
    <member name="E:Autofac.Core.Resolving.IInstanceLookup.InstanceLookupEnding">
      <summary>
            Raised when the lookup phase of the operation is ending.
            </summary>
    </member>
    <member name="E:Autofac.Core.Resolving.IInstanceLookup.CompletionBeginning">
      <summary>
            Raised when the completion phase of an instance lookup operation begins.
            </summary>
    </member>
    <member name="E:Autofac.Core.Resolving.IInstanceLookup.CompletionEnding">
      <summary>
            Raised when the completion phase of an instance lookup operation ends.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs">
      <summary>
            Raised when the completion phase of an instance lookup operation begins.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs" /> class.
            </summary>
      <param name="instanceLookup">The instance lookup that is beginning the completion phase.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs.InstanceLookup">
      <summary>
            The instance lookup operation that is beginning the completion phase.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs">
      <summary>
            Raised when the completion phase of an instance lookup operation ends.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs" /> class.
            </summary>
      <param name="instanceLookup">The instance lookup that is ending the completion phase.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs.InstanceLookup">
      <summary>
            The instance lookup operation that is ending the completion phase.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.InstanceLookupEndingEventArgs">
      <summary>
            Fired when an instance is looked up.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.InstanceLookupEndingEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup,System.Boolean)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Resolving.InstanceLookupBeginningEventArgs" /> class.
            </summary>
      <param name="instanceLookup">The instance lookup that is ending.</param>
      <param name="newInstanceActivated">True if a new instance was created as part of the operation.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.InstanceLookupEndingEventArgs.NewInstanceActivated">
      <summary>
            True if a new instance was created as part of the operation.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.InstanceLookupEndingEventArgs.InstanceLookup">
      <summary>
            The instance lookup operation that is ending.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.InstanceLookupBeginningEventArgs">
      <summary>
            Fired when instance lookup is complete.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.InstanceLookupBeginningEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup)">
      <param name="instanceLookup">The instance lookup that is ending.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.InstanceLookupBeginningEventArgs.InstanceLookup">
      <summary>
            The instance lookup operation that is beginning.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs">
      <summary>
            Describes the commencement of a new resolve operation.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs.#ctor(Autofac.Core.Resolving.IResolveOperation)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs" /> class.
            </summary>
      <param name="resolveOperation">The resolve operation that is beginning.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs.ResolveOperation">
      <summary>
            The resolve operation that is beginning.
            </summary>
    </member>
    <member name="T:Autofac.Util.Disposable">
      <summary>
            Base class for disposable objects.
            </summary>
    </member>
    <member name="M:Autofac.Util.Disposable.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Autofac.Util.Disposable.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Autofac.Util.Disposable.IsDisposed">
      <summary>
            Returns true if the current instance has been disposed; otherwise false;
            </summary>
    </member>
    <member name="T:Autofac.Core.IComponentRegistration">
      <summary>
            Describes a logical component within the container.
            </summary>
    </member>
    <member name="M:Autofac.Core.IComponentRegistration.RaisePreparing(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter}@)">
      <summary>
            Called by the container when an instance is required.
            </summary>
      <param name="context">The context in which the instance will be activated.</param>
      <param name="parameters">Parameters for activation. These may be modified by the event handler.</param>
    </member>
    <member name="M:Autofac.Core.IComponentRegistration.RaiseActivating(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object@)">
      <summary>
            Called by the container once an instance has been constructed.
            </summary>
      <param name="context">The context in which the instance was activated.</param>
      <param name="parameters">The parameters supplied to the activator.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="M:Autofac.Core.IComponentRegistration.RaiseActivated(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object)">
      <summary>
            Called by the container once an instance has been fully constructed, including
            any requested objects that depend on the instance.
            </summary>
      <param name="context">The context in which the instance was activated.</param>
      <param name="parameters">The parameters supplied to the activator.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Id">
      <summary>
            A unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Activator">
      <summary>
            The activator used to create instances.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Lifetime">
      <summary>
            The lifetime associated with the component.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Sharing">
      <summary>
            Whether the component instances are shared or not.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Ownership">
      <summary>
            Whether the instances of the component should be disposed by the container.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Services">
      <summary>
            The services provided by the component.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Metadata">
      <summary>
            Additional data associated with the component.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Target">
      <summary>
            The component registration upon which this registration is based.
            </summary>
    </member>
    <member name="E:Autofac.Core.IComponentRegistration.Preparing">
      <summary>
            Fired when a new instance is required. The instance can be
            provided in order to skip the regular activator, by setting the Instance property in
            the provided event arguments.
            </summary>
    </member>
    <member name="E:Autofac.Core.IComponentRegistration.Activating">
      <summary>
            Fired when a new instance is being activated. The instance can be
            wrapped or switched at this time by setting the Instance property in
            the provided event arguments.
            </summary>
    </member>
    <member name="E:Autofac.Core.IComponentRegistration.Activated">
      <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator">
      <summary>
            Wraps a component registration, switching its lifetime.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentRegistrationResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.ToStringFormat">
      <summary>
              Looks up a localized string similar to Activator = {0}, Services = [{1}], Lifetime = {2}, Sharing = {3}, Ownership = {4}.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ExternalRegistrySource">
      <summary>
            Pulls registrations from another component registry.
            Excludes most auto-generated registrations - currently has issues with
            collection registrations.
            </summary>
    </member>
    <member name="M:Autofac.Core.Registration.ExternalRegistrySource.#ctor(Autofac.Core.IComponentRegistry)">
      <summary>
            Create an external registry source that draws components from
            <paramref name="registry" />.
            </summary>
      <param name="registry">Component registry to pull registrations from.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ExternalRegistrySource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
    </member>
    <member name="P:Autofac.Core.Registration.ExternalRegistrySource.IsAdapterForIndividualComponents">
      <summary>
            In this case because the components that are adapted do not come from the same
            logical scope, we must return false to avoid duplicating them.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentRegistry">
      <summary>
            Maps services onto the components that provide them.
            </summary>
      <remarks>
            The component registry provides services directly from components,
            and also uses <see cref="T:Autofac.Core.IRegistrationSource" /> to generate components
            on-the-fly or as adapters for other components. A component registry
            is normally used through a <see cref="T:Autofac.ContainerBuilder" />, and not
            directly by application code.
            </remarks>
    </member>
    <member name="F:Autofac.Core.Registration.ComponentRegistry._synchRoot">
      <summary>
            Protects instance variables from concurrent access.
            </summary>
    </member>
    <member name="F:Autofac.Core.Registration.ComponentRegistry._dynamicRegistrationSources">
      <summary>
            External registration sources.
            </summary>
    </member>
    <member name="F:Autofac.Core.Registration.ComponentRegistry._registrations">
      <summary>
            All registrations.
            </summary>
    </member>
    <member name="F:Autofac.Core.Registration.ComponentRegistry._serviceInfo">
      <summary>
            Keeps track of the status of registered services.
            </summary>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.TryGetRegistration(Autofac.Core.Service,Autofac.Core.IComponentRegistration@)">
      <summary>
            Attempts to find a default registration for the specified service.
            </summary>
      <param name="service">The service to look up.</param>
      <param name="registration">The default registration for the service.</param>
      <returns>True if a registration exists.</returns>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.IsRegistered(Autofac.Core.Service)">
      <summary>
            Determines whether the specified service is registered.
            </summary>
      <param name="service">The service to test.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.Register(Autofac.Core.IComponentRegistration)">
      <summary>
            Register a component.
            </summary>
      <param name="registration">The component registration.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.Register(Autofac.Core.IComponentRegistration,System.Boolean)">
      <summary>
            Register a component.
            </summary>
      <param name="registration">The component registration.</param>
      <param name="preserveDefaults">If true, existing defaults for the services provided by the
            component will not be changed.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.RegistrationsFor(Autofac.Core.Service)">
      <summary>
            Selects from the available registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service" />
            have been invoked.
            </summary>
      <param name="service">The service for which registrations are sought.</param>
      <returns>Registrations supporting <paramref name="service" />.</returns>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.AddRegistrationSource(Autofac.Core.IRegistrationSource)">
      <summary>
            Add a registration source that will provide registrations on-the-fly.
            </summary>
      <param name="source">The source to register.</param>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistry.Registrations">
      <summary>
            Enumerate the registered components.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistry.Sources">
      <summary>
            Gets the registration sources that are used by the registry.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistry.HasLocalComponents">
      <summary>
            True if the registry contains its own components; false if it is forwarding
            registrations from another external registry.
            </summary>
      <remarks>This property is used when walking up the scope tree looking for
            registrations for a new customised scope. (See issue 336.)</remarks>
    </member>
    <member name="E:Autofac.Core.Registration.ComponentRegistry.Registered">
      <summary>
            Fired whenever a component is registered - either explicitly or via a
            <see cref="T:Autofac.Core.IRegistrationSource" />.
            </summary>
    </member>
    <member name="E:Autofac.Core.Registration.ComponentRegistry.RegistrationSourceAdded">
      <summary>
            Fired when an <see cref="T:Autofac.Core.IRegistrationSource" /> is added to the registry.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ScopeRestrictedRegistry">
      <summary>
            Switches components with a RootScopeLifetime (singletons) with
            decorators exposing MatchingScopeLifetime targeting the specified scope.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ServiceRegistrationInfo">
      <summary>
            Tracks the services known to the registry.
            </summary>
    </member>
    <member name="F:Autofac.Core.Registration.ServiceRegistrationInfo._sourcesToQuery">
      <summary>
            Used for bookkeeping so that the same source is not queried twice (may be null.)
            </summary>
    </member>
    <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.#ctor(Autofac.Core.Service)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ServiceRegistrationInfo" /> class.
            </summary>
      <param name="service">The tracked service.</param>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.IsInitialized">
      <summary>
            The first time a service is requested, initialization (e.g. reading from sources)
            happens. This value will then be set to true. Calling many methods on this type before
            initialisation is an error.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.Implementations">
      <summary>
            The known implementations.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.IsRegistered">
      <summary>
            True if any implementations are known.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ServiceRegistrationInfoResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.NotDuringInitialization">
      <summary>
              Looks up a localized string similar to The operation is only valid during initialization..
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.NotInitialized">
      <summary>
              Looks up a localized string similar to The operation is not valid until the object is initialized..
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.ComponentActivationResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ComponentActivationResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ComponentActivationResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ComponentActivationResources.ActivationAlreadyExecuted">
      <summary>
              Looks up a localized string similar to The activation has already been executed..
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.ResolveOperationEndingEventArgs">
      <summary>
            Describes the commencement of a new resolve operation.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperationEndingEventArgs.#ctor(Autofac.Core.Resolving.IResolveOperation,System.Exception)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs" /> class.
            </summary>
      <param name="resolveOperation">The resolve operation that is ending.</param>
      <param name="exception">If included, the exception causing the operation to end; otherwise, null.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationEndingEventArgs.Exception">
      <summary>
            The exception causing the operation to end, or null.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationEndingEventArgs.ResolveOperation">
      <summary>
            The resolve operation that is ending.
            </summary>
    </member>
    <member name="T:Autofac.Core.ServiceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.ServiceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.ServiceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.ServiceResources.MustOverrideEquals">
      <summary>
              Looks up a localized string similar to Subclasses of Autofac.Service must override Object.Equals().
            </summary>
    </member>
    <member name="P:Autofac.Core.ServiceResources.MustOverrideGetHashCode">
      <summary>
              Looks up a localized string similar to Subclasses of Autofac.Service must override Object.GetHashCode().
            </summary>
    </member>
    <member name="T:Autofac.Features.Collections.CollectionRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.Collections.CollectionRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.Collections.CollectionRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.Collections.CollectionRegistrationSourceResources.CollectionRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Collection Support (Arrays and Generic Collection Interfaces).
            </summary>
    </member>
    <member name="T:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources.LazyRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Lazy&lt;T&gt; Support.
            </summary>
    </member>
    <member name="T:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData">
      <summary>
            Describes the basic requirements for generating a lightweight adapter.
            </summary>
    </member>
    <member name="M:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.#ctor(Autofac.Core.Service,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object,System.Object})">
      <summary>
            Create an instance of <see cref="T:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData" />.
            </summary>
      <param name="fromService">The service that will be adapted from.</param>
      <param name="adapter">The adapter function.</param>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.Adapter">
      <summary>
            The adapter function.
            </summary>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.FromService">
      <summary>
            The service to be adapted from.
            </summary>
    </member>
    <member name="T:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.AdapterFromToDescription">
      <summary>
              Looks up a localized string similar to Lightweight Adapter from {0} to {1}.
            </summary>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.FromAndToMustDiffer">
      <summary>
              Looks up a localized string similar to The service {0} cannot be both the adapter's from and to parameters - these must differ..
            </summary>
    </member>
    <member name="T:Autofac.Features.Collections.CollectionRegistrationExtensions">
      <summary>
            Internal implementation of the RegisterCollection/MemberOf-style collection feature.
            </summary>
    </member>
    <member name="T:Autofac.Builder.DynamicRegistrationStyle">
      <summary>
            Registration style for dynamic registrations.
            </summary>
    </member>
    <member name="T:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData">
      <summary>
            Data used to create factory activators.
            </summary>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.#ctor(System.Type,Autofac.Core.Service)">
      <summary>
            Create a new GeneratedFactoryActivatorData
            </summary>
      <param name="delegateType">The type of the factory.</param>
      <param name="productService">The service used to provide the products of the factory.</param>
    </member>
    <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.ParameterMapping">
      <summary>
            Determines how the parameters of the delegate type are passed on
            to the generated Resolve() call as Parameter objects.
            For Func-based delegates, this defaults to ByType. Otherwise, the
            parameters will be mapped by name.
            </summary>
    </member>
    <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.Activator">
      <summary>
            Activator data that can provide an IInstanceActivator instance.
            </summary>
    </member>
    <member name="T:Autofac.Builder.IHideObjectMembers">
      <summary>
            Hides standard Object members to make fluent interfaces
            easier to read.
            Based on blog post by @kzu here:
            http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx
            </summary>
    </member>
    <member name="M:Autofac.Builder.IHideObjectMembers.GetType">
      <summary>
            Standard System.Object member.
            </summary>
      <returns>Standard result.</returns>
    </member>
    <member name="M:Autofac.Builder.IHideObjectMembers.GetHashCode">
      <summary>
            Standard System.Object member.
            </summary>
      <returns>Standard result.</returns>
    </member>
    <member name="M:Autofac.Builder.IHideObjectMembers.ToString">
      <summary>
            Standard System.Object member.
            </summary>
      <returns>Standard result.</returns>
    </member>
    <member name="M:Autofac.Builder.IHideObjectMembers.Equals(System.Object)">
      <summary>
            Standard System.Object member.
            </summary>
      <param name="other">The other.</param>
      <returns>Standard result.</returns>
    </member>
    <member name="T:Autofac.Features.GeneratedFactories.ParameterMapping">
      <summary>
            Determines how the parameters of the delegate type are passed on
            to the generated Resolve() call as Parameter objects.
            </summary>
    </member>
    <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.Adaptive">
      <summary>
            Chooses parameter mapping based on the factory type.
            For Func-based factories this is equivalent to ByType, for all
            others ByName will be used.
            </summary>
    </member>
    <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByName">
      <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as NamedParameters based on the parameter
            names in the delegate type's formal argument list.
            </summary>
    </member>
    <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByType">
      <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as TypedParameters based on the parameter
            types in the delegate type's formal argument list.
            </summary>
    </member>
    <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByPosition">
      <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as PositionalParameters based on the parameter
            indices in the delegate type's formal argument list.
            </summary>
    </member>
    <member name="T:Autofac.Features.Indexed.IIndex`2">
      <summary>
            Provides components by lookup operations via an index (key) type.
            </summary>
      <typeparam name="TKey">The type of the index.</typeparam>
      <typeparam name="TValue">The service provided by the indexed components.</typeparam>
      <example>
            Retrieving a value given a key:
            <code>
            IIndex&lt;AccountType, IRenderer&gt; accountRenderers = // ...
            var renderer = accountRenderers[AccountType.User];
            </code></example>
    </member>
    <member name="M:Autofac.Features.Indexed.IIndex`2.TryGetValue(`0,`1@)">
      <summary>
            Get the value associated with <paramref name="key" /> if any is available.
            </summary>
      <param name="key">The key to look up.</param>
      <param name="value">The retrieved value.</param>
      <returns>True if a value associated with the key exists.</returns>
    </member>
    <member name="P:Autofac.Features.Indexed.IIndex`2.Item(`0)">
      <summary>
            Get the value associated with <paramref name="key" />.
            </summary>
      <param name="key">The value to retrieve.</param>
      <returns>The associated value.</returns>
    </member>
    <member name="M:Autofac.Features.Indexed.KeyedServiceIndex`2.#ctor(Autofac.IComponentContext)">
      <summary>
      </summary>
    </member>
    <member name="M:Autofac.Features.Indexed.KeyedServiceIndex`2.TryGetValue(`0,`1@)">
      <summary>
      </summary>
    </member>
    <member name="P:Autofac.Features.Indexed.KeyedServiceIndex`2.Item(`0)">
      <summary>
      </summary>
    </member>
    <member name="T:Autofac.Features.Metadata.MetaRegistrationSource">
      <summary>
            Support the <see cref="T:Autofac.Features.Metadata.Meta`1" />
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            </summary>
    </member>
    <member name="T:Autofac.Features.Metadata.Meta`1">
      <summary>
            Provides a value along with a dictionary of metadata describing the value.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
    </member>
    <member name="M:Autofac.Features.Metadata.Meta`1.#ctor(`0,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Create a new instance.
            </summary>
      <param name="value">The value described by the instance.</param>
      <param name="metadata">The metadata describing the value.</param>
    </member>
    <member name="P:Autofac.Features.Metadata.Meta`1.Value">
      <summary>
            The value described by <see cref="P:Autofac.Features.Metadata.Meta`1.Metadata" />.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.Meta`1.Metadata">
      <summary>
            Metadata describing the value.
            </summary>
    </member>
    <member name="T:Autofac.Features.Metadata.MetaRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.MetaRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Meta&lt;T&gt; Support.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.StronglyTypedMetaRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Meta&lt;T, TMetadata&gt; Support.
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources.DecoratedServiceIsNotOpenGeneric">
      <summary>
              Looks up a localized string similar to The service '{0}' is not an open generic type..
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources.OpenGenericRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to {0} providing {1}.
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData">
      <summary>
            Describes the activator for an open generic decorator.
            </summary>
    </member>
    <member name="M:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData.#ctor(System.Type,Autofac.Core.IServiceWithType)">
      <summary>
            Construct an <see cref="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData" />.
            </summary>
      <param name="implementer">The decorator type.</param>
      <param name="fromService">The open generic service type to decorate.</param>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData.FromService">
      <summary>
            The open generic service type to decorate.
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.FromAndToMustDiffer">
      <summary>
              Looks up a localized string similar to The service {0} cannot be both the adapter's from and to parameters - these must differ..
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.OpenGenericDecoratorRegistrationSourceImplFromTo">
      <summary>
              Looks up a localized string similar to Open Generic Decorator {0} from {1} to {2}.
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources.ImplementorMustBeOpenGenericType">
      <summary>
              Looks up a localized string similar to The type {0} is not an open generic type definition..
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.ImplementorMustBeOpenGenericTypeDefinition">
      <summary>
              Looks up a localized string similar to The implementation type '{0}' is not an open generic type definition..
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.InterfaceIsNotImplemented">
      <summary>
              Looks up a localized string similar to The implementation type '{0}' does not support the interface '{1}'..
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.ServiceTypeMustBeOpenGenericTypeDefinition">
      <summary>
              Looks up a localized string similar to The service '{0}' is not an open generic type definition..
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.TypesAreNotConvertible">
      <summary>
              Looks up a localized string similar to The service '{1}' is not assignable from implementation type '{0}'..
            </summary>
    </member>
    <member name="T:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources.OwnedInstanceRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Owned&lt;T&gt; Support.
            </summary>
    </member>
    <member name="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource">
      <summary>
            Provides registrations on-the-fly for any concrete type not already registered with
            the container.
            </summary>
    </member>
    <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource" /> class.
            </summary>
    </member>
    <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.#ctor(System.Func{System.Type,System.Boolean})">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource" /> class.
            </summary>
      <param name="predicate">A predicate that selects types the source will register.</param>
    </member>
    <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
    </member>
    <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.IsAdapterForIndividualComponents">
      <summary>
            Gets whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
    </member>
    <member name="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources.AnyConcreteTypeNotAlreadyRegisteredSourceDescription">
      <summary>
              Looks up a localized string similar to "Resolve Anything" Support.
            </summary>
    </member>
    <member name="T:Autofac.Features.Scanning.ScanningActivatorData">
      <summary>
            Activation data for types located by scanning assemblies.
            </summary>
    </member>
    <member name="M:Autofac.Features.Scanning.ScanningActivatorData.#ctor">
      <summary>
            Create an instance of <see cref="T:Autofac.Features.Scanning.ScanningActivatorData" />.
            </summary>
    </member>
    <member name="P:Autofac.Features.Scanning.ScanningActivatorData.Filters">
      <summary>
            The filters applied to the types from the scanned assembly.
            </summary>
    </member>
    <member name="P:Autofac.Features.Scanning.ScanningActivatorData.ConfigurationActions">
      <summary>
            Additional actions to be performed on the concrete type registrations.
            </summary>
    </member>
    <member name="P:Autofac.Features.Scanning.ScanningActivatorData.PostScanningCallbacks">
      <summary>
            Actions to be called once the scanning operation is complete.
            </summary>
    </member>
    <member name="T:Autofac.Core.ActivatedEventArgs`1">
      <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
    </member>
    <member name="M:Autofac.Core.ActivatedEventArgs`1.#ctor(Autofac.IComponentContext,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ActivatedEventArgs`1" /> class.
            </summary>
      <param name="context">The context.</param>
      <param name="component">The component.</param>
      <param name="parameters">The parameters.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="P:Autofac.Core.ActivatedEventArgs`1.Context">
      <summary>
            The context in which the activation occurred.
            </summary>
    </member>
    <member name="P:Autofac.Core.ActivatedEventArgs`1.Component">
      <summary>
            The component providing the instance.
            </summary>
    </member>
    <member name="P:Autofac.Core.ActivatedEventArgs`1.Parameters">
      <summary>
            The paramters provided when resolved.
            </summary>
    </member>
    <member name="P:Autofac.Core.ActivatedEventArgs`1.Instance">
      <summary>
            The instance that will be used to satisfy the request.
            </summary>
    </member>
    <member name="T:Autofac.Core.ActivatingEventArgs`1">
      <summary>
            Fired after the construction of an instance but before that instance
            is shared with any other or any members are invoked on it.
            </summary>
    </member>
    <member name="M:Autofac.Core.ActivatingEventArgs`1.#ctor(Autofac.IComponentContext,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ActivatedEventArgs`1" /> class.
            </summary>
      <param name="context">The context.</param>
      <param name="component">The component.</param>
      <param name="parameters">The parameters.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="M:Autofac.Core.ActivatingEventArgs`1.ReplaceInstance(System.Object)">
      <summary>
            The instance can be replaced if needed, e.g. by an interface proxy.
            </summary>
      <param name="instance">The object to use instead of the activated instance.</param>
    </member>
    <member name="P:Autofac.Core.ActivatingEventArgs`1.Context">
      <summary>
            The context in which the activation occurred.
            </summary>
    </member>
    <member name="P:Autofac.Core.ActivatingEventArgs`1.Component">
      <summary>
            The component providing the instance.
            </summary>
    </member>
    <member name="P:Autofac.Core.ActivatingEventArgs`1.Instance">
      <summary>
            The instance that will be used to satisfy the request.
            </summary>
      <remarks>
            The instance can be replaced if needed, e.g. by an interface proxy.
            </remarks>
    </member>
    <member name="P:Autofac.Core.ActivatingEventArgs`1.Parameters">
      <summary>
            The parameters supplied to the activator.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.InstanceActivator">
      <summary>
            Base class for instance activators.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.InstanceActivator.#ctor(System.Type)">
      <summary>
            Create an instance activator that will return instances compatible
            with <paramref name="limitType" />.
            </summary>
      <param name="limitType">Most derived type to which instances can be cast.</param>
    </member>
    <member name="M:Autofac.Core.Activators.InstanceActivator.ToString">
      <summary>
            Gets a string representation of the activator.
            </summary>
      <returns>A string describing the activator.</returns>
    </member>
    <member name="P:Autofac.Core.Activators.InstanceActivator.LimitType">
      <summary>
            The most specific type that the component instances are known to be castable to.
            </summary>
    </member>
    <member name="T:Autofac.Core.IInstanceActivator">
      <summary>
            Activates component instances.
            </summary>
    </member>
    <member name="M:Autofac.Core.IInstanceActivator.ActivateInstance(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Activate an instance in the provided context.
            </summary>
      <param name="context">Context in which to activate instances.</param>
      <param name="parameters">Parameters to the instance.</param>
      <returns>The activated instance.</returns>
      <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
    </member>
    <member name="P:Autofac.Core.IInstanceActivator.LimitType">
      <summary>
            The most specific type that the component instances are known to be castable to.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Delegate.DelegateActivator">
      <summary>
            Activate instances using a delegate.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Delegate.DelegateActivator.#ctor(System.Type,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
      <summary>
            Create a delegate activator.
            </summary>
      <param name="limitType">The most specific type to which activated instances can be cast.</param>
      <param name="activationFunction">Activation delegate.</param>
    </member>
    <member name="M:Autofac.Core.Activators.Delegate.DelegateActivator.ActivateInstance(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Activate an instance in the provided context.
            </summary>
      <param name="context">Context in which to activate instances.</param>
      <param name="parameters">Parameters to the instance.</param>
      <returns>The activated instance.</returns>
      <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
    </member>
    <member name="T:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator">
      <summary>
            Provides a pre-constructed instance.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.#ctor(System.Object)">
      <summary>
            Provide the specified instance.
            </summary>
      <param name="instance">The instance to provide.</param>
    </member>
    <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.ActivateInstance(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Activate an instance in the provided context.
            </summary>
      <param name="context">Context in which to activate instances.</param>
      <param name="parameters">Parameters to the instance.</param>
      <returns>The activated instance.</returns>
      <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
    </member>
    <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.DisposeInstance">
      <summary>
            Determines whether the activator disposes the instance that it holds.
            Necessary because otherwise instances that are never resolved will never be
            disposed.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.InstanceAlreadyActivated">
      <summary>
              Looks up a localized string similar to The provided instance has already been used in an activation request. Did you combine a provided instance with non-root/single-instance lifetime/sharing?.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.AutowiringParameter">
      <summary>
            Supplies values based on the target parameter type.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.AutowiringParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
      <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
      <param name="pi">Constructor, method, or property-mutator parameter.</param>
      <param name="context">The component context in which the value is being provided.</param>
      <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
      <returns>True if a value can be supplied; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="pi" /> or <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.ConstructorParameterBinding">
      <summary>
            Binds a constructor to the parameters that will be used when it is invoked.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.#ctor(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},Autofac.IComponentContext)">
      <summary>
            Construct a new ConstructorParameterBinding.
            </summary>
      <param name="ci">ConstructorInfo to bind.</param>
      <param name="availableParameters">Available parameters.</param>
      <param name="context">Context in which to construct instance.</param>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Instantiate">
      <summary>
            Invoke the constructor with the parameter bindings.
            </summary>
      <returns>The constructed instance.</returns>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.ToString">
      <summary>Returns a System.String that represents the current System.Object.</summary>
      <returns>A System.String that represents the current System.Object.</returns>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.TargetConstructor">
      <summary>
            The constructor on the target type. The actual constructor used
            might differ, e.g. if using a dynamic proxy.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.CanInstantiate">
      <summary>
            True if the binding is valid.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Description">
      <summary>
            Describes the constructor parameter binding.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.IConstructorSelector">
      <summary>
            Selects the best constructor from a set of available constructors.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.IConstructorSelector.SelectConstructorBinding(Autofac.Core.Activators.Reflection.ConstructorParameterBinding[])">
      <summary>
            Selects the best constructor from the available constructors.
            </summary>
      <param name="constructorBindings">Available constructors.</param>
      <returns>The best constructor.</returns>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector">
      <summary>
            Selects a constructor based on its signature.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector.#ctor(System.Type[])">
      <summary>
            Match constructors with the provided signature.
            </summary>
      <param name="signature">Signature to match.</param>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector.SelectConstructorBinding(Autofac.Core.Activators.Reflection.ConstructorParameterBinding[])">
      <summary>
            Selects the best constructor from the available constructors.
            </summary>
      <param name="constructorBindings">Available constructors.</param>
      <returns>The best constructor.</returns>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.AtLeastOneBindingRequired">
      <summary>
              Looks up a localized string similar to At least one binding must be provided in order to select a constructor..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.RequiredConstructorNotAvailable">
      <summary>
              Looks up a localized string similar to The required constructor on type '{0}'  with signature '{1}' is unavailable..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.TooManyConstructorsMatch">
      <summary>
              Looks up a localized string similar to More than one constructor matches the signature '{0}'..
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.MostParametersConstructorSelector">
      <summary>
            Selects the constructor with the most parameters.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.MostParametersConstructorSelector.SelectConstructorBinding(Autofac.Core.Activators.Reflection.ConstructorParameterBinding[])">
      <summary>
            Selects the best constructor from the available constructors.
            </summary>
      <param name="constructorBindings">Available constructors.</param>
      <returns>The best constructor.</returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException">A single unambiguous match could not be chosen.</exception>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.ReflectionActivator">
      <summary>
            Uses reflection to activate instances of a type.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.ReflectionActivator.#ctor(System.Type,Autofac.Core.Activators.Reflection.IConstructorFinder,Autofac.Core.Activators.Reflection.IConstructorSelector,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Create an activator for the provided type.
            </summary>
      <param name="implementationType">Type to activate.</param>
      <param name="constructorFinder">Constructor finder.</param>
      <param name="constructorSelector">Constructor selector.</param>
      <param name="configuredParameters">Parameters configured explicitly for this instance.</param>
      <param name="configuredProperties">Properties configured explicitly for this instance.</param>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.ReflectionActivator.ActivateInstance(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Activate an instance in the provided context.
            </summary>
      <param name="context">Context in which to activate instances.</param>
      <param name="parameters">Parameters to the instance.</param>
      <returns>The activated instance.</returns>
      <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivator.ConstructorFinder">
      <summary>
            The constructor finder.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivator.ConstructorSelector">
      <summary>
            The constructor selector.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.ReflectionActivatorResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.NoConstructorsAvailable">
      <summary>
              Looks up a localized string similar to No constructors on type '{0}' can be found with the constructor finder '{1}'..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.NoConstructorsBindable">
      <summary>
              Looks up a localized string similar to None of the constructors found with '{0}' on type '{1}' can be invoked with the available services and parameters:{2}.
            </summary>
    </member>
    <member name="T:Autofac.Core.ConstantParameter">
      <summary>
            Base class for parameters that provide a constant value.
            </summary>
    </member>
    <member name="M:Autofac.Core.ConstantParameter.#ctor(System.Object,System.Predicate{System.Reflection.ParameterInfo})">
      <summary>
            Create a constant parameter that will apply to parameters matching
            the supplied predicate.
            </summary>
      <param name="value">
      </param>
      <param name="predicate">
      </param>
    </member>
    <member name="M:Autofac.Core.ConstantParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
      <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
      <param name="pi">Constructor, method, or property-mutator parameter.</param>
      <param name="context">The component context in which the value is being provided.</param>
      <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
      <returns>True if a value can be supplied; otherwise, false.</returns>
    </member>
    <member name="P:Autofac.Core.ConstantParameter.Value">
      <summary>
            The value of the parameter.
            </summary>
    </member>
    <member name="T:Autofac.IComponentContext">
      <summary>
            The context in which a service can be accessed or a component's
            dependencies resolved. Disposal of a context will dispose any owned
            components.
            </summary>
    </member>
    <member name="M:Autofac.IComponentContext.ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
      <param name="registration">The registration.</param>
      <param name="parameters">Parameters for the instance.</param>
      <returns>
            The component instance.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="P:Autofac.IComponentContext.ComponentRegistry">
      <summary>
            Associates services with the components that provide them.
            </summary>
    </member>
    <member name="T:Autofac.ILifetimeScope">
      <summary>
            An <see cref="T:Autofac.ILifetimeScope" /> tracks the instantiation of component instances.
            It defines a boundary in which instances are shared and configured.
            Disposing an <see cref="T:Autofac.ILifetimeScope" /> will dispose the components that were
            resolved through it.
            </summary>
      <example>
        <code>
            // See IContainer for definition of the container variable
            using (var requestScope = container.BeginLifetimeScope())
            {
                // Note that handler is resolved from requestScope, not
                // from the container:
                
                var handler = requestScope.Resolve&lt;IRequestHandler&gt;();
                handler.Handle(request);
                
                // When requestScope is disposed, all resources used in processing
                // the request will be released.
            }
            </code>
      </example>
      <remarks>
            All long-running applications should resolve components via an
            <see cref="T:Autofac.ILifetimeScope" />. Choosing the duration of the lifetime is application-
            specific. The standard Autofac WCF and ASP.NET/MVC integrations are already configured
            to create and release <see cref="T:Autofac.ILifetimeScope" />s as appropriate. For example, the
            ASP.NET integration will create and release an <see cref="T:Autofac.ILifetimeScope" /> per HTTP
            request.
            Most <see cref="T:Autofac.ILifetimeScope" /> functionality is provided by extension methods
            on the inherited <see cref="T:Autofac.IComponentContext" /> interface.
            </remarks>
      <seealso cref="T:Autofac.IContainer" />
      <seealso cref="T:Autofac.IComponentContext" />
      <seealso cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])" />
      <seealso cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerLifetimeScope" />
      <seealso cref="T:Autofac.Core.InstanceSharing" />
      <seealso cref="T:Autofac.Core.IComponentLifetime" />
    </member>
    <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope">
      <summary>
            Begin a new nested scope. Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope(System.Object)">
      <summary>
            Begin a new nested scope. Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <remarks>
            The components registered in the sub-scope will be treated as though they were
            registered in the root scope, i.e., SingleInstance() components will live as long
            as the root scope.
            </remarks>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <remarks>
            The components registered in the sub-scope will be treated as though they were
            registered in the root scope, i.e., SingleInstance() components will live as long
            as the root scope.
            </remarks>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="P:Autofac.ILifetimeScope.Disposer">
      <summary>
            The disposer associated with this <see cref="T:Autofac.ILifetimeScope" />.
            Component instances can be associated with it manually if required.
            </summary>
      <remarks>Typical usage does not require interaction with this member- it
            is used when extending the container.</remarks>
    </member>
    <member name="P:Autofac.ILifetimeScope.Tag">
      <summary>
            The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.
            </summary>
      <remarks>Tags allow a level in the lifetime hierarchy to be identified.
            In most applications, tags are not necessary.</remarks>
      <seealso cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])" />
    </member>
    <member name="E:Autofac.ILifetimeScope.ChildLifetimeScopeBeginning">
      <summary>
            Fired when a new scope based on the current scope is beginning.
            </summary>
    </member>
    <member name="E:Autofac.ILifetimeScope.CurrentScopeEnding">
      <summary>
            Fired when this scope is ending.
            </summary>
    </member>
    <member name="E:Autofac.ILifetimeScope.ResolveOperationBeginning">
      <summary>
            Fired when a resolve operation is beginning in this scope.
            </summary>
    </member>
    <member name="T:Autofac.IContainer">
      <summary>
            Creates, wires dependencies and manages lifetime for a set of components.
            Most instances of <see cref="T:Autofac.IContainer" /> are created 
            by a <see cref="T:Autofac.ContainerBuilder" />.
            </summary>
      <example>
        <code>
            // See ContainerBuilder for the definition of the builder variable
            using (var container = builder.Build())
            {
                var program = container.Resolve&lt;Program&gt;();
                program.Run();
            }
            </code>
      </example>
      <remarks>
            Most <see cref="T:Autofac.IContainer" /> functionality is provided by extension methods
            on the inherited <see cref="T:Autofac.IComponentContext" /> interface.
            </remarks>
      <seealso cref="T:Autofac.ILifetimeScope" />
      <seealso cref="T:Autofac.IComponentContext" />
      <seealso cref="T:Autofac.ResolutionExtensions" />
      <seealso cref="T:Autofac.ContainerBuilder" />
    </member>
    <member name="T:Autofac.Core.Container">
      <summary>
            Standard container implementation.
            </summary>
    </member>
    <member name="M:Autofac.Core.Container.#ctor">
      <summary>
            Create a new container.
            </summary>
    </member>
    <member name="M:Autofac.Core.Container.BeginLifetimeScope">
      <summary>
            Begin a new sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Container.BeginLifetimeScope(System.Object)">
      <summary>
            Begin a new sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Container.BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Container.BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Container.ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
      <param name="registration">The registration.</param>
      <param name="parameters">Parameters for the instance.</param>
      <returns>
            The component instance.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.Core.Container.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Autofac.Core.Container.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">An object that specifies the type of service object 
            to get.</param>
      <returns>
            A service object of type <paramref name="serviceType" />.-or- null if there is 
            no service object of type <paramref name="serviceType" />.
            </returns>
    </member>
    <member name="P:Autofac.Core.Container.Disposer">
      <summary>
            The disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
    </member>
    <member name="P:Autofac.Core.Container.Tag">
      <summary>
            Tag applied to the lifetime scope.
            </summary>
      <remarks>The tag applied to this scope and the contexts generated when
            it resolves component dependencies.</remarks>
    </member>
    <member name="P:Autofac.Core.Container.ComponentRegistry">
      <summary>
            Associates services with the components that provide them.
            </summary>
    </member>
    <member name="E:Autofac.Core.Container.ChildLifetimeScopeBeginning">
      <summary>
            Fired when a new scope based on the current scope is beginning.
            </summary>
    </member>
    <member name="E:Autofac.Core.Container.CurrentScopeEnding">
      <summary>
            Fired when this scope is ending.
            </summary>
    </member>
    <member name="E:Autofac.Core.Container.ResolveOperationBeginning">
      <summary>
            Fired when a resolve operation is beginning in this scope.
            </summary>
    </member>
    <member name="T:Autofac.Core.DependencyResolutionException">
      <summary>
            Base exception type thrown whenever the dependency resolution process fails. This is a fatal
            exception, as Autofac is unable to 'roll back' changes to components that may have already
            been made during the operation. For example, 'on activated' handlers may have already been
            fired, or 'single instance' components partially constructed.
            </summary>
    </member>
    <member name="M:Autofac.Core.DependencyResolutionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DependencyResolutionException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Autofac.Core.DependencyResolutionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DependencyResolutionException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="P:Autofac.Core.DependencyResolutionException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
            The error message that explains the reason for the exception, or an empty string("").
            </value>
    </member>
    <member name="T:Autofac.Core.IDisposer">
      <summary>
            Provided on an object that will dispose of other objects when it is
            itself disposed.
            </summary>
    </member>
    <member name="M:Autofac.Core.IDisposer.AddInstanceForDisposal(System.IDisposable)">
      <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
      <param name="instance">The instance.</param>
    </member>
    <member name="T:Autofac.Core.Disposer">
      <summary>
            Maintains a set of objects to dispose, and disposes them in the reverse order
            from which they were added when the Disposer is itself disposed.
            </summary>
    </member>
    <member name="F:Autofac.Core.Disposer._items">
      <summary>
            Contents all implement IDisposable.
            </summary>
    </member>
    <member name="M:Autofac.Core.Disposer.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Autofac.Core.Disposer.AddInstanceForDisposal(System.IDisposable)">
      <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
      <param name="instance">The instance.</param>
    </member>
    <member name="T:Autofac.Core.IComponentLifetime">
      <summary>
            Locates the lifetime to which instances of a component should be attached.
            </summary>
    </member>
    <member name="M:Autofac.Core.IComponentLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
      <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
      <param name="mostNestedVisibleScope">The most nested visible scope.</param>
      <returns>The scope for the component.</returns>
    </member>
    <member name="T:Autofac.Core.IModule">
      <summary>
            Represents a set of components and related functionality
            packaged together.
            </summary>
    </member>
    <member name="M:Autofac.Core.IModule.Configure(Autofac.Core.IComponentRegistry)">
      <summary>
            Apply the module to the component registry.
            </summary>
      <param name="componentRegistry">Component registry to apply configuration to.</param>
    </member>
    <member name="T:Autofac.Core.InstanceOwnership">
      <summary>
            Determines when instances supporting IDisposable are disposed.
            </summary>
    </member>
    <member name="F:Autofac.Core.InstanceOwnership.ExternallyOwned">
      <summary>
            The lifetime scope does not dispose the instances.
            </summary>
    </member>
    <member name="F:Autofac.Core.InstanceOwnership.OwnedByLifetimeScope">
      <summary>
            The instances are disposed when the lifetime scope is disposed.
            </summary>
    </member>
    <member name="T:Autofac.Core.InstanceSharing">
      <summary>
            Determines whether instances are shared within a lifetime scope.
            </summary>
    </member>
    <member name="F:Autofac.Core.InstanceSharing.None">
      <summary>
            Each request for an instance will return a new object.
            </summary>
    </member>
    <member name="F:Autofac.Core.InstanceSharing.Shared">
      <summary>
            Each request for an instance will return the same object.
            </summary>
    </member>
    <member name="T:Autofac.Core.ISharingLifetimeScope">
      <summary>
            Defines a nested structure of lifetimes.
            </summary>
    </member>
    <member name="M:Autofac.Core.ISharingLifetimeScope.GetOrCreateAndShare(System.Guid,System.Func{System.Object})">
      <summary>
            Try to retrieve an instance based on a GUID key. If the instance
            does not exist, invoke <paramref name="creator" /> to create it.
            </summary>
      <param name="id">Key to look up.</param>
      <param name="creator">Creation function.</param>
      <returns>An instance.</returns>
    </member>
    <member name="P:Autofac.Core.ISharingLifetimeScope.RootLifetimeScope">
      <summary>
            The root of the sharing hierarchy.
            </summary>
    </member>
    <member name="P:Autofac.Core.ISharingLifetimeScope.ParentLifetimeScope">
      <summary>
            The parent of this node of the hierarchy, or null.
            </summary>
    </member>
    <member name="T:Autofac.Core.Lifetime.CurrentScopeLifetime">
      <summary>
            Attaches the instance's lifetime to the current lifetime scope.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.CurrentScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
      <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
      <param name="mostNestedVisibleScope">The most nested visible scope.</param>
      <returns>The scope for the component.</returns>
    </member>
    <member name="T:Autofac.Core.Lifetime.LifetimeScope">
      <summary>
            Lifetime scope implementation.
            </summary>
    </member>
    <member name="F:Autofac.Core.Lifetime.LifetimeScope._synchRoot">
      <summary>
            Protects shared instances from concurrent access. Other members and the base class are threadsafe.
            </summary>
    </member>
    <member name="F:Autofac.Core.Lifetime.LifetimeScope.RootTag">
      <summary>
            The tag applied to root scopes when no other tag is specified.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.Lifetime.LifetimeScope,System.Object)">
      <summary>
            Create a lifetime scope for the provided components and nested beneath a parent.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <param name="componentRegistry">Components used in the scope.</param>
      <param name="parent">Parent scope.</param>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.#ctor(Autofac.Core.IComponentRegistry,System.Object)">
      <summary>
            Create a root lifetime scope for the provided components.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <param name="componentRegistry">Components used in the scope.</param>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.#ctor(Autofac.Core.IComponentRegistry)">
      <summary>
            Create a root lifetime scope for the provided components.
            </summary>
      <param name="componentRegistry">Components used in the scope.</param>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope">
      <summary>
            Begin a new anonymous sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Object)">
      <summary>
            Begin a new tagged sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new anonymous sub-scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
      <example>
            IContainer cr = // ...
            using (var lifetime = cr.BeginLifetimeScope(builder =&gt; {
                    builder.RegisterType&lt;Foo&gt;();
                    builder.RegisterType&lt;Bar&gt;().As&lt;IBar&gt;(); })
            {
                var foo = lifetime.Resolve&lt;Foo&gt;();
            }
            </example>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new tagged sub-scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
      <example>
            IContainer cr = // ...
            using (var lifetime = cr.BeginLifetimeScope("unitOfWork", builder =&gt; {
                    builder.RegisterType&lt;Foo&gt;();
                    builder.RegisterType&lt;Bar&gt;().As&lt;IBar&gt;(); })
            {
                var foo = lifetime.Resolve&lt;Foo&gt;();
            }
            </example>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
      <param name="registration">The registration.</param>
      <param name="parameters">Parameters for the instance.</param>
      <returns>
            The component instance.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(System.Guid,System.Func{System.Object})">
      <summary>
            Try to retrieve an instance based on a GUID key. If the instance
            does not exist, invoke <paramref name="creator" /> to create it.
            </summary>
      <param name="id">Key to look up.</param>
      <param name="creator">Creation function.</param>
      <returns>An instance.</returns>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <param name="serviceType">An object that specifies the type of service object 
            to get.</param>
      <returns>
            A service object of type <paramref name="serviceType" />.-or- null if there is 
            no service object of type <paramref name="serviceType" />.
            </returns>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScope.ParentLifetimeScope">
      <summary>
            The parent of this node of the hierarchy, or null.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScope.RootLifetimeScope">
      <summary>
            The root of the sharing hierarchy.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScope.Disposer">
      <summary>
            The disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScope.Tag">
      <summary>
            Tag applied to the lifetime scope.
            </summary>
      <remarks>The tag applied to this scope and the contexts generated when
            it resolves component dependencies.</remarks>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScope.ComponentRegistry">
      <summary>
            Associates services with the components that provide them.
            </summary>
    </member>
    <member name="E:Autofac.Core.Lifetime.LifetimeScope.ChildLifetimeScopeBeginning">
      <summary>
            Fired when a new scope based on the current scope is beginning.
            </summary>
    </member>
    <member name="E:Autofac.Core.Lifetime.LifetimeScope.CurrentScopeEnding">
      <summary>
            Fired when this scope is ending.
            </summary>
    </member>
    <member name="E:Autofac.Core.Lifetime.LifetimeScope.ResolveOperationBeginning">
      <summary>
            Fired when a resolve operation is beginning in this scope.
            </summary>
    </member>
    <member name="T:Autofac.Core.Lifetime.MatchingScopeLifetime">
      <summary>
            Attaches the component's lifetime to scopes matching a supplied expression.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.MatchingScopeLifetime.#ctor(System.Object[])">
      <summary>
            Match scopes by comparing tags for equality.
            </summary>
      <param name="lifetimeScopeTagsToMatch">The tags applied to matching scopes.</param>
    </member>
    <member name="M:Autofac.Core.Lifetime.MatchingScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
      <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
      <param name="mostNestedVisibleScope">The most nested visible scope.</param>
      <returns>The scope for the component.</returns>
    </member>
    <member name="T:Autofac.Core.Lifetime.MatchingScopeLifetimeResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.MatchingScopeNotFound">
      <summary>
              Looks up a localized string similar to No scope with a Tag matching '{0}' is visible from the scope in which the instance was requested. This generally indicates that a component registered as per-HTTP request is being requested by a SingleInstance() component (or a similar scenario.) Under the web integration always request dependencies from the DependencyResolver.Current or ILifetimeScopeProvider.RequestLifetime, never from the container itself..
            </summary>
    </member>
    <member name="T:Autofac.Core.Lifetime.RootScopeLifetime">
      <summary>
            Attaches the component's lifetime to the root scope.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.RootScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
      <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
      <param name="mostNestedVisibleScope">The most nested visible scope.</param>
      <returns>The scope for the component.</returns>
    </member>
    <member name="T:Autofac.Core.NamedPropertyParameter">
      <summary>
            A property identified by name. When applied to a reflection-based
            component, the name will be matched against property names.
            </summary>
    </member>
    <member name="M:Autofac.Core.NamedPropertyParameter.#ctor(System.String,System.Object)">
      <summary>
            Create a <see cref="T:Autofac.Core.NamedPropertyParameter" /> with the specified constant value.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The property value.</param>
    </member>
    <member name="P:Autofac.Core.NamedPropertyParameter.Name">
      <summary>
            The name of the property.
            </summary>
    </member>
    <member name="T:Autofac.Core.PreparingEventArgs">
      <summary>
            Fired before the activation process to allow parameters to be changed or an alternative
            instance to be provided.
            </summary>
    </member>
    <member name="M:Autofac.Core.PreparingEventArgs.#ctor(Autofac.IComponentContext,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.PreparingEventArgs" /> class.
            </summary>
      <param name="context">The context.</param>
      <param name="component">The component.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="P:Autofac.Core.PreparingEventArgs.Context">
      <summary>
            The context in which the activation is occurring.
            </summary>
    </member>
    <member name="P:Autofac.Core.PreparingEventArgs.Component">
      <summary>
            The component providing the instance being activated.
            </summary>
    </member>
    <member name="P:Autofac.Core.PreparingEventArgs.Parameters">
      <summary>
            The parameters supplied to the activator.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentNotRegisteredException">
      <summary>
            A service was requested that cannot be provided by the container. To avoid this exception, either register a component
            to provide the required service, check for service registration using IsRegistered(), or use the ResolveOptional()
            method to resolve an optional dependency.
            </summary>
      <remarks>This exception is fatal. See <see cref="T:Autofac.Core.DependencyResolutionException" /> for more information.</remarks>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(Autofac.Core.Service)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" /> class.
            </summary>
      <param name="service">The service.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(Autofac.Core.Service,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" /> class.
            </summary>
      <param name="service">The service.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.Message">
      <summary>
              Looks up a localized string similar to The requested service '{0}' has not been registered. To avoid this exception, either register a component to provide the service, check for service registration using IsRegistered(), or use the ResolveOptional() method to resolve an optional dependency..
            </summary>
    </member>
    <member name="T:Autofac.Core.ComponentRegisteredEventArgs">
      <summary>
            Information about the ocurrence of a component being registered
            with a container.
            </summary>
    </member>
    <member name="M:Autofac.Core.ComponentRegisteredEventArgs.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)">
      <summary>
            Create a new instance with a valid container and component registration.
            </summary>
      <param name="registry">The container into which the registration 
            was made.</param>
      <param name="componentRegistration">The component registration.</param>
    </member>
    <member name="P:Autofac.Core.ComponentRegisteredEventArgs.ComponentRegistry">
      <summary>
            The container into which the registration was made.
            </summary>
    </member>
    <member name="P:Autofac.Core.ComponentRegisteredEventArgs.ComponentRegistration">
      <summary>
            The component registration.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentRegistration">
      <summary>
            Describes a logical component within the container.
            </summary>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.#ctor(System.Guid,Autofac.Core.IInstanceActivator,Autofac.Core.IComponentLifetime,Autofac.Core.InstanceSharing,Autofac.Core.InstanceOwnership,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Create a new component registration.
            </summary>
      <param name="id">Unique identifier for the component.</param>
      <param name="activator">Activator used to activate instances.</param>
      <param name="lifetime">Determines how the component will be associated with its lifetime.</param>
      <param name="sharing">Whether the component is shared within its lifetime scope.</param>
      <param name="ownership">Whether the component instances are disposed at the end of their lifetimes.</param>
      <param name="services">Services the component provides.</param>
      <param name="metadata">Data associated with the component.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.#ctor(System.Guid,Autofac.Core.IInstanceActivator,Autofac.Core.IComponentLifetime,Autofac.Core.InstanceSharing,Autofac.Core.InstanceOwnership,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object},Autofac.Core.IComponentRegistration)">
      <summary>
            Create a new component registration.
            </summary>
      <param name="id">Unique identifier for the component.</param>
      <param name="activator">Activator used to activate instances.</param>
      <param name="lifetime">Determines how the component will be associated with its lifetime.</param>
      <param name="sharing">Whether the component is shared within its lifetime scope.</param>
      <param name="ownership">Whether the component instances are disposed at the end of their lifetimes.</param>
      <param name="services">Services the component provides.</param>
      <param name="metadata">Data associated with the component.</param>
      <param name="target">The component registration upon which this registration is based.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.RaisePreparing(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter}@)">
      <summary>
            Called by the container when an instance is required.
            </summary>
      <param name="context">The context in which the instance will be activated.</param>
      <param name="parameters">Parameters for activation.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.RaiseActivating(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object@)">
      <summary>
            Called by the container once an instance has been constructed.
            </summary>
      <param name="context">The context in which the instance was activated.</param>
      <param name="parameters">The parameters supplied to the activator.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.RaiseActivated(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object)">
      <summary>
            Called by the container once an instance has been fully constructed, including
            any requested objects that depend on the instance.
            </summary>
      <param name="context">The context in which the instance was activated.</param>
      <param name="parameters">The parameters supplied to the activator.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.ToString">
      <summary>
            Describes the component in a human-readable form.
            </summary>
      <returns>A description of the component.</returns>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Target">
      <summary>
            The component registration upon which this registration is based.
            If this registration was created directly by the user, returns this.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Id">
      <summary>
            A unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Activator">
      <summary>
            The activator used to create instances.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Lifetime">
      <summary>
            The lifetime associated with the component.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Sharing">
      <summary>
            Whether the component instances are shared or not.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Ownership">
      <summary>
            Whether the instances of the component should be disposed by the container.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Services">
      <summary>
            The services provided by the component.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Metadata">
      <summary>
            Additional data associated with the component.
            </summary>
    </member>
    <member name="E:Autofac.Core.Registration.ComponentRegistration.Preparing">
      <summary>
            Fired when a new instance is required. The instance can be
            provided in order to skip the regular activator, by setting the Instance property in
            the provided event arguments.
            </summary>
    </member>
    <member name="E:Autofac.Core.Registration.ComponentRegistration.Activating">
      <summary>
            Fired when a new instance is being activated. The instance can be
            wrapped or switched at this time by setting the Instance property in
            the provided event arguments.
            </summary>
    </member>
    <member name="E:Autofac.Core.Registration.ComponentRegistration.Activated">
      <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
    </member>
    <member name="F:Autofac.Core.Resolving.CircularDependencyDetector.MaxResolveDepth">
      <summary>
            Catch circular dependencies that are triggered by post-resolve processing (e.g. 'OnActivated')
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.CircularDependencyDetectorResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.CircularDependency">
      <summary>
              Looks up a localized string similar to Circular component dependency detected: {0}..
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.MaxDepthExceeded">
      <summary>
              Looks up a localized string similar to Probable circular dependency between factory-scoped components. Chain includes '{0}'.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.IResolveOperation">
      <summary>
            An <see cref="T:Autofac.Core.Resolving.IResolveOperation" /> is a component context that sequences and monitors the multiple
            activations that go into producing a single requested object graph.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.IResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Get or create and share an instance of <paramref name="registration" /> in the <paramref name="currentOperationScope" />.
            </summary>
      <param name="currentOperationScope">The scope in the hierarchy in which the operation will begin.</param>
      <param name="registration">The component to resolve.</param>
      <param name="parameters">Parameters for the component.</param>
      <returns>The component instance.</returns>
    </member>
    <member name="E:Autofac.Core.Resolving.IResolveOperation.CurrentOperationEnding">
      <summary>
            Raised when the entire operation is complete.
            </summary>
    </member>
    <member name="E:Autofac.Core.Resolving.IResolveOperation.InstanceLookupBeginning">
      <summary>
            Raised when an instance is looked up within the operation.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.ResolveOperation">
      <summary>
            A <see cref="T:Autofac.Core.Resolving.ResolveOperation" /> is a component context that sequences and monitors the multiple
            activations that go into producing a single requested object graph.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperation.#ctor(Autofac.Core.ISharingLifetimeScope)">
      <summary>
            Create an instance of <see cref="T:Autofac.Core.Resolving.ResolveOperation" /> in the provided scope.
            </summary>
      <param name="mostNestedLifetimeScope">The most nested scope in which to begin the operation. The operation
            can move upward to less nested scopes as components with wider sharing scopes are activated</param>
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperation.ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
      <param name="registration">The registration.</param>
      <param name="parameters">Parameters for the instance.</param>
      <returns>
            The component instance.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperation.Execute(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Execute the complete resolve operation.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Continue building the object graph by instantiating <paramref name="registration" /> in the
            current <paramref name="currentOperationScope" />.
            </summary>
      <param name="currentOperationScope">The current scope of the operation.</param>
      <param name="registration">The component to activate.</param>
      <param name="parameters">The parameters for the component.</param>
      <returns>The resolved instance.</returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperation.ComponentRegistry">
      <summary>
            Associates services with the components that provide them.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.ResolveOperationResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationResources.ExceptionDuringResolve">
      <summary>
              Looks up a localized string similar to An exception was thrown while executing a resolve operation. See the InnerException for details..
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationResources.MaxDepthExceeded">
      <summary>
              Looks up a localized string similar to Probable circular dependency between factory-scoped components. Chain includes '{0}'.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationResources.TemporaryContextDisposed">
      <summary>
              Looks up a localized string similar to This resolve operation has already ended. When registering components using lambdas, the IComponentContext 'c' parameter to the lambda cannot be stored. Instead, either resolve IComponentContext again from 'c', or resolve a Func&lt;&gt; based factory to create subsequent components from..
            </summary>
    </member>
    <member name="T:Autofac.Core.TypedService">
      <summary>
            Identifies a service according to a type to which it can be assigned.
            </summary>
    </member>
    <member name="M:Autofac.Core.TypedService.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.TypedService" /> class.
            </summary>
      <param name="serviceType">Type of the service.</param>
    </member>
    <member name="M:Autofac.Core.TypedService.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:Autofac.Core.TypedService.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Autofac.Core.TypedService.ChangeType(System.Type)">
      <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType" /> as the <see cref="P:Autofac.Core.TypedService.ServiceType" />.
            </summary>
      <param name="newType">The new service type.</param>
      <returns>A new service with the service type.</returns>
    </member>
    <member name="P:Autofac.Core.TypedService.ServiceType">
      <summary>
            Gets the type of the service.
            </summary>
      <value>The type of the service.</value>
    </member>
    <member name="P:Autofac.Core.TypedService.Description">
      <summary>
            Gets a human-readable description of the service.
            </summary>
      <value>The description.</value>
    </member>
    <member name="T:Autofac.Core.UniqueService">
      <summary>
            A handy unique service identifier type - all instances will be regarded as unequal.
            </summary>
    </member>
    <member name="M:Autofac.Core.UniqueService.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.UniqueService" /> class.
            </summary>
    </member>
    <member name="M:Autofac.Core.UniqueService.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.UniqueService" /> class.
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="M:Autofac.Core.UniqueService.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:Autofac.Core.UniqueService.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Autofac.Core.UniqueService.Description">
      <summary>
            Provides a programmer-readable description of the identifying feature of the service.
            </summary>
      <value>
      </value>
    </member>
    <member name="M:Autofac.Features.Collections.CollectionRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericRegistrationSource">
      <summary>
            Generates activators for open generic types.
            </summary>
    </member>
    <member name="T:Autofac.Features.OwnedInstances.Owned`1">
      <summary>
            Represents a dependency that can be released by the dependent component.
            </summary>
      <typeparam name="T">The service provided by the dependency.</typeparam>
      <remarks>
        <para>
            Autofac automatically provides instances of <see cref="T:Autofac.Features.OwnedInstances.Owned`1" /> whenever the
            service <typeparamref name="T" /> is registered.
            </para>
        <para>
            It is not necessary for <typeparamref name="T" />, or the underlying component, to implement <see cref="T:System.IDisposable" />.
            Disposing of the <see cref="T:Autofac.Features.OwnedInstances.Owned`1" /> object is the correct way to handle cleanup of the dependency,
            as this will dispose of any other components created indirectly as well.
            </para>
        <para>
            When <see cref="T:Autofac.Features.OwnedInstances.Owned`1" /> is resolved, a new <see cref="T:Autofac.ILifetimeScope" /> is created for the
            underlying <typeparamref name="T" />, and tagged with the service matching <typeparamref name="T" />,
            generally a <see cref="T:Autofac.Core.TypedService" />. This means that shared instances can be tied to this
            scope by registering them as InstancePerMatchingLifetimeScope(new TypedService(typeof(T))).
            </para>
      </remarks>
      <example>
            The component D below is disposable and implements IService:
            <code>
            public class D : IService, IDisposable
            {
              // ...
            }
            </code>
            The dependent component C can dispose of the D instance whenever required by taking a dependency on
            <see cref="T:Autofac.Features.OwnedInstances.Owned`1" />:
            <code>
            public class C
            {
              IService _service;
              
              public C(Owned&lt;IService&gt; service)
              {
                _service = service;
              }
              
              void DoWork()
              {
                _service.Value.DoSomething();
              }
              
              void OnFinished()
              {
                _service.Dispose();
              }
            }
            </code>
            In general, rather than depending on <see cref="T:Autofac.Features.OwnedInstances.Owned`1" /> directly, components will depend on
            System.Func&lt;Owned&lt;T&gt;&gt; in order to create and dispose of other components as required.
            </example>
    </member>
    <member name="M:Autofac.Features.OwnedInstances.Owned`1.#ctor(`0,System.IDisposable)">
      <summary>
            Create an instance of <see cref="T:Autofac.Features.OwnedInstances.Owned`1" />.
            </summary>
      <param name="value">The value representing the instance.</param>
      <param name="lifetime">An IDisposable interface through which ownership can be released.</param>
    </member>
    <member name="M:Autofac.Features.OwnedInstances.Owned`1.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Autofac.Features.OwnedInstances.Owned`1.Value">
      <summary>
            The owned value.
            </summary>
    </member>
    <member name="T:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource">
      <summary>
            Generates registrations for services of type <see cref="T:Autofac.Features.OwnedInstances.Owned`1" /> whenever the service
            T is available.
            </summary>
    </member>
    <member name="M:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
    </member>
    <member name="T:Autofac.IStartable">
      <summary>
            When implemented by a component, an instance of the component will be resolved
            and started as soon as the container is built. Autofac will not call the Start()
            method when subsequent instances are resolved. If this behavior is required, use
            an <code>OnActivated()</code> event handler instead.
            </summary>
      <remarks>
            For equivalent "Stop" functionality, implement <see cref="T:System.IDisposable" />. Autofac
            will always dispose a component before any of its dependencies (except in the presence
            of circular dependencies, in which case the components in the cycle are disposed in
            reverse-construction order.)
            </remarks>
    </member>
    <member name="M:Autofac.IStartable.Start">
      <summary>
            Perform once-off startup processing.
            </summary>
    </member>
    <member name="T:Autofac.Module">
      <summary>
            Base class for user-defined modules. Modules can add a set of releated components
            to a container (<see cref="M:Autofac.Module.Load(Autofac.ContainerBuilder)" />) or attach cross-cutting functionality
            to other components (<see cref="M:Autofac.Module.AttachToComponentRegistration(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)" />.
            Modules are given special support in the XML configuration feature - see
            http://code.google.com/p/autofac/wiki/StructuringWithModules.
            </summary>
      <remarks>Provides a user-friendly way to implement <see cref="T:Autofac.Core.IModule" />
            via <see cref="T:Autofac.ContainerBuilder" />.</remarks>
      <example>
            Defining a module:
            <code>
            public class DataAccessModule : Module
            {
                public string ConnectionString { get; set; }
                
                public override void Load(ContainerBuilder moduleBuilder)
                {
                    moduleBuilder.RegisterGeneric(typeof(MyRepository&lt;&gt;))
                        .As(typeof(IRepository&lt;&gt;))
                        .InstancePerMatchingLifetimeScope(WebLifetime.Request);
                    
                    moduleBuilder.Register(c =&gt; new MyDbConnection(ConnectionString))
                        .As&lt;IDbConnection&gt;()
                        .InstancePerMatchingLifetimeScope(WebLifetime.Request);
                }
            }
            </code>
            Using the module:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterModule(new DataAccessModule { ConnectionString = "..." });
            var container = builder.Build();
            var customers = container.Resolve&lt;IRepository&lt;Customer&gt;&gt;();
            </code></example>
    </member>
    <member name="M:Autofac.Module.Configure(Autofac.Core.IComponentRegistry)">
      <summary>
            Apply the module to the component registry.
            </summary>
      <param name="componentRegistry">Component registry to apply configuration to.</param>
    </member>
    <member name="M:Autofac.Module.Load(Autofac.ContainerBuilder)">
      <summary>
            Override to add registrations to the container.
            </summary>
      <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
      <param name="builder">The builder through which components can be
            registered.</param>
    </member>
    <member name="M:Autofac.Module.AttachToComponentRegistration(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)">
      <summary>
            Override to attach module-specific functionality to a
            component registration.
            </summary>
      <remarks>This method will be called for all existing <i>and future</i> component
            registrations - ordering is not important.</remarks>
      <param name="componentRegistry">The component registry.</param>
      <param name="registration">The registration to attach functionality to.</param>
    </member>
    <member name="M:Autofac.Module.AttachToRegistrationSource(Autofac.Core.IComponentRegistry,Autofac.Core.IRegistrationSource)">
      <summary>
            Override to perform module-specific processing on a registration source.
            </summary>
      <remarks>This method will be called for all existing <i>and future</i> sources
            - ordering is not important.</remarks>
      <param name="componentRegistry">The component registry into which the source was added.</param>
      <param name="registrationSource">The registration source.</param>
    </member>
    <member name="P:Autofac.Module.ThisAssembly">
      <summary>
            The assembly in which the concrete module type is located. To avoid bugs whereby deriving from a module will
            change the target assembly, this property can only be used by modules that inherit directly from
            <see cref="T:Autofac.Module" />.
            </summary>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.ExternallyOwned">
      <summary>
            Configure the component so that instances are never disposed by the container.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.OwnedByLifetimeScope">
      <summary>
            Configure the component so that instances that support IDisposable are
            disposed by the container (default.)
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerDependency">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets a new, unique instance (default.)
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.SingleInstance">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets the same, shared instance.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerLifetimeScope">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a single ILifetimeScope gets the same, shared instance. Dependent components in
            different lifetime scopes will get different instances.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object[])">
      <summary>
            Configure the component so that every dependent component or call to Resolve() within
            a ILifetimeScope tagged with any of the provided tags value gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the tagged scope will
            share the parent's instance. If no appropriately tagged scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="lifetimeScopeTag">Tag applied to matching lifetime scopes.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned``1">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned(System.Type)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned``1(System.Object)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <param name="serviceKey">Key to associate with the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned(System.Object,System.Type)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.As``1">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.As``2">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService1">Service type.</typeparam>
      <typeparam name="TService2">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.As``3">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService1">Service type.</typeparam>
      <typeparam name="TService2">Service type.</typeparam>
      <typeparam name="TService3">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.As(System.Type[])">
      <summary>
            Configure the services that the component will provide.
            </summary>
      <param name="services">Service types to expose.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.As(Autofac.Core.Service[])">
      <summary>
            Configure the services that the component will provide.
            </summary>
      <param name="services">Services to expose.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.Named(System.String,System.Type)">
      <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
      <param name="serviceName">Named service to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.Named``1(System.String)">
      <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
      <param name="serviceName">Named service to associate with the component.</param>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.Keyed(System.Object,System.Type)">
      <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.Keyed``1(System.Object)">
      <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.OnPreparing(System.Action{Autofac.Core.PreparingEventArgs})">
      <summary>
            Add a handler for the Preparing event. This event allows manipulating of the parameters
            that will be provided to the component.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.OnActivating(System.Action{Autofac.Core.IActivatingEventArgs{`0}})">
      <summary>
            Add a handler for the Activating event.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.OnActivated(System.Action{Autofac.Core.IActivatedEventArgs{`0}})">
      <summary>
            Add a handler for the Activated event.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.PropertiesAutowired(Autofac.PropertyWiringOptions)">
      <summary>
            Configure the component so that any properties whose types are registered in the
            container will be wired to instances of the appropriate service.
            </summary>
      <param name="wiringFlags">Set wiring options such as circular dependency wiring support.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.WithMetadata(System.String,System.Object)">
      <summary>
            Associates data with the component.
            </summary>
      <param name="key">Key by which the data can be located.</param>
      <param name="value">The data value.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.WithMetadata(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>
            Associates data with the component.
            </summary>
      <param name="properties">The extended properties to associate with the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.WithMetadata``1(System.Action{Autofac.Builder.MetadataConfiguration{``0}})">
      <summary>
            Associates data with the component.
            </summary>
      <typeparam name="TMetadata">A type with properties whose names correspond to the
            property names to configure.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilder`3.ActivatorData">
      <summary>
            The activator data.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilder`3.RegistrationStyle">
      <summary>
            The registration style.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilder`3.RegistrationData">
      <summary>
            The registration data.
            </summary>
    </member>
    <member name="T:Autofac.Builder.RegistrationData">
      <summary>
            Data common to all registrations made in the container, both direct (IComponentRegistration)
            and dynamic (IRegistrationSource.)
            </summary>
    </member>
    <member name="M:Autofac.Builder.RegistrationData.#ctor(Autofac.Core.Service)">
      <summary>
            Construct a RegistrationData instance.
            </summary>
      <param name="defaultService">The default service that will be used if no others
            are added.</param>
    </member>
    <member name="M:Autofac.Builder.RegistrationData.AddServices(System.Collections.Generic.IEnumerable{Autofac.Core.Service})">
      <summary>
            Add multiple services for the registration, overriding the default.
            </summary>
      <param name="services">The services to add.</param>
      <remarks>If an empty collection is specified, this will still
            clear the default service.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationData.AddService(Autofac.Core.Service)">
      <summary>
            Add a service to the registration, overriding the default.
            </summary>
      <param name="service">The service to add.</param>
    </member>
    <member name="M:Autofac.Builder.RegistrationData.CopyFrom(Autofac.Builder.RegistrationData,System.Boolean)">
      <summary>
            Copies the contents of another RegistrationData object into this one.
            </summary>
      <param name="that">The data to copy.</param>
      <param name="includeDefaultService">When true, the default service
            will be changed to that of the other.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="that" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Autofac.Builder.RegistrationData.ClearServices">
      <summary>
            Empties the configured services.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.Services">
      <summary>
            The services explicitly assigned to the component.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.Ownership">
      <summary>
            The instance ownership assigned to the component.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.Lifetime">
      <summary>
            The lifetime assigned to the component.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.Sharing">
      <summary>
            The sharing mode assigned to the component.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.Metadata">
      <summary>
            Extended properties assigned to the component.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.PreparingHandlers">
      <summary>
            Handlers for the Preparing event.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.ActivatingHandlers">
      <summary>
            Handlers for the Activating event.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.ActivatedHandlers">
      <summary>
            Handlers for the Activated event.
            </summary>
    </member>
    <member name="T:Autofac.RegistrationExtensions">
      <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder" /> type.
            </summary>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterModule(Autofac.ContainerBuilder,Autofac.Core.IModule)">
      <summary>
            Add a module to the container.
            </summary>
      <param name="builder">The builder to register the module with.</param>
      <param name="module">The module to add.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterModule``1(Autofac.ContainerBuilder)">
      <summary>
            Add a module to the container.
            </summary>
      <param name="builder">The builder to register the module with.</param>
      <typeparam name="TModule">The module to add.</typeparam>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterAssemblyModules(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
      <summary>
            Registers modules found in an assembly.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="assemblies">The assemblies from which to register modules.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterAssemblyModules``1(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
      <summary>
            Registers modules found in an assembly.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="assemblies">The assemblies from which to register modules.</param>
      <typeparam name="TModule">The type of the module to add.</typeparam>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterAssemblyModules(Autofac.ContainerBuilder,System.Type,System.Reflection.Assembly[])">
      <summary>
            Registers modules found in an assembly.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="moduleType">The <see cref="T:System.Type" /> of the module to add.</param>
      <param name="assemblies">The assemblies from which to register modules.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterComponent(Autofac.ContainerBuilder,Autofac.Core.IComponentRegistration)">
      <summary>
            Add a component to the container.
            </summary>
      <param name="builder">The builder to register the component with.</param>
      <param name="registration">The component to add.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterSource(Autofac.ContainerBuilder,Autofac.Core.IRegistrationSource)">
      <summary>
            Add a registration source to the container.
            </summary>
      <param name="builder">The builder to register the registration source via.</param>
      <param name="registrationSource">The registration source to add.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterInstance``1(Autofac.ContainerBuilder,``0)">
      <summary>
            Register an instance as a component.
            </summary>
      <typeparam name="T">The type of the instance.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="instance">The instance to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>If no services are explicitly specified for the instance, the
            static type <typeparamref name="T" /> will be used as the default service (i.e. *not* <code>instance.GetType()</code>).</remarks>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterType``1(Autofac.ContainerBuilder)">
      <summary>
            Register a component to be created through reflection.
            </summary>
      <typeparam name="TImplementer">The type of the component implementation.</typeparam>
      <param name="builder">Container builder.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterType(Autofac.ContainerBuilder,System.Type)">
      <summary>
            Register a component to be created through reflection.
            </summary>
      <param name="implementationType">The type of the component implementation.</param>
      <param name="builder">Container builder.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Register``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0})">
      <summary>
            Register a delegate as a component.
            </summary>
      <typeparam name="T">The type of the instance.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="delegate">The delegate to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Register``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
      <summary>
            Register a delegate as a component.
            </summary>
      <typeparam name="T">The type of the instance.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="delegate">The delegate to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterGeneric(Autofac.ContainerBuilder,System.Type)">
      <summary>
            Register an un-parameterised generic type, e.g. Repository&lt;&gt;.
            Concrete types will be made as they are requested, e.g. with Resolve&lt;Repository&lt;int&gt;&gt;().
            </summary>
      <param name="builder">Container builder.</param>
      <param name="implementer">The open generic implementation type.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.PreserveExistingDefaults``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Specifies that the component being registered should only be made the default for services
            that have not already been registered.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.PreserveExistingDefaults``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1})">
      <summary>
            Specifies that the components being registered should only be made the default for services
            that have not already been registered.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterAssemblyTypes(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
      <summary>
            Register the types in an assembly.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="assemblies">The assemblies from which to register types.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterTypes(Autofac.ContainerBuilder,System.Type[])">
      <summary>
            Register the types in a list.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="types">The types to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Where``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Boolean})">
      <summary>
            Specifies a subset of types to register from a scanned assembly.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to filter types from.</param>
      <param name="predicate">Predicate that returns true for types to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Service}})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceMapping">Function mapping types to services.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,Autofac.Core.Service})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceMapping">Function mapping types to services.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Type})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceMapping">Function mapping types to services.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceMapping">Function mapping types to services.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsSelf``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Specifies that a type from a scanned assembly provides its own concrete type as a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsSelf``2(Autofac.Builder.IRegistrationBuilder{``0,``1,Autofac.Builder.SingleRegistrationStyle})">
      <summary>
            Specifies that a type provides its own concrete type as a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TConcreteActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsSelf``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ReflectionActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Specifies that a type provides its own concrete type as a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithMetadata``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
      <summary>
            Specify how a type from a scanned assembly provides metadata.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set metadata on.</param>
      <param name="metadataMapping">A function mapping the type to a list of metadata items.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithMetadataFrom``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Use the properties of an attribute (or interface implemented by an attribute) on the scanned type
            to provide metadata values.
            </summary>
      <remarks>Inherited attributes are supported; however, there must be at most one matching attribute
            in the inheritance chain.</remarks>
      <typeparam name="TAttribute">The attribute applied to the scanned type.</typeparam>
      <param name="registration">Registration to set metadata on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithMetadata``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Func{System.Type,System.Object})">
      <summary>
            Specify how a type from a scanned assembly provides metadata.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="metadataKey">Key of the metadata item.</param>
      <param name="metadataValueMapping">A function retrieving the value of the item from the component type.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Named``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Func{System.Type,System.String})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a named service.
            </summary>
      <param name="registration">Registration to set service mapping on.</param>
      <typeparam name="TService">Service type provided by the component.</typeparam>
      <param name="serviceNameMapping">Function mapping types to service names.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Named``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.String},System.Type)">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a named service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceType">Service type provided by the component.</param>
      <param name="serviceNameMapping">Function mapping types to service names.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Keyed``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Func{System.Type,System.Object})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a keyed service.
            </summary>
      <param name="registration">Registration to set service mapping on.</param>
      <typeparam name="TService">Service type provided by the component.</typeparam>
      <param name="serviceKeyMapping">Function mapping types to service keys.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Keyed``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Object},System.Type)">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a keyed service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceType">Service type provided by the component.</param>
      <param name="serviceKeyMapping">Function mapping types to service keys.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsImplementedInterfaces``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Specifies that a type from a scanned assembly is registered as providing all of its
            implemented interfaces.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsImplementedInterfaces``2(Autofac.Builder.IRegistrationBuilder{``0,``1,Autofac.Builder.SingleRegistrationStyle})">
      <summary>
            Specifies that a type is registered as providing all of its implemented interfaces.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TConcreteActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsImplementedInterfaces``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ReflectionActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Specifies that a type is registered as providing all of its implemented interfaces.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.FindConstructorsWith``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Activators.Reflection.IConstructorFinder)">
      <summary>
            Set the policy used to find candidate constructors on the implementation type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <param name="registration">Registration to set policy on.</param>
      <param name="constructorFinder">Policy to be used when searching for constructors.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.FindConstructorsWith``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Reflection.ConstructorInfo[]})">
      <summary>
            Set the policy used to find candidate constructors on the implementation type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <param name="registration">Registration to set policy on.</param>
      <param name="finder">A function that returns the constructors to select from.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.UsingConstructor``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type[])">
      <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <param name="registration">Registration to set policy on.</param>
      <param name="signature">Constructor signature to match.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.UsingConstructor``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Activators.Reflection.IConstructorSelector)">
      <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set policy on.</param>
      <param name="constructorSelector">Policy to be used when selecting a constructor.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.UsingConstructor``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <param name="registration">Registration to set policy on.</param>
      <param name="constructorSelector">Expression demonstrating how the constructor is called.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithParameter``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Object)">
      <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="parameterName">Name of a constructor parameter on the target type.</param>
      <param name="parameterValue">Value to supply to the parameter.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithParameter``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Parameter)">
      <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="parameter">The parameter to supply to the constructor.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithParameter``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Object})">
      <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="parameterSelector">A predicate selecting the parameter to set.</param>
      <param name="valueProvider">
      </param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithParameters``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Configure explicit values for constructor parameters.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="parameters">The parameters to supply to the constructor.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithProperty``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Object)">
      <summary>
            Configure an explicit value for a property.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set property on.</param>
      <param name="propertyName">Name of a property on the target type.</param>
      <param name="propertyValue">Value to supply to the property.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithProperty``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Parameter)">
      <summary>
            Configure an explicit value for a property.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="property">The property to supply.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithProperties``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Configure explicit values for properties.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="properties">The properties to supply.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Targeting``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.IComponentRegistration)">
      <summary>
            Sets the target of the registration (used for metadata generation.)
            </summary>
      <typeparam name="TLimit">The type of the limit.</typeparam>
      <typeparam name="TActivatorData">The type of the activator data.</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
      <param name="registration">Registration to set target for.</param>
      <param name="target">The target.</param>
      <returns>
            Registration builder allowing the registration to be configured.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registration" /> or <paramref name="target" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Autofac.RegistrationExtensions.OnRegistered``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{Autofac.Core.ComponentRegisteredEventArgs})">
      <summary>
            Provide a handler to be called when the component is registered.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration add handler to.</param>
      <param name="handler">The handler.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.OnRegistered``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1},System.Action{Autofac.Core.ComponentRegisteredEventArgs})">
      <summary>
            Provide a handler to be called when the component is registred.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <param name="registration">Registration add handler to.</param>
      <param name="handler">The handler.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsClosedTypesOf``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type)">
      <summary>
            Specifies that a type from a scanned assembly is registered if it implements an interface
            that closes the provided open generic interface type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="openGenericServiceType">The open generic interface or base class type for which implementations will be found.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AssignableTo``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type)">
      <summary>
            Filters the scanned types to include only those assignable to the provided
            type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to filter types from.</param>
      <param name="type">The type or interface which all classes must be assignable from.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AssignableTo``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Filters the scanned types to include only those assignable to the provided
            type.
            </summary>
      <param name="registration">Registration to filter types from.</param>
      <typeparam name="T">The type or interface which all classes must be assignable from.</typeparam>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Except``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Filters the scanned types to exclude the provided type.
            </summary>
      <param name="registration">Registration to filter types from.</param>
      <typeparam name="T">The concrete type to exclude.</typeparam>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Except``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Action{Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ConcreteReflectionActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
      <summary>
            Filters the scanned types to exclude the provided type, providing specific configuration for
            the excluded type.
            </summary>
      <param name="registration">Registration to filter types from.</param>
      <param name="customizedRegistration">Registration for the excepted type.</param>
      <typeparam name="T">The concrete type to exclude.</typeparam>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.InNamespaceOf``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Filters the scanned types to include only those in the namespace of the provided type
            or one of its sub-namespaces.
            </summary>
      <param name="registration">Registration to filter types from.</param>
      <typeparam name="T">A type in the target namespace.</typeparam>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.InNamespace``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String)">
      <summary>
            Filters the scanned types to include only those in the provided namespace
            or one of its sub-namespaces.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to filter types from.</param>
      <param name="ns">The namespace from which types will be selected.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterAdapter``2(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``1})">
      <summary>
            Adapt all components implementing service <typeparamref name="TFrom" />
            to provide <typeparamref name="TTo" /> using the provided <paramref name="adapter" />
            function.
            </summary>
      <typeparam name="TFrom">Service type to adapt from.</typeparam>
      <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom" />.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="adapter">Function adapting <typeparamref name="TFrom" /> to
            service <typeparamref name="TTo" />, given the context and parameters.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterAdapter``2(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1})">
      <summary>
            Adapt all components implementing service <typeparamref name="TFrom" />
            to provide <typeparamref name="TTo" /> using the provided <paramref name="adapter" />
            function.
            </summary>
      <typeparam name="TFrom">Service type to adapt from.</typeparam>
      <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom" />.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="adapter">Function adapting <typeparamref name="TFrom" /> to
            service <typeparamref name="TTo" />, given the context.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterAdapter``2(Autofac.ContainerBuilder,System.Func{``0,``1})">
      <summary>
            Adapt all components implementing service <typeparamref name="TFrom" />
            to provide <typeparamref name="TTo" /> using the provided <paramref name="adapter" />
            function.
            </summary>
      <typeparam name="TFrom">Service type to adapt from.</typeparam>
      <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom" />.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="adapter">Function adapting <typeparamref name="TFrom" /> to
            service <typeparamref name="TTo" />.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterGenericDecorator(Autofac.ContainerBuilder,System.Type,System.Type,System.Object,System.Object)">
      <summary>
            Decorate all components implementing open generic service <paramref name="decoratedServiceType" />.
            The <paramref name="fromKey" /> and <paramref name="toKey" /> parameters must be different values.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="decoratedServiceType">Service type being decorated. Must be an open generic type.</param>
      <param name="fromKey">Service key or name associated with the components being decorated.</param>
      <param name="toKey">Service key or name given to the decorated components.</param>
      <param name="decoratorType">The type of the decorator. Must be an open generic type, and accept a parameter
            of type <paramref name="decoratedServiceType" />, which will be set to the instance being decorated.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterDecorator``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``0},System.Object,System.Object)">
      <summary>
            Decorate all components implementing service <typeparamref name="TService" />
            using the provided <paramref name="decorator" /> function.
            The <paramref name="fromKey" /> and <paramref name="toKey" /> parameters must be different values.
            </summary>
      <typeparam name="TService">Service type being decorated.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService" />, given the context and parameters.</param>
      <param name="fromKey">Service key or name associated with the components being decorated.</param>
      <param name="toKey">Service key or name given to the decorated components.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterDecorator``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``0},System.Object,System.Object)">
      <summary>
            Decorate all components implementing service <typeparamref name="TService" />
            using the provided <paramref name="decorator" /> function.
            The <paramref name="fromKey" /> and <paramref name="toKey" /> parameters must be different values.
            </summary>
      <typeparam name="TService">Service type being decorated.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService" />, given the context.</param>
      <param name="fromKey">Service key or name associated with the components being decorated.</param>
      <param name="toKey">Service key or name given to the decorated components.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterDecorator``1(Autofac.ContainerBuilder,System.Func{``0,``0},System.Object,System.Object)">
      <summary>
            Decorate all components implementing service <typeparamref name="TService" />
            using the provided <paramref name="decorator" /> function.
            The <paramref name="fromKey" /> and <paramref name="toKey" /> parameters must be different values.
            </summary>
      <typeparam name="TService">Service type being decorated.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService" />.</param>
      <param name="fromKey">Service key or name associated with the components being decorated.</param>
      <param name="toKey">Service key or name given to the decorated components.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.OnRelease``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{``0})">
      <summary>
            Run a supplied action instead of disposing instances when they're no
            longer required.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TActivatorData">Activator data type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <param name="registration">Registration to set release action for.</param>
      <param name="releaseAction">An action to perform instead of disposing the instance.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Only one release action can be configured per registration.</remarks>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AutoActivate``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Wraps a registration in an implicit <see cref="T:Autofac.IStartable" /> and automatically
            activates the registration after the container is built.
            </summary>
      <param name="registration">Registration to set release action for.</param>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TActivatorData">Activator data type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
      <remarks>
        <para>
            While you can implement an <see cref="T:Autofac.IStartable" /> to perform some logic at
            container build time, sometimes you need to just activate a registered component and
            that's it. This extension allows you to automatically activate a registration on
            container build. No additional logic is executed and the resolved instance is not held
            so container disposal will end up disposing of the instance.
            </para>
        <para>
            Depending on how you register the lifetime of the component, you may get an exception
            when you build the container - components that are scoped to specific lifetimes (like
            ASP.NET components scoped to a request lifetime) will fail to resolve because the
            appropriate lifetime is not available.
            </para>
      </remarks>
    </member>
    <member name="T:Autofac.RegistrationExtensionsResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.RegistrationExtensionsResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.RegistrationExtensionsResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.RegistrationExtensionsResources.InstanceRegistrationsAreSingleInstanceOnly">
      <summary>
              Looks up a localized string similar to The instance  registration '{0}' can support SingleInstance() sharing only..
            </summary>
    </member>
    <member name="P:Autofac.RegistrationExtensionsResources.MetadataAttributeNotFound">
      <summary>
              Looks up a localized string similar to A metadata attribute of type {0} was not found on {1}..
            </summary>
    </member>
    <member name="P:Autofac.RegistrationExtensionsResources.MultipleMetadataAttributesSameType">
      <summary>
              Looks up a localized string similar to More than one metadata attribute of type {0} was found on {1}..
            </summary>
    </member>
    <member name="P:Autofac.RegistrationExtensionsResources.NoMatchingConstructorExists">
      <summary>
              Looks up a localized string similar to No matching constructor exists on type '{0}'..
            </summary>
    </member>
    <member name="T:Autofac.Builder.SimpleActivatorData">
      <summary>
            An activator builder with no parameters.
            </summary>
    </member>
    <member name="M:Autofac.Builder.SimpleActivatorData.#ctor(Autofac.Core.IInstanceActivator)">
      <summary>
            Return the provided activator.
            </summary>
      <param name="activator">The activator to return.</param>
    </member>
    <member name="P:Autofac.Builder.SimpleActivatorData.Activator">
      <summary>
            Gets the activator.
            </summary>
    </member>
    <member name="T:Autofac.Builder.SingleRegistrationStyle">
      <summary>
            Registration style for individual components.
            </summary>
    </member>
    <member name="P:Autofac.Builder.SingleRegistrationStyle.Id">
      <summary>
            The id used for the registration.
            </summary>
    </member>
    <member name="P:Autofac.Builder.SingleRegistrationStyle.RegisteredHandlers">
      <summary>
            Handlers to notify of the component registration event.
            </summary>
    </member>
    <member name="P:Autofac.Builder.SingleRegistrationStyle.PreserveDefaults">
      <summary>
            By default, new registrations override existing registrations as defaults.
            If set to true, new registrations will not change existing defaults.
            </summary>
    </member>
    <member name="P:Autofac.Builder.SingleRegistrationStyle.Target">
      <summary>
            The component upon which this registration is based.
            </summary>
    </member>
    <member name="T:Autofac.ContainerBuilder">
      <summary>
            Used to build an <see cref="T:Autofac.IContainer" /> from component registrations.
            </summary>
      <example>
        <code>
            var builder = new ContainerBuilder();
            
            builder.RegisterType&lt;Logger&gt;()
                .As&lt;ILogger&gt;()
                .SingleInstance();
            
            builder.Register(c =&gt; new MessageHandler(c.Resolve&lt;ILogger&gt;()));
            
            var container = builder.Build();
            // resolve components from container...
            </code>
      </example>
      <remarks>Most <see cref="T:Autofac.ContainerBuilder" /> functionality is accessed
            via extension methods in <see cref="T:Autofac.RegistrationExtensions" />.</remarks>
      <seealso cref="T:Autofac.IContainer" />
      <see cref="T:Autofac.RegistrationExtensions" />
    </member>
    <member name="M:Autofac.ContainerBuilder.RegisterCallback(System.Action{Autofac.Core.IComponentRegistry})">
      <summary>
            Register a callback that will be invoked when the container is configured.
            </summary>
      <remarks>This is primarily for extending the builder syntax.</remarks>
      <param name="configurationCallback">Callback to execute.</param>
    </member>
    <member name="M:Autofac.ContainerBuilder.Build(Autofac.Builder.ContainerBuildOptions)">
      <summary>
            Create a new container with the component registrations that have been made.
            </summary>
      <param name="options">Options that influence the way the container is initialised.</param>
      <remarks>
            Build can only be called once per <see cref="T:Autofac.ContainerBuilder" />
            - this prevents ownership issues for provided instances.
            Build enables support for the relationship types that come with Autofac (e.g.
            Func, Owned, Meta, Lazy, IEnumerable.) To exclude support for these types,
            first create the container, then call Update() on the builder.
            </remarks>
      <returns>A new container with the configured component registrations.</returns>
    </member>
    <member name="M:Autofac.ContainerBuilder.Update(Autofac.IContainer)">
      <summary>
            Configure an existing container with the component registrations
            that have been made.
            </summary>
      <remarks>
            Update can only be called once per <see cref="T:Autofac.ContainerBuilder" />
            - this prevents ownership issues for provided instances.
            </remarks>
      <param name="container">An existing container to make the registrations in.</param>
    </member>
    <member name="M:Autofac.ContainerBuilder.Update(Autofac.Core.IComponentRegistry)">
      <summary>
            Configure an existing registry with the component registrations
            that have been made.
            </summary>
      <remarks>
            Update can only be called once per <see cref="T:Autofac.ContainerBuilder" />
            - this prevents ownership issues for provided instances.
            </remarks>
      <param name="componentRegistry">An existing registry to make the registrations in.</param>
    </member>
    <member name="T:Autofac.NamedParameter">
      <summary>
            A parameter identified by name. When applied to a reflection-based
            component, <see cref="P:Autofac.NamedParameter.Name" /> will be matched against
            the name of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String)" />.
            </summary>
      <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new NamedParameter("amount", 123));
            </code></example>
    </member>
    <member name="M:Autofac.NamedParameter.#ctor(System.String,System.Object)">
      <summary>
            Create a <see cref="T:Autofac.NamedParameter" /> with the specified constant value.
            </summary>
      <param name="name">The name of the parameter.</param>
      <param name="value">The parameter value.</param>
    </member>
    <member name="P:Autofac.NamedParameter.Name">
      <summary>
            The name of the parameter.
            </summary>
    </member>
    <member name="T:Autofac.ParameterExtensions">
      <summary>
            Extension methods that simplify extraction of parameter values from
            an <see cref="T:System.Collections.Generic.IEnumerable`1" /> where T is <see cref="T:Autofac.Core.Parameter" />.
            Each method returns the first matching parameter value, or throws an exception if
            none is provided.
            </summary>
      <example>
            At configuration time, delegate registrations can retrieve parameter values using
            the methods <see cref="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String)" />, <see cref="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)" /> and <see cref="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})" />:
            <code>
            builder.Register((c, p) =&gt; new FtpClient(p.Named&lt;string&gt;("server")));
            </code>
            These parameters can be provided at resolution time:
            <code>
            container.Resolve&lt;FtpClient&gt;(new NamedParameter("server", "ftp.example.com"));
            </code>
            Alternatively, the parameters can be provided via a <i>Generated Factory</i> - http://code.google.com/p/autofac/wiki/DelegateFactories.
            </example>
    </member>
    <member name="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String)">
      <summary>
            Retrieve a named parameter value from a <see cref="T:Autofac.NamedParameter" /> instance.
            </summary>
      <typeparam name="T">The type to which the returned value will be cast.</typeparam>
      <param name="parameters">The available parameters to choose from.</param>
      <param name="name">The name of the parameter to select.</param>
      <returns>The value of the selected parameter.</returns>
      <seealso cref="T:Autofac.NamedParameter" />
    </member>
    <member name="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)">
      <summary>
            Retrieve a positional parameter value from a <see cref="T:Autofac.PositionalParameter" /> instance.
            </summary>
      <typeparam name="T">The type to which the returned value will be cast.</typeparam>
      <param name="parameters">The available parameters to choose from.</param>
      <param name="position">The zero-based position of the parameter to select.</param>
      <returns>The value of the selected parameter.</returns>
      <remarks>The position value is the one associated with the parameter when
            it was constructed, <b>not</b> its index into the <paramref name="parameters" />
            sequence.</remarks>
      <seealso cref="T:Autofac.PositionalParameter" />
    </member>
    <member name="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a typed parameter value from a <see cref="T:Autofac.TypedParameter" /> instance.
            </summary>
      <typeparam name="T">The type to which the returned value will be cast.</typeparam>
      <param name="parameters">The available parameters to choose from.</param>
      <returns>The value of the selected parameter.</returns>
      <seealso cref="T:Autofac.TypedParameter" />
    </member>
    <member name="T:Autofac.PositionalParameter">
      <summary>
            A parameter that is identified according to an integer representing its
            position in an argument list. When applied to a reflection-based
            component, <see cref="P:Autofac.PositionalParameter.Position" /> will be matched against
            the indices of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)" />.
            </summary>
      <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new PositionalParameter(0, 123));
            </code></example>
    </member>
    <member name="M:Autofac.PositionalParameter.#ctor(System.Int32,System.Object)">
      <summary>
            Construct a positional parameter with the specified constant value.
            </summary>
      <param name="position">The zero-based position of the parameter.</param>
      <param name="value">The parameter value.</param>
    </member>
    <member name="P:Autofac.PositionalParameter.Position">
      <summary>
            The zero-based position of the parameter.
            </summary>
    </member>
    <member name="T:Autofac.ResolutionExtensions">
      <summary>
            Adds syntactic convenience methods to the <see cref="T:Autofac.IComponentContext" /> interface.
            </summary>
    </member>
    <member name="M:Autofac.ResolutionExtensions.InjectProperties``1(Autofac.IComponentContext,``0)">
      <summary>
            Set any properties on <paramref name="instance" /> that can be
            resolved in the context.
            </summary>
      <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="instance">The instance to inject properties into.</param>
      <returns>
        <paramref name="instance" />.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.InjectUnsetProperties``1(Autofac.IComponentContext,``0)">
      <summary>
            Set any null-valued properties on <paramref name="instance" /> that can be
            resolved by the container.
            </summary>
      <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="instance">The instance to inject properties into.</param>
      <returns>
        <paramref name="instance" />.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed``1(Autofac.IComponentContext,System.String)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">Name of the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed``1(Autofac.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">Name of the service.</param>
      <param name="parameters">The parameters.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed``1(Autofac.IComponentContext,System.String,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">Name of the service.</param>
      <param name="parameters">The parameters.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveKeyed``1(Autofac.IComponentContext,System.Object)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">Key of the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveKeyed``1(Autofac.IComponentContext,System.Object,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">Key of the service.</param>
      <param name="parameters">The parameters.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveKeyed``1(Autofac.IComponentContext,System.Object,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">Key of the service.</param>
      <param name="parameters">The parameters.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.IComponentContext)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The service to retrieve.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <returns>The component instance that provides the service.</returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.IComponentContext,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.IComponentContext,System.Type)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceType">The service type.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.IComponentContext,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceType">The service type.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.IComponentContext,System.Type,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceType">The service type.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed(Autofac.IComponentContext,System.String,System.Type)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">The service name.</param>
      <param name="serviceType">Type of the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed(Autofac.IComponentContext,System.String,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceName">The service name.</param>
      <param name="serviceType">Type of the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed(Autofac.IComponentContext,System.String,System.Type,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceName">The service name.</param>
      <param name="serviceType">Type of the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveService(Autofac.IComponentContext,Autofac.Core.Service)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service to resolve.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveService(Autofac.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="service">The service to resolve.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveService(Autofac.IComponentContext,Autofac.Core.Service,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="service">The service to resolve.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.IComponentContext)">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.IComponentContext,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String)">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">The name of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceName">The name of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceName">The name of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object)">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">The name of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceKey">The name of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceKey">The key of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.IComponentContext,System.Type)">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceType">The type of the service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.IComponentContext,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceType">The type of the service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.IComponentContext,System.Type,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceType">The type of the service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalService(Autofac.IComponentContext,Autofac.Core.Service)">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalService(Autofac.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service.</param>
      <param name="parameters">Parameters for the service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalService(Autofac.IComponentContext,Autofac.Core.Service,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service.</param>
      <param name="parameters">Parameters for the service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegistered``1(Autofac.IComponentContext)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <typeparam name="TService">The service to test for the registration of.</typeparam>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegistered(Autofac.IComponentContext,System.Type)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceType">The service to test for the registration of.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithName(Autofac.IComponentContext,System.String,System.Type)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">The name of the service to test for the registration of.</param>
      <param name="serviceType">Type type of the service to test for the registration of.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithName``1(Autofac.IComponentContext,System.String)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">The name of the service to test for the registration of.</param>
      <typeparam name="TService">Type type of the service to test for the registration of.</typeparam>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithKey(Autofac.IComponentContext,System.Object,System.Type)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">The key of the service to test for the registration of.</param>
      <param name="serviceType">Type type of the service to test for the registration of.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithKey``1(Autofac.IComponentContext,System.Object)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">The key of the service to test for the registration of.</param>
      <typeparam name="TService">Type type of the service to test for the registration of.</typeparam>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegisteredService(Autofac.IComponentContext,Autofac.Core.Service)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service to test for the registration of.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolveService(Autofac.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service to resolve.</param>
      <param name="instance">The resulting component instance providing the service, or null.</param>
      <param name="parameters">The parameters.</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="context" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolveService(Autofac.IComponentContext,Autofac.Core.Service,System.Object@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service to resolve.</param>
      <param name="instance">The resulting component instance providing the service, or null.</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolve(Autofac.IComponentContext,System.Type,System.Object@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceType">The service type to resolve.</param>
      <param name="instance">The resulting component instance providing the service, or null.</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolve``1(Autofac.IComponentContext,``0@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <typeparam name="T">The service type to resolve.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="instance">The resulting component instance providing the service, or default(T).</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolveNamed(Autofac.IComponentContext,System.String,System.Type,System.Object@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">The name of the service to resolve.</param>
      <param name="serviceType">The type of the service to resolve.</param>
      <param name="instance">The resulting component instance providing the service, or null.</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolveKeyed(Autofac.IComponentContext,System.Object,System.Type,System.Object@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">The key of the service to resolve.</param>
      <param name="serviceType">The type of the service to resolve.</param>
      <param name="instance">The resulting component instance providing the service, or null.</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="T:Autofac.Core.ResolvedParameter">
      <summary>
            Flexible parameter type allows arbitrary values to be retrieved
            from the resolution context.
            </summary>
    </member>
    <member name="M:Autofac.Core.ResolvedParameter.#ctor(System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Object})">
      <summary>
            Create an instance of the ResolvedParameter class.
            </summary>
      <param name="predicate">A predicate that determines which parameters on a constructor will be supplied by this instance.</param>
      <param name="valueAccessor">A function that supplies the parameter value given the context.</param>
    </member>
    <member name="M:Autofac.Core.ResolvedParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
      <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
      <param name="pi">Constructor, method, or property-mutator parameter.</param>
      <param name="context">The component context in which the value is being provided.</param>
      <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
      <returns>True if a value can be supplied; otherwise, false.</returns>
    </member>
    <member name="M:Autofac.Core.ResolvedParameter.ForNamed``1(System.String)">
      <summary>
            Construct a <see cref="T:Autofac.Core.ResolvedParameter" /> that will match parameters of type
            <typeparamref name="TService" /> and resolve for those parameters an implementation
            registered with the name <paramref name="serviceName" />.
            </summary>
      <typeparam name="TService">The type of the parameter to match.</typeparam>
      <param name="serviceName">The name of the matching service to resolve.</param>
      <returns>A configured <see cref="T:Autofac.Core.ResolvedParameter" /> instance.</returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:Autofac.Core.ResolvedParameter.ForKeyed``1(System.Object)">
      <summary>
            Construct a <see cref="T:Autofac.Core.ResolvedParameter" /> that will match parameters of type
            <typeparamref name="TService" /> and resolve for those parameters an implementation
            registered with the key <paramref name="serviceKey" />.
            </summary>
      <typeparam name="TService">The type of the parameter to match.</typeparam>
      <param name="serviceKey">The key of the matching service to resolve.</param>
      <returns>A configured <see cref="T:Autofac.Core.ResolvedParameter" /> instance.</returns>
    </member>
    <member name="T:Autofac.TypedParameter">
      <summary>
            A parameter that can supply values to sites that exactly
            match a specified type. When applied to a reflection-based
            component, <see cref="P:Autofac.TypedParameter.Type" /> will be matched against
            the types of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})" />.
            </summary>
      <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new TypedParameter(typeof(int), 123));
            </code></example>
    </member>
    <member name="M:Autofac.TypedParameter.#ctor(System.Type,System.Object)">
      <summary>
            Create a typed parameter with the specified constant value.
            </summary>
      <param name="type">The exact type to match.</param>
      <param name="value">The parameter value.</param>
    </member>
    <member name="M:Autofac.TypedParameter.From``1(``0)">
      <summary>
            Shortcut for creating <see cref="T:Autofac.TypedParameter" /> 
            by using the <typeparamref name="T" /></summary>
      <typeparam name="T">type to be used for the parameter</typeparam>
      <param name="value">The parameter value.</param>
      <returns>new typed parameter</returns>
    </member>
    <member name="P:Autofac.TypedParameter.Type">
      <summary>
            The type against which targets are matched.
            </summary>
    </member>
    <member name="T:Autofac.TypeExtensions">
      <summary>
            Extends <see cref="T:System.Type" /> with methods that are useful in
            building scanning rules for <see cref="M:Autofac.RegistrationExtensions.RegisterAssemblyTypes(Autofac.ContainerBuilder,System.Reflection.Assembly[])" />.
            </summary>
    </member>
    <member name="M:Autofac.TypeExtensions.IsInNamespace(System.Type,System.String)">
      <summary>
            Returns true if this type is in the <paramref name="namespace" /> namespace
            or one of its sub-namespaces.
            </summary>
      <param name="this">The type to test.</param>
      <param name="namespace">The namespace to test.</param>
      <returns>True if this type is in the <paramref name="namespace" /> namespace
            or one of its sub-namespaces; otherwise, false.</returns>
    </member>
    <member name="M:Autofac.TypeExtensions.IsInNamespaceOf``1(System.Type)">
      <summary>
            Returns true if this type is in the same namespace as <typeparamref name="T" />
            or one of its sub-namespaces.
            </summary>
      <param name="this">The type to test.</param>
      <returns>True if this type is in the same namespace as <typeparamref name="T" />
            or one of its sub-namespaces; otherwise, false.</returns>
    </member>
    <member name="M:Autofac.TypeExtensions.IsClosedTypeOf(System.Type,System.Type)">
      <summary>Determines whether the candidate type supports any base or 
            interface that closes the provided generic type.</summary>
      <param name="this">
      </param>
      <param name="openGeneric">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Autofac.TypeExtensions.IsAssignableTo``1(System.Type)">
      <summary>
            Determines whether this type is assignable to <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The type to test assignability to.</typeparam>
      <returns>True if this type is assignable to references of type
            <typeparamref name="T" />; otherwise, False.</returns>
    </member>
    <member name="T:Autofac.TypeExtensionsResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.TypeExtensionsResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.TypeExtensionsResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.TypeExtensionsResources.NotOpenGenericType">
      <summary>
              Looks up a localized string similar to The type '{0}' is not an open generic class or interface type..
            </summary>
    </member>
    <member name="T:Autofac.Util.AssemblyExtensions">
      <summary>
            Extension methods for <see cref="T:System.Reflection.Assembly" />.
            </summary>
    </member>
    <member name="M:Autofac.Util.AssemblyExtensions.GetLoadableTypes(System.Reflection.Assembly)">
      <summary>
            Safely returns the set of loadable types from an assembly.
            </summary>
      <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> from which to load types.</param>
      <returns>
            The set of types from the <paramref name="assembly" />, or the subset
            of types that could be loaded if there was any error.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="assembly" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:Autofac.Util.Enforce">
      <summary>
            Helper methods used throughout the codebase.
            </summary>
    </member>
    <member name="M:Autofac.Util.Enforce.ArgumentNotNull``1(``0,System.String)">
      <summary>
            Enforce that an argument is not null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="value">
      </param>
      <param name="name">
      </param>
      <returns>
        <paramref name="value" />
      </returns>
    </member>
    <member name="M:Autofac.Util.Enforce.ArgumentElementNotNull``1(``0,System.String)">
      <summary>
            Enforce that sequence does not contain null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="value">The value.</param>
      <param name="name">The name.</param>
      <returns>
        <paramref name="value" />
      </returns>
    </member>
    <member name="M:Autofac.Util.Enforce.NotNull``1(``0)">
      <summary>
            Enforces that the provided object is non-null.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="value">The value.</param>
      <returns>
        <paramref name="value" />
      </returns>
    </member>
    <member name="M:Autofac.Util.Enforce.ArgumentNotNullOrEmpty(System.String,System.String)">
      <summary>
            Enforce that an argument is not null or empty. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
      <param name="value">The value.</param>
      <param name="description">The description.</param>
      <returns>
        <paramref name="value" />
      </returns>
    </member>
    <member name="M:Autofac.Util.Enforce.ArgumentTypeIsFunction(System.Type)">
      <summary>
            Enforce that the argument is a delegate type.
            </summary>
      <param name="delegateType">The type to test.</param>
    </member>
    <member name="T:Autofac.Util.EnforceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.CannotBeEmpty">
      <summary>
              Looks up a localized string similar to The argument '{0}' cannot be empty..
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.CannotBeNull">
      <summary>
              Looks up a localized string similar to The object of type '{0}' cannot be null..
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.DelegateReturnsVoid">
      <summary>
              Looks up a localized string similar to Type {0} returns void..
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.ElementCannotBeNull">
      <summary>
              Looks up a localized string similar to The sequence provided as argument '{0}' cannot contain null elements..
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.NotDelegate">
      <summary>
              Looks up a localized string similar to Type {0} is not a delegate type..
            </summary>
    </member>
    <member name="T:Autofac.Util.ReflectionExtensions">
      <summary>
            Extension methods for reflection-related types.
            </summary>
    </member>
    <member name="M:Autofac.Util.ReflectionExtensions.TryGetDeclaringProperty(System.Reflection.ParameterInfo,System.Reflection.PropertyInfo@)">
      <summary>
            Maps from a property-set-value parameter to the declaring property.
            </summary>
      <param name="pi">Parameter to the property setter.</param>
      <param name="prop">The property info on which the setter is specified.</param>
      <returns>True if the parameter is a property setter.</returns>
    </member>
    <member name="M:Autofac.Util.ReflectionExtensions.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Get a PropertyInfo object from an expression of the form
            x =&gt; x.P.
            </summary>
      <typeparam name="TDeclaring">Type declaring the property.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <param name="propertyAccessor">Expression mapping an instance of the
            declaring type to the property value.</param>
      <returns>Property info.</returns>
    </member>
    <member name="M:Autofac.Util.ReflectionExtensions.GetMethod``1(System.Linq.Expressions.Expression{System.Action{``0}})">
      <summary>
            Get the MethodInfo for a method called in the
            expression.
            </summary>
      <typeparam name="TDeclaring">Type on which the method is called.</typeparam>
      <param name="methodCallExpression">Expression demonstrating how the method appears.</param>
      <returns>The method info for the called method.</returns>
    </member>
    <member name="M:Autofac.Util.ReflectionExtensions.GetConstructor``1(System.Linq.Expressions.Expression{System.Func{``0}})">
      <summary>
            Gets the <see cref="T:System.Reflection.ConstructorInfo" /> for the new operation called in the expression.
            </summary>
      <typeparam name="TDeclaring">The type on which the constructor is called.</typeparam>
      <param name="constructorCallExpression">Expression demonstrating how the constructor is called.</param>
      <returns>The <see cref="T:System.Reflection.ConstructorInfo" /> for the called constructor.</returns>
    </member>
    <member name="M:Autofac.Util.ReflectionExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified member,
            and optionally inspects the ancestors of that member.
            </summary>
      <typeparam name="T">The type of attribute to search for.</typeparam>
      <param name="element">The member to inspect.</param>
      <param name="inherit">
        <c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
      <returns>A custom attribute that matches <typeparamref name="T" />, or <c>null</c> if no such attribute is found.</returns>
    </member>
    <member name="T:Autofac.Util.ReflectionExtensionsResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Util.ReflectionExtensionsResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Util.ReflectionExtensionsResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Util.ReflectionExtensionsResources.ExpressionNotConstructorCall">
      <summary>
              Looks up a localized string similar to The provided expression must be of the form () =&gt;new X(), but the provided expression was {0}..
            </summary>
    </member>
    <member name="P:Autofac.Util.ReflectionExtensionsResources.ExpressionNotMethodCall">
      <summary>
              Looks up a localized string similar to The provided expression must be of the form x =&gt;x.M(), but the provided expression was {0}..
            </summary>
    </member>
    <member name="P:Autofac.Util.ReflectionExtensionsResources.ExpressionNotPropertyAccessor">
      <summary>
              Looks up a localized string similar to The provided expression must be of the form x =&gt;x.P, but the provided expression was {0}..
            </summary>
    </member>
    <member name="T:Autofac.Util.ReleaseAction">
      <summary>
            Adapts an action to the <see cref="T:System.IDisposable" /> interface.
            </summary>
    </member>
    <member name="M:Autofac.Util.SequenceExtensions.JoinWith(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
            Joins the strings into one single string interspersing the elements with the separator (a-la
            System.String.Join()).
            </summary>
      <param name="elements">The elements.</param>
      <param name="separator">The separator.</param>
      <returns>The joined string.</returns>
    </member>
    <member name="M:Autofac.Util.SequenceExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Appends the item to the specified sequence.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="sequence">The sequence.</param>
      <param name="trailingItem">The trailing item.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Autofac.Util.SequenceExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Prepends the item to the specified sequence.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="sequence">The sequence.</param>
      <param name="leadingItem">The leading item.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Autofac.Util.TypeExtensions.GetTypesThatClose(System.Type,System.Type)">
      <summary>Returns the first concrete interface supported by the candidate type that
            closes the provided open generic service type.</summary>
      <param name="this">The type that is being checked for the interface.</param>
      <param name="openGeneric">The open generic type to locate.</param>
      <returns>The type of the interface.</returns>
    </member>
    <member name="M:Autofac.Util.TypeExtensions.FindAssignableTypesThatClose(System.Type,System.Type)">
      <summary>
            Looks for an interface on the candidate type that closes the provided open generic interface type.
            </summary>
      <param name="candidateType">The type that is being checked for the interface.</param>
      <param name="openGenericServiceType">The open generic service type to locate.</param>
      <returns>True if a closed implementation was found; otherwise false.</returns>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
    </member>
    <member name="T:Autofac.Util.ValidatedNotNullAttribute">
      <summary>
            Signal attribute for static analysis that indicates a helper method is
            validating arguments for <see langword="null" />.
            </summary>
    </member>
    <member name="T:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources.GeneratedFactoryRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Delegate Support (Func&lt;T&gt;and Custom Delegates).
            </summary>
    </member>
    <member name="T:Autofac.Configuration.AssemblyNameConverter">
      <summary>
            Type converter used for converting assembly name strings to assembly and back.
            </summary>
      <remarks>
        <para>
            This type is used in configuration settings where an assembly name is provided and needs to be
            handled on the back end as a strongly-typed, loaded assembly rather than a string.
            </para>
      </remarks>
    </member>
    <member name="M:Autofac.Configuration.AssemblyNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts an assembly name into an assembly.
            </summary>
      <param name="context">
            The configuration context.
            </param>
      <param name="culture">
            The configuration culture.
            </param>
      <param name="value">
            The assembly name to parse.
            </param>
      <returns>
            If <paramref name="value" /> is <see langword="null" />, empty, or whitespace this conversion
            will return <see langword="null" />. Otherwise, the assembly specified by the <paramref name="value" />
            will be loaded and returned.
            </returns>
    </member>
    <member name="M:Autofac.Configuration.AssemblyNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts an assembly into an assembly name.
            </summary>
      <param name="context">
            The configuration context.
            </param>
      <param name="culture">
            The configuration culture.
            </param>
      <param name="value">
            The assembly to convert.
            </param>
      <param name="destinationType">
            The destination type to which the assembly should be converted. (Ignored for configuration converters.)
            </param>
      <returns>
            If <paramref name="value" /> is <see langword="null" /> this conversion returns <see langword="null" />;
            otherwise the return value will be the full name of the assembly.
            </returns>
      <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="value" /> is not <see langword="null" /> and is not an <see cref="T:System.Reflection.Assembly" />.
            </exception>
    </member>
    <member name="T:Autofac.Configuration.Elements.ComponentElement">
      <summary>
            Element describing a component registration.
            </summary>
    </member>
    <member name="P:Autofac.Configuration.Elements.ComponentElement.Type">
      <summary>
            Gets the type of the component.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ComponentElement.Service">
      <summary>
            Gets the service exposed by the component. For multiple-service components,
            use the services element instead.
            </summary>
      <value>The service.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ComponentElement.MemberOf">
      <summary>
            Allows the component to be added to another composite component.
            </summary>
      <value>The name of the composite component.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ComponentElement.Name">
      <summary>
            Allows the component to be added to another composite component.
            </summary>
      <value>The name of the composite component.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ComponentElement.InstanceScope">
      <summary>
            Sets the scope of the component instances.
            </summary>
      <value>singleton (default,) factory or container.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ComponentElement.Ownership">
      <summary>
            Sets the ownership over the component instances.
            </summary>
      <value>container (default) or external.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ComponentElement.InjectProperties">
      <summary>
            Sets up property injection for the component instances. This uses the
            OnActivated event so that circular dependencies can be handled.
            </summary>
      <value>never (default,) all, unset.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ComponentElement.Services">
      <summary>
            Gets the services exposed by the component.
            </summary>
      <value>The services.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ComponentElement.Parameters">
      <summary>
            Gets the parameters used to construct the component.
            </summary>
      <value>The parameters.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ComponentElement.Properties">
      <summary>
            Gets the properties to be explicitly set on the component.
            </summary>
      <value>The explicit properties.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ComponentElement.Metadata">
      <summary>
            Gets the extended properties associated with the registration.
            </summary>
      <value>The extended properties.</value>
    </member>
    <member name="T:Autofac.Configuration.Elements.ConfigurationElementCollection`1">
      <summary>
            A collection of configuration elements.
            </summary>
      <typeparam name="TElementType">The type of the element type.</typeparam>
    </member>
    <member name="M:Autofac.Configuration.Elements.ConfigurationElementCollection`1.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ConfigurationElementCollection`1" /> class.
            </summary>
      <param name="elementName">Name of the element.</param>
    </member>
    <member name="M:Autofac.Configuration.Elements.ConfigurationElementCollection`1.IsElementName(System.String)">
      <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement" /> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
      <param name="elementName">The name of the element to verify.</param>
      <returns>
            true if the element exists in the collection; otherwise, false. The default is false.
            </returns>
    </member>
    <member name="M:Autofac.Configuration.Elements.ConfigurationElementCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Autofac.Configuration.Elements.ConfigurationElementCollection`1.CreateNewElement">
      <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
      <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
    </member>
    <member name="M:Autofac.Configuration.Elements.ConfigurationElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
      <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
      <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
    </member>
    <member name="P:Autofac.Configuration.Elements.ConfigurationElementCollection`1.ElementName">
      <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
      <returns>The name of the collection; otherwise, an empty string. The default is an empty string.</returns>
    </member>
    <member name="P:Autofac.Configuration.Elements.ConfigurationElementCollection`1.CollectionType">
      <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> of this collection.</returns>
    </member>
    <member name="T:Autofac.Configuration.Elements.ComponentElementCollection">
      <summary>
            A collection of component elements.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.ComponentElementCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ComponentElementCollection" /> class.
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Core.ConfigurationModule">
      <summary>
            Base class for a configuration parsing/execution module.
            </summary>
      <remarks>
        <para>
            Derived module classes are responsible for reading in configuration settings and populating
            the <see cref="P:Autofac.Configuration.Core.ConfigurationModule.SectionHandler" /> property. The
            value there will be used in <see cref="M:Autofac.Configuration.Core.ConfigurationModule.Load(Autofac.ContainerBuilder)" /> to
            convert the configuration into container registrations.
            </para>
      </remarks>
      <seealso cref="T:Autofac.Configuration.ConfigurationSettingsReader" />
      <seealso cref="T:Autofac.Configuration.XmlFileReader" />
    </member>
    <member name="M:Autofac.Configuration.Core.ConfigurationModule.Load(Autofac.ContainerBuilder)">
      <summary>
            Executes the conversion of configuration data into component registrations.
            </summary>
      <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder" /> into which registrations will be placed.
            </param>
      <remarks>
        <para>
            This override uses the <see cref="P:Autofac.Configuration.Core.ConfigurationModule.ConfigurationRegistrar" />
            to convert the <see cref="P:Autofac.Configuration.Core.ConfigurationModule.SectionHandler" />
            into component registrations in the provided <paramref name="builder" />.
            </para>
        <para>
            If no specific <see cref="P:Autofac.Configuration.Core.ConfigurationModule.ConfigurationRegistrar" />
            is set, the default <see cref="T:Autofac.Configuration.ConfigurationRegistrar" /> type will be used.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown if the <see cref="P:Autofac.Configuration.Core.ConfigurationModule.SectionHandler" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Autofac.Configuration.Core.ConfigurationModule.ConfigurationRegistrar">
      <summary>
            Gets or sets the configuration registrar.
            </summary>
      <value>
            An <see cref="T:Autofac.Configuration.IConfigurationRegistrar" /> that will be used as the
            strategy for converting the <see cref="P:Autofac.Configuration.Core.ConfigurationModule.SectionHandler" />
            into component registrations. If this value is <see langword="null" />, the registrar
            will be a <see cref="T:Autofac.Configuration.ConfigurationRegistrar" />.
            </value>
    </member>
    <member name="P:Autofac.Configuration.Core.ConfigurationModule.SectionHandler">
      <summary>
            Gets the section handler.
            </summary>
      <value>
            The <see cref="T:Autofac.Configuration.SectionHandler" /> that will be converted into
            component registrations in a container.
            </value>
    </member>
    <member name="T:Autofac.Configuration.IConfigurationRegistrar">
      <summary>
            A service for adding configured registrations to a container.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.IConfigurationRegistrar.RegisterConfigurationSection(Autofac.ContainerBuilder,Autofac.Configuration.SectionHandler)">
      <summary>
            Registers the contents of a configuration section into a container builder.
            </summary>
      <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder" /> that should receive the configured registrations.
            </param>
      <param name="configurationSection">
            The <see cref="T:Autofac.Configuration.SectionHandler" /> containing the configured registrations.
            </param>
    </member>
    <member name="T:Autofac.Configuration.ConfigurationRegistrar">
      <summary>
            Default service for adding configured registrations to a container.
            </summary>
      <remarks>
        <para>
            This default implementation of <see cref="T:Autofac.Configuration.IConfigurationRegistrar" />
            processes <see cref="T:Autofac.Configuration.SectionHandler" /> contents into registrations into
            a <see cref="T:Autofac.ContainerBuilder" />. You may derive and override to extend the functionality
            or you may implement your own <see cref="T:Autofac.Configuration.IConfigurationRegistrar" />.
            </para>
      </remarks>
      <seealso cref="T:Autofac.Configuration.IConfigurationRegistrar" />
    </member>
    <member name="M:Autofac.Configuration.ConfigurationRegistrar.RegisterConfigurationSection(Autofac.ContainerBuilder,Autofac.Configuration.SectionHandler)">
      <summary>
            Registers the contents of a configuration section into a container builder.
            </summary>
      <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder" /> that should receive the configured registrations.
            </param>
      <param name="configurationSection">
            The <see cref="T:Autofac.Configuration.SectionHandler" /> containing the configured registrations.
            </param>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder" /> or <paramref name="configurationSection" /> is <see langword="null" />.
            </exception>
      <remarks>
        <para>
            This method is the primary entry point to configuration section registration. From here,
            the various modules, components, and referenced files get registered. You may override
            any of those behaviors for a custom registrar if you wish to extend registration behavior.
            </para>
      </remarks>
    </member>
    <member name="M:Autofac.Configuration.ConfigurationRegistrar.RegisterConfiguredComponents(Autofac.ContainerBuilder,Autofac.Configuration.SectionHandler)">
      <summary>
            Registers individual configured components into a container builder.
            </summary>
      <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder" /> that should receive the configured registrations.
            </param>
      <param name="configurationSection">
            The <see cref="T:Autofac.Configuration.SectionHandler" /> containing the configured registrations.
            </param>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder" /> or <paramref name="configurationSection" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if there is any issue in parsing the component configuration into registrations.
            </exception>
      <remarks>
        <para>
            This is where the individually configured component registrations get added to the <paramref name="builder" />.
            The <see cref="P:Autofac.Configuration.SectionHandler.Components" /> collection from the <paramref name="configurationSection" />
            get processed into individual registrations with associated lifetime scope, name, etc.
            </para>
        <para>
            You may influence the process by overriding this whole method or by overriding these individual
            parsing subroutines:
            </para>
        <list type="bullet">
          <item>
            <term>
              <see cref="M:Autofac.Configuration.ConfigurationRegistrar.SetLifetimeScope``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)" />
            </term>
          </item>
          <item>
            <term>
              <see cref="M:Autofac.Configuration.ConfigurationRegistrar.SetComponentOwnership``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)" />
            </term>
          </item>
          <item>
            <term>
              <see cref="M:Autofac.Configuration.ConfigurationRegistrar.SetInjectProperties``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)" />
            </term>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:Autofac.Configuration.ConfigurationRegistrar.RegisterConfiguredModules(Autofac.ContainerBuilder,Autofac.Configuration.SectionHandler)">
      <summary>
            Registers individual configured modules into a container builder.
            </summary>
      <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder" /> that should receive the configured registrations.
            </param>
      <param name="configurationSection">
            The <see cref="T:Autofac.Configuration.SectionHandler" /> containing the configured registrations.
            </param>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder" /> or <paramref name="configurationSection" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if there is any issue in parsing the module configuration into registrations.
            </exception>
      <remarks>
        <para>
            This is where the individually configured component registrations get added to the <paramref name="builder" />.
            The <see cref="P:Autofac.Configuration.SectionHandler.Modules" /> collection from the <paramref name="configurationSection" />
            get processed into individual modules which are instantiated and activated inside the <paramref name="builder" />.
            </para>
      </remarks>
    </member>
    <member name="M:Autofac.Configuration.ConfigurationRegistrar.RegisterReferencedFiles(Autofac.ContainerBuilder,Autofac.Configuration.SectionHandler)">
      <summary>
            Registers referenced configuration files into a container builder.
            </summary>
      <param name="builder">
            The <see cref="T:Autofac.ContainerBuilder" /> that should receive the configured registrations.
            </param>
      <param name="configurationSection">
            The <see cref="T:Autofac.Configuration.SectionHandler" /> containing the configured registrations.
            </param>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="builder" /> or <paramref name="configurationSection" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if there is any issue in processing the referenced files into registrations.
            </exception>
      <remarks>
        <para>
            This is where external files referenced in configuration get recursively loaded and added to the <paramref name="builder" />.
            The <see cref="P:Autofac.Configuration.SectionHandler.Files" /> collection from the <paramref name="configurationSection" />
            get processed into individual <see cref="T:Autofac.Configuration.SectionHandler" /> instances, each of which get
            registered with the <paramref name="builder" />.
            </para>
      </remarks>
    </member>
    <member name="M:Autofac.Configuration.ConfigurationRegistrar.SetInjectProperties``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)">
      <summary>
            Sets the property injection mode for the component.
            </summary>
      <param name="registrar">
            The component registration on which property injection mode is being set.
            </param>
      <param name="injectProperties">
            The <see cref="T:System.String" /> configuration value associated with property
            injection for this component registration.
            </param>
      <remarks>
        <para>
            By default, this implementation understands <see langword="null" />, empty,
            or <see langword="false" /> values (<c>false</c>, <c>0</c>, <c>no</c>)
            to mean "no property injection should occur" and <see langword="true" />
            values (<c>true</c>, <c>1</c>, <c>yes</c>) to mean "property injection
            should occur."
            </para>
        <para>
            You may override this method to extend the available grammar for property injection settings.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the value for <paramref name="injectProperties" /> is not part of the
            recognized grammar.
            </exception>
    </member>
    <member name="M:Autofac.Configuration.ConfigurationRegistrar.SetComponentOwnership``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)">
      <summary>
            Sets the ownership model for the component.
            </summary>
      <param name="registrar">
            The component registration on which the ownership model is being set.
            </param>
      <param name="ownership">
            The <see cref="T:System.String" /> configuration value associated with the
            ownership model for this component registration.
            </param>
      <remarks>
        <para>
            By default, this implementation understands <see langword="null" /> or empty
            values to be "default ownership model"; <c>lifetime-scope</c> or <c>LifetimeScope</c>
            is "owned by lifetime scope"; and <c>external</c> or <c>ExternallyOwned</c> is
            "externally owned."
            </para>
        <para>
            You may override this method to extend the available grammar for component ownership.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the value for <paramref name="ownership" /> is not part of the
            recognized grammar.
            </exception>
    </member>
    <member name="M:Autofac.Configuration.ConfigurationRegistrar.SetLifetimeScope``2(Autofac.Builder.IRegistrationBuilder{System.Object,``0,``1},System.String)">
      <summary>
            Sets the lifetime scope for the component.
            </summary>
      <param name="registrar">
            The component registration on which the lifetime scope is being set.
            </param>
      <param name="lifetimeScope">
            The <see cref="T:System.String" /> configuration value associated with the
            lifetime scope for this component registration.
            </param>
      <remarks>
        <para>
            By default, this implementation understands <see langword="null" /> or empty
            values to be "default ownership model"; <c>single-instance</c> or <c>SingleInstance</c>
            is singleton; <c>instance-per-lifetime-scope</c>, <c>InstancePerLifetimeScope</c>, <c>per-lifetime-scope</c>,
            or <c>PerLifetimeScope</c> is one instance per nested lifetime scope; and <c>instance-per-dependency</c>,
            <c>InstancePerDependency</c>, <c>per-dependency</c>, or <c>PerDependency</c> is
            one instance for each resolution call.
            </para>
        <para>
            You may override this method to extend the available grammar for lifetime scope.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="registrar" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the value for <paramref name="lifetimeScope" /> is not part of the
            recognized grammar.
            </exception>
    </member>
    <member name="M:Autofac.Configuration.ConfigurationRegistrar.LoadType(System.String,System.Reflection.Assembly)">
      <summary>
            Loads a type by name.
            </summary>
      <param name="typeName">
            Name of the <see cref="T:System.Type" /> to load. This may be a partial type name or a fully-qualified type name.
            </param>
      <param name="defaultAssembly">
            The default <see cref="T:System.Reflection.Assembly" /> to use in type resolution if <paramref name="typeName" />
            is a partial type name.
            </param>
      <returns>
            The resolved <see cref="T:System.Type" /> based on the specified name.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="typeName" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="typeName" /> is empty.
            </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the specified <paramref name="typeName" /> can't be resolved as a fully-qualified type name and
            isn't a partial type name for a <see cref="T:System.Type" /> found in the <paramref name="defaultAssembly" />.
            </exception>
    </member>
    <member name="T:Autofac.Configuration.ConfigurationSettingsReader">
      <summary>
            Configures containers based upon <c>app.config</c>/<c>web.config</c> settings.
            </summary>
      <remarks>
        <para>
            This module type uses standard .NET application configuration format files to initialize configuration
            settings. By default the standard <c>app.config</c>/<c>web.config</c> is used with a configuration
            section named <c>autofac</c>, but you can use the various constructors to override the file location
            or configuration section name.
            </para>
        <para>
            If you are storing your configuration settings in a raw XML file (without the additional
            <c>&lt;configuration /&gt;</c> wrapper and section definitions you normally see in .NET application
            configuration) you can use the <see cref="T:Autofac.Configuration.XmlFileReader" /> module to specify
            the XML file location directly.
            </para>
      </remarks>
      <see cref="T:Autofac.Configuration.XmlFileReader" />
      <see cref="T:Autofac.Configuration.SectionHandler" />
    </member>
    <member name="M:Autofac.Configuration.ConfigurationSettingsReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ConfigurationSettingsReader" /> class
            using the default application configuration file with a configuration section named <c>autofac</c>.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.ConfigurationSettingsReader.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ConfigurationSettingsReader" /> class
            using the default application configuration file and a named section.
            </summary>
      <param name="sectionName">
            The name of the configuration section corresponding to a <see cref="T:Autofac.Configuration.SectionHandler" />.
            </param>
    </member>
    <member name="M:Autofac.Configuration.ConfigurationSettingsReader.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ConfigurationSettingsReader" /> class
            using a named configuration file and section.
            </summary>
      <param name="sectionName">
            The name of the configuration section corresponding to a <see cref="T:Autofac.Configuration.SectionHandler" />.
            </param>
      <param name="configurationFile">
            The <c>app.config</c>/<c>web.config</c> format configuration file containing the
            named section.
            </param>
    </member>
    <member name="T:Autofac.Configuration.ConfigurationSettingsReaderResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.ArgumentMayNotBeEmpty">
      <summary>
              Looks up a localized string similar to The {0} may not be empty..
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.ConfigurationFileNotFound">
      <summary>
              Looks up a localized string similar to Unable to find specified configuration file..
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.InitializeSectionHandler">
      <summary>
              Looks up a localized string similar to You must initialize the section handler on the module before executing the load operation..
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.NoXmlInConfiguration">
      <summary>
              Looks up a localized string similar to No XML content nodes found in configuration. Check the XML reader to ensure configuration is in place..
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.SectionNotFound">
      <summary>
              Looks up a localized string similar to The configuration section '{0}' could not be read..
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.ServiceTypeMustBeSpecified">
      <summary>
              Looks up a localized string similar to If 'name' is specified, 'service' must also be specified (component name='{0}'.).
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.TypeConversionUnsupported">
      <summary>
              Looks up a localized string similar to Unable to convert object of type '{0}' to type '{1}'..
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.TypeNotFound">
      <summary>
              Looks up a localized string similar to The type '{0}' could not be found. It may require assembly qualification, e.g. "MyType, MyAssembly"..
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.UnrecognisedInjectProperties">
      <summary>
              Looks up a localized string similar to The value '{0}' is not valid for the inject-properties attribute. Valid values are 'yes' and 'no'..
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.UnrecognisedOwnership">
      <summary>
              Looks up a localized string similar to The value '{0}' is not valid for the ownership attribute. Valid values are 'lifetime-scope' (the default) and 'external'..
            </summary>
    </member>
    <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.UnrecognisedScope">
      <summary>
              Looks up a localized string similar to The value '{0}' is not valid for the instance-scope attribute. Valid values are 'single-instance', 'per-dependency' (the default) and 'per-lifetime-scope'..
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Elements.DictionaryElementCollection">
      <summary>
            Holds a dictionary of values for those properties/parameters that are a dictionary
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Elements.DictionaryElementCollection.DictionaryElementTypeConverter">
      <summary>
            Helps convert the configuration element into an actuall generic list
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.DictionaryElementCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.DictionaryElementCollection" /> class.
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Elements.ListElementCollection">
      <summary>
            Holds a list of values for those properties/parameters that are enumerable
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Elements.ListElementCollection.ListElementTypeConverter">
      <summary>
            Helps convert the configuration element into an actuall generic list
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.ListElementCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ListElementCollection" /> class.
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Util.Enforce">
      <summary>
            Helper methods used throughout the codebase.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Util.Enforce.ArgumentNotNull``1(``0,System.String)">
      <summary>
            Enforce that an argument is not null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="value">
      </param>
      <param name="name">
      </param>
      <returns>
        <paramref name="value" />
      </returns>
    </member>
    <member name="T:Autofac.Configuration.Elements.MetadataElement">
      <summary>
            Element describing a component property.
            </summary>
    </member>
    <member name="P:Autofac.Configuration.Elements.MetadataElement.Name">
      <summary>
            Gets the name of the property.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.MetadataElement.Value">
      <summary>
            Gets the value to be set (will be converted.)
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.MetadataElement.Type">
      <summary>
            Gets the type of the value.
            </summary>
      <value>The type of the value. Defaults to string if not specified.</value>
    </member>
    <member name="T:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1">
      <summary>
            Base for multi-valued configuration elements.
            </summary>
      <typeparam name="TElementType">
      </typeparam>
    </member>
    <member name="M:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1" /> class.
            </summary>
      <param name="elementName">Name of the element.</param>
      <param name="elementKey">The element key.</param>
    </member>
    <member name="M:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.IsElementName(System.String)">
      <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement" /> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
      <param name="elementName">The name of the element to verify.</param>
      <returns>
            true if the element exists in the collection; otherwise, false. The default is false.
            </returns>
    </member>
    <member name="M:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.CreateNewElement">
      <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
      <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
    </member>
    <member name="M:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
      <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
      <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
    </member>
    <member name="M:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.ElementName">
      <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
      <value>
      </value>
      <returns>The name of the collection; otherwise, an empty string. The default is an empty string.</returns>
    </member>
    <member name="P:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.CollectionType">
      <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
      <value>
      </value>
      <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> of this collection.</returns>
    </member>
    <member name="P:Autofac.Configuration.Elements.NamedConfigurationElementCollection`1.Item(System.Int32)">
      <summary>
            Gets or sets the TElementType at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Autofac.Configuration.Elements.MetadataElementCollection">
      <summary>
            Collection of extended property elements.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.MetadataElementCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.PropertyElementCollection" /> class.
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Elements.FileElement">
      <summary>
            Element describing an additional configuration file.
            </summary>
    </member>
    <member name="P:Autofac.Configuration.Elements.FileElement.Name">
      <summary>
            Gets the filename of the file.
            </summary>
      <value>The filename.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.FileElement.Section">
      <summary>
            Gets the section name of the section in the configuration
            file.
            </summary>
      <value>The section name.</value>
    </member>
    <member name="T:Autofac.Configuration.Elements.FileElementCollection">
      <summary>
            A collection of file elements.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.FileElementCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.FileElementCollection" /> class.
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Elements.ModuleElement">
      <summary>
            Element describing a module registration.
            </summary>
    </member>
    <member name="P:Autofac.Configuration.Elements.ModuleElement.Type">
      <summary>
            Gets the type of the module. Must expose <see cref="T:Autofac.Core.IModule" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ModuleElement.Parameters">
      <summary>
            Gets the parameters used to construct the component.
            </summary>
      <value>The parameters.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ModuleElement.Properties">
      <summary>
            Gets the properties to be explicitly set on the component.
            </summary>
      <value>The explicit properties.</value>
    </member>
    <member name="T:Autofac.Configuration.Elements.ModuleElementCollection">
      <summary>
            A collection of module elements.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.ModuleElementCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ModuleElementCollection" /> class.
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Elements.ParameterElement">
      <summary>
            Element describing a component constructor parameter.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.ParameterElement.CoerceValue">
      <summary>
            Get the value of this element
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Autofac.Configuration.Elements.ParameterElement.Name">
      <summary>
            Gets the name of the parameter.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ParameterElement.Value">
      <summary>
            Gets the value used to set the parameter (type will be converted.)
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ParameterElement.List">
      <summary>
            If this parameter's value is a list of values
            </summary>
    </member>
    <member name="P:Autofac.Configuration.Elements.ParameterElement.Dictionary">
      <summary>
            If this parameter's value is a dictionary
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Elements.ParameterElementCollection">
      <summary>
            A collection of parameter elements.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.ParameterElementCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ParameterElementCollection" /> class.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.ParameterElementCollection.ToParameters">
      <summary>
            Convert to the Autofac parameter type.
            </summary>
      <returns>The parameters represented by this collection.</returns>
    </member>
    <member name="T:Autofac.Configuration.Elements.PropertyElement">
      <summary>
            Element describing a component property.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.PropertyElement.CoerceValue">
      <summary>
            Get the value of this element
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Autofac.Configuration.Elements.PropertyElement.Name">
      <summary>
            Gets the name of the property.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.PropertyElement.Value">
      <summary>
            Gets the value to be set (will be converted.)
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.PropertyElement.List">
      <summary>
            If this property's value is a list of values
            </summary>
    </member>
    <member name="P:Autofac.Configuration.Elements.PropertyElement.Dictionary">
      <summary>
            If this property's value is a dictionary
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Elements.PropertyElementCollection">
      <summary>
            Collection of property elements.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.PropertyElementCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.PropertyElementCollection" /> class.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.PropertyElementCollection.ToParameters">
      <summary>
            Convert to the Autofac parameter type.
            </summary>
      <returns>The parameters represented by this collection.</returns>
    </member>
    <member name="T:Autofac.Configuration.SectionHandler">
      <summary>
            Section handler for Autofac configuration.
            </summary>
      <remarks>
        <para>
            This configuration section is used for XML-based configuration of an Autofac
            container. While it is primarily used from inside <c>app.config</c> or <c>web.config</c>
            files, you may also use it with other arbitrary XML files via the
            <see cref="M:Autofac.Configuration.SectionHandler.Deserialize(System.Xml.XmlReader)" /> helper method.
            </para>
      </remarks>
    </member>
    <member name="F:Autofac.Configuration.SectionHandler.DefaultSectionName">
      <summary>
            The default section name that will be searched for.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.SectionHandler.Deserialize(System.Xml.XmlReader)">
      <summary>
            Deserializes a configuration section handler from a specific block of XML.
            </summary>
      <param name="reader">
            The <see cref="T:System.Xml.XmlReader" /> used to read the XML configuration from the source.
            </param>
      <returns>
            A read/parsed <see cref="T:Autofac.Configuration.SectionHandler" /> based on the contents of the <paramref name="reader" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="reader" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if <paramref name="reader" /> does not contain XML configuration that can be parsed into
            a <see cref="T:Autofac.Configuration.SectionHandler" />.
            </exception>
    </member>
    <member name="M:Autofac.Configuration.SectionHandler.Deserialize(System.String)">
      <summary>
            Deserializes a configuration section handler from an XML configuration file.
            </summary>
      <param name="configurationFile">The path to the configuration file to parse.</param>
      <returns>
            A read/parsed <see cref="T:Autofac.Configuration.SectionHandler" /> based on the contents of the <paramref name="configurationFile" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="configurationFile" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="configurationFile" /> is empty.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the file indicated by <paramref name="configurationFile" /> can't be found.
            </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the configuration can't properly be deserialized from the file.
            </exception>
    </member>
    <member name="M:Autofac.Configuration.SectionHandler.Deserialize(System.String,System.String)">
      <summary>
            Deserializes a configuration section handler from an XML configuration file.
            </summary>
      <param name="configurationFile">The path to the configuration file to parse.</param>
      <param name="configurationSection">
            The name of the configuration section (if the <paramref name="configurationFile" /> is
            application configuration format); or <see langword="null" /> to use the default configuration
            section name <c>autofac</c> or try the <paramref name="configurationFile" /> as a raw XML file.
            </param>
      <returns>
            A read/parsed <see cref="T:Autofac.Configuration.SectionHandler" /> based on the contents of the <paramref name="configurationFile" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="configurationFile" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="configurationFile" /> is empty.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the file indicated by <paramref name="configurationFile" /> can't be found.
            </exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
            Thrown if the configuration can't properly be deserialized from the file.
            </exception>
    </member>
    <member name="M:Autofac.Configuration.SectionHandler.NormalizeConfigurationFilePath(System.String)">
      <summary>
            Checks the validity of a configuration file path and converts relative paths to absolute.
            </summary>
      <param name="configurationFile">
            The file path to check/normalize.
            </param>
      <returns>
            If <paramref name="configurationFile" /> is an absolute path, it is returned unchanged; otherwise
            it is made absolute relative to the current configuration location.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="configurationFile" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="configurationFile" /> is empty.
            </exception>
      <exception cref="T:System.IO.FileNotFoundException">
            Thrown if the file indicated by <paramref name="configurationFile" /> can't be found.
            </exception>
    </member>
    <member name="P:Autofac.Configuration.SectionHandler.Components">
      <summary>
            Gets the components to be registered.
            </summary>
      <value>
            A <see cref="T:Autofac.Configuration.Elements.ComponentElementCollection" /> with the list
            of individual service components that should be registered.
            </value>
    </member>
    <member name="P:Autofac.Configuration.SectionHandler.DefaultAssembly">
      <summary>
            Gets the default assembly to search for types in when not explicitly
            provided with the type name.
            </summary>
      <value>
            An <see cref="T:System.Reflection.Assembly" /> that should be used as the default assembly
            in type searches.
            </value>
    </member>
    <member name="P:Autofac.Configuration.SectionHandler.Files">
      <summary>
            Gets additional configuration files.
            </summary>
      <value>
            A <see cref="T:Autofac.Configuration.Elements.FileElementCollection" /> with the list
            of external/referenced configuration files.
            </value>
    </member>
    <member name="P:Autofac.Configuration.SectionHandler.Modules">
      <summary>
            Gets the modules to be registered.
            </summary>
      <value>
            A <see cref="T:Autofac.Configuration.Elements.ModuleElementCollection" /> with the list
            of modules that should be registered.
            </value>
    </member>
    <member name="T:Autofac.Configuration.Elements.ServiceElement">
      <summary>
            Element describing a service exposed by a component.
            </summary>
    </member>
    <member name="P:Autofac.Configuration.Elements.ServiceElement.Type">
      <summary>
            Gets the service type.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Autofac.Configuration.Elements.ServiceElement.Name">
      <summary>
            Gets the service name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="T:Autofac.Configuration.Elements.ServiceElementCollection">
      <summary>
            A collection of service elements.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Elements.ServiceElementCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.Elements.ServiceElementCollection" /> class.
            </summary>
    </member>
    <member name="T:Autofac.Configuration.Util.TypeManipulation">
      <summary>
            Some handy type conversion routines.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Util.TypeManipulation.ChangeToCompatibleType(System.Object,System.Type)">
      <summary>
            Does its best to convert whatever the value is into the destination
            type. Null in yields null out for value types and the default(T)
            for value types (this may change.)
            </summary>
      <param name="value">The value.</param>
      <param name="destinationType">Type of the destination.</param>
      <returns>An object of the destination type.</returns>
    </member>
    <member name="T:Autofac.Configuration.Elements.ListItemElement">
      <summary>
            Configuration for values in a list
            </summary>
    </member>
    <member name="P:Autofac.Configuration.Elements.ListItemElement.Key">
      <summary>
            Gets the key to be set (will be converted.)
            </summary>
    </member>
    <member name="P:Autofac.Configuration.Elements.ListItemElement.Value">
      <summary>
            Gets the value to be set (will be converted.)
            </summary>
      <value>The value.</value>
    </member>
    <member name="T:Autofac.Configuration.XmlFileReader">
      <summary>
            Configures containers based upon XML configuration settings that are not stored in .NET application configuration.
            </summary>
      <remarks>
        <para>
            This module type uses raw XML files to initialize configuration settings. These files are expected to have XML
            in them that can be deserialized into a <see cref="T:Autofac.Configuration.SectionHandler" />. This XML is the same format
            as you would see in a standard <c>app.config</c>/<c>web.config</c> for Autofac, but doesn't require the additional
            configuration section definition or other .NET application configuration XML around it.
            </para>
        <para>
            If you are storing your configuration settings in a .NET application configuration file
            (<c>app.config</c>/<c>web.config</c>) you can use the <see cref="T:Autofac.Configuration.ConfigurationSettingsReader" />
            module to read the settings right out of the configuration file without having to manually parse the XML.
            </para>
      </remarks>
      <see cref="T:Autofac.Configuration.ConfigurationSettingsReader" />
      <see cref="T:Autofac.Configuration.SectionHandler" />
    </member>
    <member name="M:Autofac.Configuration.XmlFileReader.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.XmlFileReader" /> class
            using a specified XML configuration file.
            </summary>
      <param name="fileName">
            The name of the configuration file containing XML that can deserialize into a <see cref="T:Autofac.Configuration.SectionHandler" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="fileName" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="fileName" /> is empty.
            </exception>
      <remarks>
        <para>
            Relative paths may be specified in relation to the current application folder (where you would normally
            find <c>app.config</c> or <c>web.config</c>).
            </para>
      </remarks>
    </member>
    <member name="T:Autofac.Configuration.Util.ReflectionExtensions">
      <summary>
            Extension methods for reflection-related types.
            </summary>
    </member>
    <member name="M:Autofac.Configuration.Util.ReflectionExtensions.TryGetDeclaringProperty(System.Reflection.ParameterInfo,System.Reflection.PropertyInfo@)">
      <summary>
            Maps from a property-set-value parameter to the declaring property.
            </summary>
      <param name="pi">Parameter to the property setter.</param>
      <param name="prop">The property info on which the setter is specified.</param>
      <returns>True if the parameter is a property setter.</returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader.State">
      <summary>
            Specifies the state of the reader.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Skip">
      <summary>
            Skips the children of the current token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
      <summary>
            Sets the current token.
            </summary>
      <param name="newToken">The new token.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the current token and value.
            </summary>
      <param name="newToken">The new token.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
      <summary>
            Sets the state based on current token type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
      <summary>
            Gets the current reader state.
            </summary>
      <value>The current reader state.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the reader is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.TokenType">
      <summary>
            Gets the type of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.ValueType">
      <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>
            A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
      <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
      <value>
        <c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
      <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
      <value>
        <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
      <summary>
            Writes the end of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
      <summary>
            Writes the end of an array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
      <summary>
            Writes the end constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
      <summary>
            Writes the end of the current Json object or array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the writer is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the writer is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Top">
      <summary>
            Gets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
      <summary>
            Gets the state of the writer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Path">
      <summary>
            Gets the path of the writer. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value that represents a BSON object id.
            </summary>
      <param name="value">The Object ID value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
      <summary>
            Writes a BSON regex.
            </summary>
      <param name="pattern">The regex pattern.</param>
      <param name="options">The regex options.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
      <summary>
            Represents a BSON Oid (object id).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
      <param name="value">The Oid value.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
      <summary>
            Gets or sets the value of the Oid.
            </summary>
      <value>The value of the Oid.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter">
      <summary>
            Converts an object to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.
            </summary>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
      <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
      <summary>
            Create a custom object
            </summary>
      <typeparam name="T">The object type to convert.</typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
      <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The created object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
      <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
      <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
      <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
      <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
      <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.RegexConverter">
      <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
      <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.GetEnumNameMap(System.Type)">
      <summary>
            A cached representation of the Enum string representation to respect per Enum field name.
            </summary>
      <param name="t">The type of the Enum.</param>
      <returns>A map of enum field name to either the field name, or the configured enum member name (<see cref="T:System.Runtime.Serialization.EnumMemberAttribute" />).</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
      <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
      <value>
        <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.ConstructorHandling">
      <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
      <summary>
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
      <summary>
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.VersionConverter">
      <summary>
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. "1.2.3.4").
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonContainerAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
      <summary>
            Gets or sets the title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
      <summary>
            Gets the collection's items converter.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
      <value>
        <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
      <value>
        <c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="T:Newtonsoft.Json.JsonException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.DateFormatHandling">
      <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
      <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
      <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateParseHandling">
      <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.None">
      <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
      <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
      <summary>
            Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
      <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
      <summary>
            Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime" />, convert to a local time if a time zone is specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
      <summary>
            Time zone information should be preserved when converting.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Formatting">
      <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.None">
      <summary>
            No special formatting is applied. This is the default.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.Indented">
      <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
      <summary>
            Represents a trace writer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
      <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener" /> instances.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
      <summary>
            Gets the underlying type for the contract.
            </summary>
      <value>The underlying type for the contract.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
      <summary>
            Gets or sets the type created during deserialization.
            </summary>
      <value>The type created during deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
      <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
      <value>Whether this type contract is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
      <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
      <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
      <value>The method called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
      <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
      <value>The method called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
      <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
      <value>The method called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
      <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
      <value>The method called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
      <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
      <value>The default creator method used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
      <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
      <value>
        <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
      <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The method called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
      <summary>
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
      <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
      <value>
        <c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
      <summary>
            Gets or sets the collection item type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
      <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
      <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
      <returns>An enumeration of the most recent trace messages.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> of the most recent trace messages.
            </summary>
      <returns>
            A <see cref="T:System.String" /> of the most recent trace messages.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.StringEscapeHandling">
      <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
      <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
      <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
      <summary>
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.IJsonLineInfo">
      <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JToken">
      <summary>
            Represents an abstract JSON token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
      <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>true if the tokens are equal; otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
      <summary>
            Adds the specified content immediately after this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
      <summary>
            Adds the specified content immediately before this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
      <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
      <returns>A collection of the ancestor tokens of this token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
      <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
      <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens before this token, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
      <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
      <typeparam name="T">The type to filter the child tokens on.</typeparam>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
      <summary>
            Removes this token from its parent.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Replaces this token with the specified token.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
      <summary>
            Returns the indented JSON for this token.
            </summary>
      <returns>
            The indented JSON for this token.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>The JSON for this token using the given formatting and converters.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte[]" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> to the <see cref="T:Newtonsoft.Json.Linq.JToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that matches the object path or a null reference if no matching token is found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> to the <see cref="T:Newtonsoft.Json.Linq.JToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that matches the object path.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
      <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
      <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
      <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
      <summary>
            Gets or sets the parent.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Root">
      <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Next">
      <summary>
            Gets the next sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
      <summary>
            Gets the previous sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JValue">
      <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Value">
      <summary>
            Gets or sets the underlying token value.
            </summary>
      <value>The underlying token value.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JRaw">
      <summary>
            Represents a raw JSON string.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
      <param name="rawJson">The raw json.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
      <param name="reader">The reader.</param>
      <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Required">
      <summary>
            Indicating whether a property is required.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Default">
      <summary>
            The property is not required. The default state.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.AllowNull">
      <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Always">
      <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
      <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
      <value>The ISerializable object constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
      <summary>
            Provides methods to get and set values.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
      <summary>
            Provides data for the Error event.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
      <param name="currentObject">The current object.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
      <summary>
            Gets the current object the error event is being raised against.
            </summary>
      <value>The current object the error event is being raised against.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
      <summary>
            Gets the error context.
            </summary>
      <value>The error context.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
      <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </summary>
      <param name="name">The name.</param>
      <param name="propertyType">Type of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
      <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
      <param name="component">The component to test for reset capability. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
      <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
      <returns>
            The value of a property for a given component.
            </returns>
      <param name="component">The component with the property for which to retrieve the value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
      <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
      <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
      <param name="component">The component with the property value that is to be set. 
                            </param>
      <param name="value">The new value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
      <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
      <param name="component">The component with the property to be examined for persistence. 
                            </param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
      <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
      <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
      <returns>
            true if the property is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
      <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
      <summary>
            Gets the hash code for the name of the member.
            </summary>
      <value>
      </value>
      <returns>
            The hash code for the name of the member.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
      <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
      <summary>
            Resolves a reference to its object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference to resolve.</param>
      <returns>The object that</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
      <summary>
            Gets the reference for the sepecified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to get a reference for.</param>
      <returns>The reference to the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
      <summary>
            Determines whether the specified object is referenced.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to test for a reference.</param>
      <returns>
        <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
      <summary>
            Adds a reference to the specified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference.</param>
      <param name="value">The object to reference.</param>
    </member>
    <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
      <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
      <summary>
            Do not preserve references when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
      <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
      <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
      <summary>
            Preserve references when serializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonArrayAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items
            </summary>
      <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
      <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
      <value>
        <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.DefaultValueHandling">
      <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
      <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable typesl; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
      <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the converter.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
      <summary>
            Gets the type of the converter.
            </summary>
      <value>The type of the converter.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonObjectAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
      <param name="memberSerialization">The member serialization.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
      <summary>
            Gets or sets the member serialization.
            </summary>
      <value>The member serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializerSettings">
      <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
      <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
      <value>Reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
      <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
      <value>Missing member handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
      <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
      <value>Null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
      <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
      <summary>
            Gets or sets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>The converters.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
      <value>The preserve references handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
      <value>The reference resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
      <value>The binder.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
      <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
      <value>The error handler called during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonValidatingReader">
      <summary>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
      <summary>
            Gets the text value of the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
      <summary>
            Gets the type of the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
      <summary>
            Gets the Common Language Runtime (CLR) type for the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
      <summary>
            Gets or sets the schema.
            </summary>
      <value>The schema.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
      <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
      <summary>
            Compares tokens to determine whether they are equal.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Newtonsoft.Json.MemberSerialization">
      <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
      <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
      <summary>
            Only members must be marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
      <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute" />
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> to false.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ObjectCreationHandling">
      <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
      <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
      <summary>
            Only reuse existing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
      <summary>
            Always create new objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
      <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
      <value>The date time styles used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
      <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
      <value>The date time format used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
      <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
      <value>The culture used when converting a date to and from JSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
      <summary>
            Converts XML to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="serializer">The calling serializer.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
      <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
      <param name="attributeName">Attribute name to test.</param>
      <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
      <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
      <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
      <value>The name of the deserialize root element.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
      <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
      <value>
        <c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
      <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
      <value>
        <c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Close">
      <summary>
            Changes the state to closed. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
      <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
      <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
      <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
      <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
      <value>Whether this property's value is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
      <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
      <value>
            	A value indicating whether this property is required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <c>TextWriter</c> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
      <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
      <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
      <summary>
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
      <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriterException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriterException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonReaderException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterCollection">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConvert">
      <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.True">
      <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.False">
      <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Null">
      <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
      <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
      <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
      <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NaN">
      <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
      <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
      <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
      <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
      <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
      <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
      <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
      <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
      <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
      <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
      <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
      <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
      <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
      <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
      <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
      <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
      <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
      <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimiter">The string delimiter character.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
      <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
      <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous populate operation.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializationException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializer">
      <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
      <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
      <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
      <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
      <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
      <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="E:Newtonsoft.Json.JsonSerializer.Error">
      <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.Extensions">
      <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
      <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <typeparam name="T">The source collection type.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JContainer">
      <summary>
            Represents a token that can contain other tokens.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
      <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
      <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
      <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
      <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
      <summary>
            Removes the child nodes from this token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
      <summary>
            Gets the count of child JSON tokens.
            </summary>
      <value>The count of child JSON tokens</value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
      <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
      <summary>
            Occurs before an item is added to the collection.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JConstructor">
      <summary>
            Represents a JSON constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
      <param name="name">The constructor name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
      <summary>
            Gets or sets the name of this constructor.
            </summary>
      <value>The constructor name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
      <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
      <param name="enumerable">The enumerable.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JObject">
      <summary>
            Represents a JSON object.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
            </summary>
      <param name="name">The property name.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
      <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</value>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</value>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
      <summary>
            Removes the property with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>true if item was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries the get value.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
      <summary>
            Occurs when a property value is changing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JArray">
      <summary>
            Represents a JSON array.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
      <param name="token">The token to read from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
      <param name="container">The container being written to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
      <summary>
            Gets the token being writen.
            </summary>
      <value>The token being writen.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JProperty">
      <summary>
            Represents a JSON property.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
      <summary>
            Gets the property name.
            </summary>
      <value>The property name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
      <summary>
            Gets or sets the property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenType">
      <summary>
            Specifies the type of token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
      <summary>
            No token type has been set.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
      <summary>
            A JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
      <summary>
            A JSON array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
      <summary>
            A JSON constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
      <summary>
            A JSON object property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
      <summary>
            An integer value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
      <summary>
            A float value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
      <summary>
            A string value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
      <summary>
            A boolean value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
      <summary>
            A null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
      <summary>
            An undefined value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
      <summary>
            A date value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
      <summary>
            A raw JSON value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
      <summary>
            A collection of bytes value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
      <summary>
            A Guid value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
      <summary>
            A Uri value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
      <summary>
            A TimeSpan value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.Extensions">
      <summary>
            Contains the JSON schema extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="validationEventHandler">The validation event handler.</param>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
      <summary>
            Returns detailed information about the schema exception.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
      <summary>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified id.
            </summary>
      <param name="id">The id.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified id.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
      <summary>
            Gets or sets the loaded schemas.
            </summary>
      <value>The loaded schemas.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
      <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
      <summary>
            Do not infer a schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
      <summary>
            Use the .NET type name as the schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
      <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
      <summary>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation error.
            </summary>
      <value>The JsonSchemaException associated with the validation error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
      <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
      <value>The path of the JSON location where the validation error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
      <summary>
            Gets the text description corresponding to the validation error.
            </summary>
      <value>The text description.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
      <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
      <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
      <summary>
            Gets the serializable members for the type.
            </summary>
      <param name="objectType">The type to get serializable members for.</param>
      <returns>The serializable members for the type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
      <summary>
            Creates the constructor parameters.
            </summary>
      <param name="constructor">The constructor to create properties for.</param>
      <param name="memberProperties">The type's member properties.</param>
      <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
      <param name="matchingMemberProperty">The matching member property.</param>
      <param name="parameterInfo">The constructor parameter.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
      <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
      <summary>
            Determines which contract type is created for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
      <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param><returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns></member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
      <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
      <param name="member">The member.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
      <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
      <summary>
            Gets the resolved name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
      <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
      <value>
        <c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
      <summary>
            Gets or sets the default members search flags.
            </summary>
      <value>The default members search flags.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
      <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
      <value>
        <c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute" /> attribute when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.SerializableAttribute" /> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
      <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The property name camel cased.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
      <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object. </param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object. </param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
      <summary>
            Provides information surrounding an error.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
      <summary>
            Gets or sets the error.
            </summary>
      <value>The error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
      <summary>
            Gets the original object that caused the error.
            </summary>
      <value>The original object that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
      <summary>
            Gets the member that caused the error.
            </summary>
      <value>The member that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
      <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
      <value>The path of the JSON location where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
      <value>
        <c>true</c> if handled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the collection items.
            </summary>
      <value>The <see cref="T:System.Type" /> of the collection items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
      <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
      <value>
        <c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary keys.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary keys.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary values.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary values.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
      <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
      <summary>
            Gets or sets the type that declared this property.
            </summary>
      <value>The type that declared this property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
      <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
      <value>The name of the underlying member or parameter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
      <summary>
            Gets or sets the type of the property.
            </summary>
      <value>The type of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
      <summary>
            Gets the member converter.
            </summary>
      <value>The member converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
      <value>
        <c>true</c> if ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
      <value>
        <c>true</c> if readable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
      <value>
        <c>true</c> if writable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> has a member attribute.
            </summary>
      <value>
        <c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
      <summary>
            Gets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
      <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
      <summary>
            Gets a value indicating whether this property preserves object references.
            </summary>
      <value>
        <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
      <summary>
            Gets the property null value handling.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
      <summary>
            Gets the property default value handling.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
      <summary>
            Gets the property reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
      <summary>
            Gets the property object creation handling.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
      <summary>
            Gets or sets the type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
      <value>A predicate used to determine whether the property should be serialize.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
      <value>A predicate used to determine whether the property should be serialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
      <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
      <value>An action used to set whether the property has been deserialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
      <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
      <param name="property">The property to add to the collection.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
      <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
      <summary>
            Gets a property by property name.
            </summary>
      <param name="propertyName">The name of the property to get.</param>
      <param name="comparisonType">Type property name string comparison.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="T:Newtonsoft.Json.MissingMemberHandling">
      <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
      <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.NullValueHandling">
      <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Include">
      <summary>
            Include null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
      <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
      <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
      <summary>
            Ignore loop references and do not serialize.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
      <summary>
            Serialize loop references.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchema">
      <summary>
            An in-memory representation of a JSON Schema.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains schema JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Parses the specified json.
            </summary>
      <param name="json">The json.</param>
      <param name="resolver">The resolver.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="resolver">The resolver used.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
      <summary>
            Gets or sets the id.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
      <summary>
            Gets or sets whether the object is required.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
      <summary>
            Gets or sets whether the object is read only.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
      <summary>
            Gets or sets whether the object is visible to users.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
      <summary>
            Gets or sets whether the object is transient.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
      <summary>
            Gets or sets the description of the object.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
      <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
      <summary>
            Gets or sets the minimum length.
            </summary>
      <value>The minimum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
      <summary>
            Gets or sets the maximum length.
            </summary>
      <value>The maximum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
      <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
      <value>A number that the value should be divisble by.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
      <summary>
            Gets or sets the minimum.
            </summary>
      <value>The minimum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
      <summary>
            Gets or sets the maximum.
            </summary>
      <value>The maximum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
      <summary>
            Gets or sets the minimum number of items.
            </summary>
      <value>The minimum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
      <summary>
            Gets or sets the maximum number of items.
            </summary>
      <value>The maximum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
      <summary>
            Gets or sets the pattern properties.
            </summary>
      <value>The pattern properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
      <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
      <value>
        <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
      <summary>
            Gets or sets the required property if this property is present.
            </summary>
      <value>The required property if this property is present.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Identity">
      <summary>
            Gets or sets the identity.
            </summary>
      <value>The identity.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
      <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
      <value>A collection of valid enum values allowed.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Options">
      <summary>
            Gets or sets a collection of options.
            </summary>
      <value>A collection of options.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
      <summary>
            Gets or sets disallowed types.
            </summary>
      <value>The disallow types.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
      <summary>
            Gets or sets the extend <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
      <value>The extended <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
      <summary>
            Gets or sets the format.
            </summary>
      <value>The format.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
      <summary>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
      <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
      <summary>
            Gets or sets the contract resolver.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
      <summary>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
      <summary>
            No type specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
      <summary>
            String type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
      <summary>
            Float type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
      <summary>
            Integer type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
      <summary>
            Object type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
      <summary>
            Array type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
      <summary>
            Null type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
      <summary>
            Any type.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
      <summary>
            Gets or sets the object member serialization.
            </summary>
      <value>The member object serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
      <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
      <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
      <value>The override constructor.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
      <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
      <value>The parametrized constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
      <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
      <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
      <summary>
            Represents a method that constructs an object.
            </summary>
      <typeparam name="T">The object type to create.</typeparam>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameHandling">
      <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.None">
      <summary>
            Do not include the .NET type name when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
      <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
      <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.All">
      <summary>
            Always include the .NET type name when serializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
      <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert or cast the value to.</param>
      <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <param name="enumType">The enum type to get names and values for.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonToken">
      <summary>
            Specifies the type of Json token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.None">
      <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a <see cref="M:Newtonsoft.Json.JsonReader.Read" /> method has not been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartObject">
      <summary>
            An object start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartArray">
      <summary>
            An array start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
      <summary>
            A constructor start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
      <summary>
            An object property name.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Raw">
      <summary>
            Raw JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Integer">
      <summary>
            An integer.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Float">
      <summary>
            A float.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.String">
      <summary>
            A string.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Boolean">
      <summary>
            A boolean.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Null">
      <summary>
            A null token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Undefined">
      <summary>
            An undefined token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndObject">
      <summary>
            An object end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndArray">
      <summary>
            An array end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
      <summary>
            A constructor end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Date">
      <summary>
            A Date.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Bytes">
      <summary>
            Byte data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
      <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            Determines whether the collection is null or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
      <param name="initial">The list to add to.</param>
      <param name="collection">The collection of elements to add.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <param name="list">A sequence in which to locate a value.</param>
      <param name="value">The object to locate in the sequence</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
      <summary>
            Gets the type of the typed collection's items.
            </summary>
      <param name="type">The type.</param>
      <returns>The type of the typed collection's items.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
      <summary>
            Gets the member's underlying type.
            </summary>
      <param name="member">The member.</param>
      <returns>The underlying type of the member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the member is an indexed property.
            </summary>
      <param name="member">The member.</param>
      <returns>
        <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines whether the property is an indexed property.
            </summary>
      <param name="property">The property.</param>
      <returns>
        <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
      <summary>
            Gets the member's value on the object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target object.</param>
      <returns>The member's value on the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
      <summary>
            Sets the member's value on the target object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
      <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param><returns><c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns></member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
      <param name="member">The MemberInfo to determine whether can be set.</param>
      <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
      <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
      <returns>
        <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
      <param name="s">The string to test whether it is all white space.</param>
      <returns>
        <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
      <summary>
            Nulls an empty string.
            </summary>
      <param name="s">The string.</param>
      <returns>Null if the string was null, otherwise the string unchanged.</returns>
    </member>
    <member name="T:Newtonsoft.Json.WriteState">
      <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Error">
      <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" /> being thrown. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Closed">
      <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Object">
      <summary>
            An object is being written. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Array">
      <summary>
            A array is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Constructor">
      <summary>
            A constructor is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Property">
      <summary>
            A property is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Start">
      <summary>
            A write method has not been called.
            </summary>
    </member>
  </members>
</doc>